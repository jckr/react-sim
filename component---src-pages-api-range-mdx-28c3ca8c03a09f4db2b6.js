(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{zZaf:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return d}));var n=a("zLVn"),l=(a("q1tI"),a("7ljp")),b=["components"],r={},o={_frontmatter:r};function d(e){var t=e.components,a=Object(n.a)(e,b);return Object(l.b)("wrapper",Object.assign({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"All ",Object(l.b)("a",{parentName:"p",href:"/react-sim/api#common-control-props"},"Common control props")," properties, plus:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Name"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"maxValue"),Object(l.b)("br",null),"number, optional, default 100"),Object(l.b)("td",{parentName:"tr",align:null},"The value corresponding to the end of the range.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"minValue"),Object(l.b)("br",null),"number, optional, default 0"),Object(l.b)("td",{parentName:"tr",align:null},"The value corresponding to the beginning of the range.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"name"),Object(l.b)("br",null),"string, optional"),Object(l.b)("td",{parentName:"tr",align:null},"The name of the control. If not specified, label is used.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"shouldDisplayLabel"),Object(l.b)("br",null),"boolean, default true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the label should be displayed.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"shouldDisplayMaxValue"),Object(l.b)("br",null),"boolean, default true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the maximum value should be displayed to the right of the range.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"shouldDisplayMinValue"),Object(l.b)("br",null),"boolean, default true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the minimum value should be displayed to the left of the range.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"shouldDisplayValue"),Object(l.b)("br",null),"boolean, default true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the value should be displayed next to the label.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"shouldDisplaySlider"),Object(l.b)("br",null),"boolean, default true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the slider should be displayed. If the slider is not displayed, the min and max values are also hidden.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},"step"),Object(l.b)("br",null),"number, optional, default 1"),Object(l.b)("td",{parentName:"tr",align:null},"The amount by which the value will be incremeneted or decremented when moving the range cursor.")))))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-range-mdx-28c3ca8c03a09f4db2b6.js.map