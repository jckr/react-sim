(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{zMld:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return l}));a("rzGZ"),a("Dq+y"),a("8npG"),a("Ggvi"),a("E5k/"),a("q1tI");var n=a("7ljp");var b={},r={_frontmatter:b};function l(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,b={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,["components"]);return Object(n.b)("wrapper",Object.assign({},r,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"The ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"/react-sim/api#default-timer"}),"Default timer")," properties, plus:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object.assign({parentName:"tr"},{align:null}),"Name"),Object(n.b)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"maxTime"),Object(n.b)("br",null),"integer, 100 by default"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"At which position the timer ends.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"minTime"),Object(n.b)("br",null),"integer, 0 by default"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"At which position the timer starts. Can be negative.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"label"),Object(n.b)("br",null),"string, optional"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"The label which will describe the control.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"name"),Object(n.b)("br",null),"string, optional"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"The name of the control. If not specified, label is used.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"shouldDisplayLabel"),Object(n.b)("br",null),"boolean, default true"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"Whether the label should be displayed.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"shouldDisplayMaxValue"),Object(n.b)("br",null),"boolean, default true"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"Whether the maximum value should be displayed to the right of the range.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"shouldDisplayMinValue"),Object(n.b)("br",null),"boolean, default true"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"Whether the minimum value should be displayed to the left of the range.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"shouldDisplayValue"),Object(n.b)("br",null),"boolean, default true"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"Whether the value should be displayed next to the label.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"showTime"),Object(n.b)("br",null),"boolean, true by default"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"Whether the time block (i.e. slider and time value) is going to be shown.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"showTimeSlider"),Object(n.b)("br",null),"boolean, true by default"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"Whether the time slider is going to be shown.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"time"),Object(n.b)("br",null),"number"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"The current value of time shown on this Timer")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(n.b)("strong",{parentName:"td"},"updateTime"),Object(n.b)("br",null),"function"),Object(n.b)("td",Object.assign({parentName:"tr"},{align:null}),"The function that will update this Timer's time when the")))),Object(n.b)("p",null,"Unlike the other built-in controls, Timer does ",Object(n.b)("em",{parentName:"p"},"not")," take a ",Object(n.b)("inlineCode",{parentName:"p"},"value")," or a ",Object(n.b)("inlineCode",{parentName:"p"},"setValue")," parameter."))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-timer-mdx-8b4cbfca4e3a502448cf.js.map