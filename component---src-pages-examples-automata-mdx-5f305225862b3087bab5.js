(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{"6IE8":function(e,t,o){"use strict";o.r(t),o.d(t,"_frontmatter",(function(){return l})),o.d(t,"default",(function(){return s}));o("Ggvi"),o("E5k/"),o("q1tI");var n=o("7ljp"),a=o("TVkH"),r=["components"];var l={Title:"1D automata"},c={_frontmatter:l};function s(e){var t=e.components,o=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,r);return Object(n.b)("wrapper",Object.assign({},c,o,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"1d-automata"},"1D Automata"),Object(n.b)(a.b,{mdxType:"Automata"}),Object(n.b)("p",null,Object(n.b)("a",{parentName:"p",href:"https://mathworld.wolfram.com/ElementaryCellularAutomaton.html"},"1D cellular automata")," are among the simplest of automata.\nEach line consists of a series of cells which are either set (colored) or not."),Object(n.b)("p",null,"At each tick, we use a rule to determine whether cells on the next line will be set.\nFor each new cell, we consider the three cells above. There are 8 possible combinations - each of these cells can be set or not (so 2x2x2).\nFor each of these combinations, the rule determines whether the cell should be set or not. So we have 2",Object(n.b)("sup",null,"8")," rules, or 256."),Object(n.b)("p",null,"You can select a rule by adjusting the slider, or by clicking on each of the bits."),Object(n.b)("p",null,"This simulation is an interesting example of ",Object(n.b)("a",{parentName:"p",href:"/react-sim/controls/custom-controls"},"custom control components")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-examples-automata-mdx-5f305225862b3087bab5.js.map