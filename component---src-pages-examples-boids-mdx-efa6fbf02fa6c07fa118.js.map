{"version":3,"sources":["webpack:///./src/components/examples/boids.js","webpack:///./src/pages/examples/boids.mdx","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js"],"names":["params","alignmentCoefficient","alignmentDistance","cohesionCoefficient","cohesionDistance","height","maxforce","maxspeed","nbBoids","r","separationCoefficient","separationDistance","showCircles","width","normalize","v","l","Math","hypot","div","mult","k","map","d","add","v0","v1","i","sub","limit","force","limitedForce","min","initData","random","Array","fill","angle","PI","velocity","cos","sin","acceleration","position","updateData","data","separation","alignment","cohesion","forEach","boid","countSeparation","countAlignment","countCohesion","j","length","otherBoid","positionDifference","distanceBetweenBoids","diff","seek","atan2","target","desired","steer","draw","ctx","circle","fillStyle","fillRect","x","y","strokeStyle","globalAlpha","beginPath","moveTo","lineTo","closePath","stroke","Frame","props","Boids","initialParams","maxTime","Infinity","nocache","controls","param","label","minValue","maxValue","step","type","_frontmatter","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent","$export","abs","S","value1","value2","arg","sum","aLen","arguments","larg","sqrt"],"mappings":"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","file":"component---src-pages-examples-boids-mdx-efa6fbf02fa6c07fa118.js","sourcesContent":["import React from 'react';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const params = {\n  alignmentCoefficient: 1,\n  alignmentDistance: 50,\n  cohesionCoefficient: 1,\n  cohesionDistance: 40,\n  height: 332,\n  maxforce: 0.03,\n  maxspeed: 2,\n  nbBoids: 50,\n  r: 5,\n  separationCoefficient: 1.5,\n  separationDistance: 25,\n  showCircles: true,\n  width: 332,\n};\n\n// helpers\n\nexport const normalize = v => {\n  const l = Math.hypot(...v);\n  if (l === 0) {\n    return v;\n  }\n  return div(v, l);\n};\n\nexport const mult = (v, k) => v.map(d => d * k);\nexport const div = (v, k) => v.map(d => d / k);\n\nexport const add = (v0, v1) => v0.map((d, i) => d + v1[i]);\nexport const sub = (v0, v1) => v0.map((d, i) => d - v1[i]);\n\nexport const limit = (v, k) => {\n  const force = Math.hypot(...v);\n  const limitedForce = Math.min(force, k);\n  return div(v, force / limitedForce);\n};\n\nexport const initData = ({ height, nbBoids, width }, random = Math.random) => {\n  const boids = Array(nbBoids)\n    .fill(0)\n    .map(d => {\n      const angle = random() * 2 * Math.PI;\n      const velocity = [Math.cos(angle), Math.sin(angle)];\n      const boid = {\n        angle,\n        acceleration: [0, 0],\n        position: [random() * width, random() * height],\n        velocity,\n      };\n      return boid;\n    });\n  return boids;\n};\n\nexport const updateData = ({ data, params }) => {\n  const {\n    alignmentDistance,\n    cohesionDistance,\n    separationCoefficient,\n    alignmentCoefficient,\n    cohesionCoefficient,\n    separationDistance,\n    maxspeed,\n    maxforce,\n    r,\n    height,\n    width,\n  } = params;\n\n  const separation = data.map(d => [0, 0]);\n  const alignment = data.map(d => [0, 0]);\n  const cohesion = data.map(d => [0, 0]);\n\n  data.forEach((boid, i) => {\n    let countSeparation = 0;\n    let countAlignment = 0;\n    let countCohesion = 0;\n\n    for (let j = 0; j < data.length; j++) {\n      if (j !== i) {\n        const otherBoid = data[j];\n        const positionDifference = sub(boid.position, otherBoid.position);\n        const distanceBetweenBoids = Math.hypot(...positionDifference);\n\n        // separation\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < separationDistance\n        ) {\n          const diff = div(normalize(positionDifference), distanceBetweenBoids);\n          separation[i] = add(separation[i], diff);\n          countSeparation++;\n        }\n\n        // alignment\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < alignmentDistance\n        ) {\n          alignment[i] = add(alignment[i], otherBoid.velocity);\n          countAlignment++;\n        }\n\n        // cohesion\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < cohesionDistance\n        ) {\n          cohesion[i] = add(cohesion[i], otherBoid.position);\n          countCohesion++;\n        }\n      }\n    }\n\n    // separation\n\n    if (countSeparation > 0) {\n      separation[i] = div(separation[i], countSeparation);\n      separation[i] = normalize(separation[i]);\n      separation[i] = mult(separation[i], maxspeed);\n      separation[i] = sub(separation[i], boid.velocity);\n      separation[i] = limit(separation[i], maxforce);\n      separation[i] = mult(separation[i], separationCoefficient);\n    }\n\n    // alignment\n    if (countAlignment > 0) {\n      alignment[i] = div(alignment[i], countAlignment);\n      alignment[i] = normalize(alignment[i]);\n      alignment[i] = mult(alignment[i], maxspeed);\n      alignment[i] = sub(alignment[i], boid.velocity);\n      alignment[i] = limit(alignment[i], maxforce);\n      alignment[i] = mult(alignment[i], alignmentCoefficient);\n    }\n\n    // cohesion\n    if (countCohesion > 0) {\n      cohesion[i] = div(cohesion[i], countCohesion);\n      cohesion[i] = seek(\n        boid.position,\n        cohesion[i],\n        boid.velocity,\n        maxspeed,\n        maxforce\n      );\n      cohesion[i] = mult(cohesion[i], cohesionCoefficient);\n    }\n  });\n\n  return data.map((boid, i) => {\n    // applying all three forces\n    const acceleration = add(add(alignment[i], cohesion[i]), separation[i]);\n    const velocity = limit(add(boid.velocity, acceleration), maxspeed);\n    const position = add(boid.position, velocity);\n    const angle = Math.atan2(boid.velocity[1], boid.velocity[0]);\n    // wraparound\n\n    if (position[0] < -r) {\n      position[0] = width + r;\n    }\n    if (position[0] > width + r) {\n      position[0] = -r;\n    }\n    if (position[1] < -r) {\n      position[1] = height + r;\n    }\n    if (position[1] > height + r) {\n      position[1] = -r;\n    }\n    return {\n      ...boid,\n      angle,\n      position,\n      velocity,\n    };\n  });\n};\n\nexport const seek = (position, target, velocity, maxspeed, maxforce) => {\n  const desired = mult(normalize(sub(target, position)), maxspeed);\n  const steer = sub(desired, velocity);\n  return limit(steer, maxforce);\n};\n\nexport const draw = ({\n  ctx,\n  circle,\n  data,\n  params: {\n    alignmentDistance,\n    cohesionDistance,\n    separationDistance,\n    height,\n    showCircles,\n    width,\n    r,\n  },\n}) => {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, width, height);\n  data.forEach(({ position: [x, y], angle }) => {\n    ctx.strokeStyle = '#000';\n    ctx.globalAlpha = 1;\n    ctx.beginPath();\n    ctx.moveTo(x + Math.cos(angle) * r, y + Math.sin(angle) * r);\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 2) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 2) / 3) * r * 2) / 3\n    );\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 4) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 4) / 3) * r * 2) / 3\n    );\n    ctx.closePath();\n    ctx.stroke();\n    if (showCircles) {\n      ctx.globalAlpha = 0.2;\n      ctx.strokeStyle = '#f00';\n      circle({ x, y, r: separationDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#0f0';\n      circle({ x, y, r: alignmentDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#00f';\n      circle({ x, y, r: cohesionDistance });\n      ctx.closePath();\n      ctx.stroke();\n    }\n  });\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Boids = () => (\n  <Model\n    initialParams={params}\n    maxTime={Infinity}\n    nocache\n    initData={initData}\n    updateData={updateData}\n    controls={[\n      [\n        {\n          param: 'alignmentCoefficient',\n          label: 'Alignment',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'alignmentDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'cohesionCoefficient',\n          label: 'Cohesion',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'cohesionDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'separationCoefficient',\n          label: 'Separation',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'separationDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      {\n        param: 'showCircles',\n        label: 'Show circles:',\n        type: 'toggle',\n      },\n    ]}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const ChillBoids = () => (\n  <Model\n    initialParams={params}\n    isPlaying\n    maxTime={Infinity}\n    noCache\n    noControls\n    initData={initData}\n    updateData={updateData}\n  >\n    <Frame />\n  </Model>\n);\nexport default Boids;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Boids, { ChillBoids } from '../../components/examples/boids';\nexport const _frontmatter = {\n  \"Title\": \"Boids\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"boids\"\n    }}>{`Boids`}</h1>\n    <Boids mdxType=\"Boids\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Boids\"\n      }}>{`Boids`}</a>{` is one of the best-known agent simulations in computer graphics.`}</p>\n    <p>{`A number of boid agents move in a plane and their movement is governed by three forces:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`alignment: they try to move in the same direction than the boids around them,`}</li>\n      <li parentName=\"ul\">{`cohesion: they try to move towards the average position of boids around them,`}</li>\n      <li parentName=\"ul\">{`separation: they try to avoid other boids around them.`}</li>\n    </ul>\n    <p>{`The boids movement is reminescent of that of flock of birds.`}</p>\n    <p>{`In our implementation, each of these forces can be parameterized: the coefficient is how much this force affects the boid's movement, and the radius is the maximum distance at which neighboring boids are considered.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n"],"sourceRoot":""}