{"version":3,"sources":["webpack:///./src/pages/time.mdx","webpack:///./src/components/examples/fibonacci.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","phi","Math","sqrt","D","0","1","2","3","colors","right","down","left","up","initData","updateData","data","tick","lastNumber","draw","ctx","size","params","fillStyle","fillRect","x","y","side","i","d","strokeStyle","strokeRect","radius","max","beginPath","arc","PI","stroke","closePath","FibonacciSpiralFrame","width","height","FibonacciSpiral","initialParams","delay","maxTime","FibonacciSquaresFrame","maxX","minX","maxY","minY","sequence","squares","slice","map","n","direction","borderWidth","fontSize","String","length","square","key","style","position","border","boxSizing","display","alignItems","justifyContent","background","top","overflow","borderRadius","transform","undefined","min","maxSide","scale","pointerEvents","transformOrigin","transition","FibonacciSquares"],"mappings":"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","file":"component---src-pages-time-mdx-16d729b62268d2026819.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { FibonacciSpiral } from '../components/examples/fibonacci';\nexport const _frontmatter = {\n  \"Title\": \"Time\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"how-time-works\"\n    }}>{`How Time Works`}</h1>\n    <p>{`Time is one of the central notions of `}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{`.`}</p>\n    <p>{`A react-sim `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` will maintain:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tick`}</inlineCode>{` (integer), a representation of the progress in the simulation,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` (anything), the internal state of the data to be shown,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isPlaying`}</inlineCode>{` (boolean), a flag that controls whether the animation is running or not.`}</li>\n    </ul>\n    <p>{`In addition to these main properties, `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` also maintains:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cachedData`}</inlineCode>{` (object), which caches data which has already been calculated for a given `}<inlineCode parentName=\"li\">{`tick`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`results`}</inlineCode>{` (array), where information on the previous runs of the simulation can be stored.`}</li>\n    </ul>\n    <p>{`The simulation author is expected to pass properties such as:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialParams`}</inlineCode>{` (object), a list of params for the simulation. They can be overridden by the `}<a parentName=\"li\" {...{\n          \"href\": \"/react-sim/controls\"\n        }}>{`controls`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initData`}</inlineCode>{` (function), which takes `}<inlineCode parentName=\"li\">{`params`}</inlineCode>{`as input and outputs the first value for `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updateData`}</inlineCode>{` (function), which takes: `}<inlineCode parentName=\"li\">{`params`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`tick`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`cachedData`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`results`}</inlineCode>{` as inputs, and outputs a new value for `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`.`}</li>\n    </ul>\n    <h1 {...{\n      \"id\": \"the-simulation-lifecycle\"\n    }}>{`The simulation lifecycle`}</h1>\n    <h2 {...{\n      \"id\": \"initial-state\"\n    }}>{`Initial state`}</h2>\n    <p>{`When a `}<inlineCode parentName=\"p\">{`<Model />`}</inlineCode>{` is created it will:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`initiate the interal `}<inlineCode parentName=\"li\">{`params`}</inlineCode>{` from the values of `}<inlineCode parentName=\"li\">{`initParams`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`initiate `}<inlineCode parentName=\"li\">{`tick`}</inlineCode>{` - either through the `}<inlineCode parentName=\"li\">{`minTime`}</inlineCode>{` or the `}<inlineCode parentName=\"li\">{`initialTick`}</inlineCode>{` prop. `}<inlineCode parentName=\"li\">{`minTime`}</inlineCode>{` takes precedence.`}</li>\n      <li parentName=\"ul\">{`run `}<inlineCode parentName=\"li\">{`initData`}</inlineCode>{` and generate a first value for `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` from the `}<inlineCode parentName=\"li\">{`params`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/react-sim/frame\"\n      }}>{`frames`}</a>{` will not render until `}<inlineCode parentName=\"p\">{`initData`}</inlineCode>{` has run, but they will render once `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` has been initialized once.`}</p>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`isPlaying`}</inlineCode>{` prop of the `}<inlineCode parentName=\"p\">{`<Model />`}</inlineCode>{` is set to true, it will start `}<inlineCode parentName=\"p\">{`playing`}</inlineCode>{`. Else, the simulation doesn't change until `}<a parentName=\"p\" {...{\n        \"href\": \"/react-sim/controls\"\n      }}>{`controls`}</a>{` trigger it.`}</p>\n    <h2 {...{\n      \"id\": \"playing\"\n    }}>{`Playing`}</h2>\n    <p>{`When the simulation is playing, every so often it will try to update `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` and refresh the `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{`.\nBy default, the simulation refreshes 60 times per second.`}</p>\n    <p>{`It's possible to make it go slower by providing a `}<inlineCode parentName=\"p\">{`delay`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{`. The simulation will wait that long (in ms) to refresh the animation.\nEach time the animation refreshes, the simulation will progress by 1 tick (i.e. the `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` value will increase by 1.)\nIt's also possible to make it go faster with a `}<inlineCode parentName=\"p\">{`ticksPerAnimation`}</inlineCode>{` prop. If this value is greater than 1, then the simualtion will try to update `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` that many times before re-rendering `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{`.`}</p>\n    <p>{`We can use both values at once. For instance, we can have a simulation that, every 100ms, updates 500 times.`}</p>\n    <h3 {...{\n      \"id\": \"playing-stops-if\"\n    }}>{`Playing stops if:`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`the user `}<em parentName=\"li\">{`pauses`}</em>{` or `}<em parentName=\"li\">{`stops`}</em>{` the simulation,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ticks`}</inlineCode>{` reaches the maximum value,`}</li>\n      <li parentName=\"ul\">{`the simulation `}<em parentName=\"li\">{`completes`}</em>{`.`}</li>\n    </ul>\n    <p>{`When the simulation `}<em parentName=\"p\">{`pauses`}</em>{`, `}<inlineCode parentName=\"p\">{`isPlaying`}</inlineCode>{` simply switches to false. Nothing else changes, `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` stays the same, so does `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`, etc.\nThe `}<a parentName=\"p\" {...{\n        \"href\": \"/react-sim/controls/default-timer\"\n      }}>{`default timer`}</a>{` provides an easy way for a user to trigger a `}<inlineCode parentName=\"p\">{`pause`}</inlineCode>{`. Model has an internal method that pauses, which can be exposed to controls.`}</p>\n    <p>{`When the simulation `}<em parentName=\"p\">{`stops`}</em>{`, `}<inlineCode parentName=\"p\">{`isPlaying`}</inlineCode>{` switches to false, but data is also re-initiated:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tick`}</inlineCode>{` goes back to its original value,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initData`}</inlineCode>{` fires again and overwrites `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cachedData`}</inlineCode>{` is emptied,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`results`}</inlineCode>{` is left unchanged.`}</li>\n    </ul>\n    <p>{`The simulation `}<em parentName=\"p\">{`completes`}</em>{` when `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` triggered a condition where it can't go any further.\nWhen this happens:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isPlaying`}</inlineCode>{` switches to false, but:`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tick`}</inlineCode>{` is unchanged,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is unchanged,`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`result`}</inlineCode>{` for this run may be appended to `}<inlineCode parentName=\"li\">{`results`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`The simulation won't reset unless manually triggered.`}</p>\n    <h3 {...{\n      \"id\": \"when-to-update-or-cache-data\"\n    }}>{`When to update or cache data`}</h3>\n    <p>{`Each time `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` changes, `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` is updated.\nIf using cached data, and `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` changes to a value for which `}<inlineCode parentName=\"p\">{`cachedData`}</inlineCode>{` has precomputed values, then the simulation will simply retrieve those values and not do further calculations.\nThis can happen, for instance, if a user uses the time slider to move back in time.`}</p>\n    <p>{`Else, we're going to figure out which is the latest value of `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` for which we have data, and through how many cycles do we have to go to get to the current value of `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` - which can be just 1 if tick is simply incrementing along the animation, but which could be more if `}<inlineCode parentName=\"p\">{`ticksPerAnimation`}</inlineCode>{` is set, or if we are moving foward in time with the time slider, and run `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` as many times as needed.\n`}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` will stop running if:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tick`}</inlineCode>{` reaches the maximum value, or`}</li>\n      <li parentName=\"ul\">{`the simulation `}<em parentName=\"li\">{`completes`}</em>{`.`}</li>\n    </ul>\n    <p>{`Each time it successfully runs, if caching data, it will update `}<inlineCode parentName=\"p\">{`cachedData`}</inlineCode>{`.`}</p>\n    <p>{`If a simulation is never going to complete, and has no maximum time value, and there's no reason to go back in time, then it may be a good idea to disable caching, as the system will eventually run out of memory. You can do that by setting the `}<inlineCode parentName=\"p\">{`noCache`}</inlineCode>{` property of the `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"updating-data\"\n    }}>{`Updating data`}</h3>\n    <p>{`Updating data is done through the `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` function, which takes as arguments an object with the following properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{`: the existing `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tick`}</inlineCode>{`: the next value of `}<inlineCode parentName=\"li\">{`tick`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`params`}</inlineCode>{`: all the `}<inlineCode parentName=\"li\">{`params`}</inlineCode>{` of the simulation,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cachedData`}</inlineCode>{`: the cached values of `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` for previous ticks,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`results`}</inlineCode>{`: the results of previous runs,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`complete`}</inlineCode>{`: a function that signals that the simulation is complete. If it's provided an argument (result), that is added to the `}<inlineCode parentName=\"li\">{`results`}</inlineCode>{` property of the simulation.`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` will return an updated value for `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`. Even if it completes, it's expected to return `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`.`}</p>\n    <p>{`The main idea behind `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` taking the existing `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` as an argument is that it can operates as a mathematical sequence.`}</p>\n    <p>{`For example, in the following Fibonacci spiral example:`}</p>\n    <FibonacciSpiral mdxType=\"FibonacciSpiral\" />\n    <p>{`the `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` function is a very simple recursion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n`}</code></pre>\n    <p>{`But `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` has access to other properties of the simulation, and can use past values of data, or even information on previous runs of the simulation, as needed.\n`}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` can also not use any of these arguments and provide values unrelated to the previous state of the simulation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst phi = 0.5 + Math.sqrt(5) / 2;\n\nconst D = {\n  0: 'right',\n  1: 'down',\n  2: 'left',\n  3: 'up',\n};\n\nconst colors = {\n  right: '#b6b6e2',\n  down: '#a6d3d9',\n  left: '#ffeb3b',\n  up: '#95d392',\n};\n\nexport function initData() {\n  return [0];\n}\n\nexport function updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n\nexport function draw({ ctx, params: { size }, tick }) {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, size, size);\n  let x = 0,\n    y = 0,\n    side = size;\n  for (let i = 0; i < tick; i++) {\n    const d = D[i % 4];\n    side = side / phi;\n    ctx.strokeStyle = '#ddd';\n    ctx.strokeRect(x, y, side, side);\n    ctx.strokeStyle = '#222';\n\n    const radius = Math.max(0, side - 1);\n    switch (d) {\n      case 'right':\n        ctx.beginPath();\n        ctx.arc(x + side, y + side, radius, Math.PI, -Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + side;\n        break;\n      case 'down':\n        ctx.beginPath();\n        ctx.arc(x, y + side, radius, -Math.PI / 2, 0);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + (1 - 1 / phi) * side;\n        y = y + side;\n        break;\n      case 'left':\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x - side / phi;\n        y = y + (1 - 1 / phi) * side;\n        break;\n      case 'up':\n        ctx.beginPath();\n        ctx.arc(x + side, y, radius, Math.PI / 2, Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        y = y - side / phi;\n        break;\n      default:\n    }\n  }\n}\n\nexport const FibonacciSpiralFrame = ({ tick, params }) => {\n  const { size } = params;\n  const width = size;\n  const height = size / phi;\n\n  return <CanvasFrame height={height} width={width} draw={draw} />;\n};\n\nconst FibonacciSpiral = () => (\n  <Model initialParams={{ size: 332 }} delay={100} maxTime={15}>\n    <FibonacciSpiralFrame />\n  </Model>\n);\n\nexport const FibonacciSquaresFrame = ({ data, tick, params }) => {\n  let maxX = 0,\n    minX = 0,\n    maxY = 0,\n    minY = 0,\n    x = 0,\n    y = 0;\n  function renderSquares(sequence) {\n    return sequence.map((d, i) => {\n      const n = d * 10;\n      const direction = D[i % 4];\n      switch (direction) {\n        case 'right':\n          y = y - n;\n          break;\n        case 'left':\n          x = x - n;\n          break;\n        case 'up':\n          x = x - n;\n          y = y - n;\n          break;\n        default:\n      }\n      const borderWidth = Math.max(\n        0.1,\n        i < 2 ? 1 / params.size : 1 / (n + 10 * sequence[i - 1])\n      );\n\n      const fontSize = n / (1.5 * String(d).length);\n\n      const square = (\n        <div\n          key={`rect-${i}`}\n          style={{\n            position: 'absolute',\n            border: `#{borderWidth}px solid #777`,\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: colors[direction],\n            top: y,\n            left: x,\n            width: n,\n            height: n,\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            style={{\n              fontSize,\n            }}\n          >\n            {d}\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              width: 2 * n,\n              height: 2 * n,\n              border: `${borderWidth}px solid black`,\n              borderRadius: n,\n              boxSizing: 'border-box',\n              top: 0,\n              left: 0,\n              transform: {\n                right: undefined,\n                down: 'translate(-50%)',\n                left: 'translate(-50%,-50%)',\n                up: 'translate(0,-50%)',\n              }[direction],\n            }}\n          />\n        </div>\n      );\n      switch (direction) {\n        case 'right':\n          x = x + n;\n          break;\n        case 'down':\n          x = x + n;\n          y = y + n;\n          break;\n        case 'left':\n          y = y + n;\n          break;\n        default:\n      }\n      maxX = Math.max(maxX, x);\n      minX = Math.min(minX, x);\n      maxY = Math.max(maxY, y);\n      minY = Math.min(minY, y);\n      return square;\n    });\n  }\n\n  const squares = renderSquares(data.slice(1));\n  const maxSide = Math.max(maxX - minX, maxY - minY);\n  const scale = params.size / maxSide;\n\n  return (\n    <div\n      style={{\n        width: params.size,\n        height: params.size,\n        position: 'relative',\n        pointerEvents: 'none',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          transformOrigin: 'top left',\n          transform: `scale(${scale}) translate(${-minX}px,${-minY}px)`,\n          width: `${maxX - minX}px`,\n          height: `${maxY - minY}px`,\n          transition: 'transform 0.2s',\n        }}\n      >\n        {squares}\n      </div>\n    </div>\n  );\n};\n\nconst FibonacciSquares = () => (\n  <Model\n    initialParams={{ size: 350 }}\n    initData={initData}\n    updateData={updateData}\n    delay={400}\n    maxTime={12}\n  >\n    <FibonacciSquaresFrame />\n  </Model>\n);\n\nexport { FibonacciSpiral, FibonacciSquares };\n"],"sourceRoot":""}