{"version":3,"sources":["webpack:///./src/components/examples/percolation.js","webpack:///./src/pages/examples/percolation.mdx"],"names":["status","pending","success","failure","updateData","data","params","complete","queue","grid","height","updatedStatus","width","length","nextQueue","cell","shift","x","y","push","PENDING","shouldComplete","updateDataGrid","nbPending","forEach","row","updatedCell","initData","porosity","Math","random","Number","PercolationFrame","cellSize","margin","canvasRef","useRef","useEffect","ctx","current","getContext","fillStyle","fillRect","rowIndex","colIndex","r","tl","tr","br","topLeft","topRight","bottomLeft","bl","bottomRight","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","roundRect","fill","lineWidth","strokeStyle","lineCap","max","stroke","style","boxSizing","border","ref","PercolationFrameGrid","display","flexDirection","rows","cols","map","key","initDataGrid","minP","stepP","Array","keys","c","PercolationGrid","auto","maxTime","Infinity","initialParams","_frontmatter","layoutProps","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"imCAIA,IAUMA,EAAS,CACbC,QAAS,UACTC,QAAS,UACTC,QAAS,WAGX,SAASC,EAAT,GAAiD,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAC1BC,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,KACPC,EAAkBJ,EAAlBI,OACJC,GADsBL,EAAVM,MACIP,EAAKL,QACJ,IAAjBQ,EAAMK,SACRF,EAAgBX,EAAOG,SAGzB,IADA,IAAMW,EAAY,GACXN,EAAMK,OAAS,GAAKF,IAAkBX,EAAOC,SAAS,CAC3D,IAAMc,EAAOP,EAAMQ,QACXC,EAASF,EAATE,EAAGC,EAAMH,EAANG,EACPA,IAAMR,EAAS,EACjBC,EAAgBX,EAAOE,QA5Bf,IA6BCO,EAAKS,EAAI,GAAGD,KACrBR,EAAKS,EAAI,GAAGD,GAxBK,EAyBjBH,EAAUK,KAAK,CAAEF,IAAGC,EAAGA,EAAI,KA/BnB,IAmCNT,EAAKS,GAAGD,EAAI,KACdR,EAAKS,GAAGD,EAAI,GA7BO,EA8BnBH,EAAUK,KAAK,CAAEF,EAAGA,EAAI,EAAGC,OArCnB,IAuCNT,EAAKS,GAAGD,EAAI,KACdR,EAAKS,GAAGD,EAAI,GAhCM,EAiClBH,EAAUK,KAAK,CAAEF,EAAGA,EAAI,EAAGC,OAM/B,OAHIP,IAAkBX,EAAOoB,SAAWd,EAAOe,gBAC7Cd,EAASI,GAEJ,CACLF,OACAD,MAAOM,EACPd,OAAQW,GAIZ,SAASW,EAAT,GAAqD,IAA3BjB,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAClCgB,EAAY,EAkBhB,OAjBAlB,EAAKmB,SAAQ,SAACC,EAAKP,GAAN,OACXO,EAAID,SAAQ,SAACT,EAAME,GACjB,GAAIF,EAAKf,SAAWA,EAAOC,QAAS,CAClC,IAAMyB,EAActB,EAAW,CAC7BC,KAAMU,EACNT,OAAQ,CAAEI,OAAQJ,EAAOI,OAAQW,gBAAgB,KAEnDhB,EAAKa,GAAGD,GAAKS,EACTA,EAAY1B,SAAWA,EAAOC,SAChCsB,WAKU,IAAdA,GACFhB,IAEKF,EAGT,SAASsB,EAAT,GAAgD,IAG1CV,EAAGC,EAHWU,EAA2B,EAA3BA,SAAUlB,EAAiB,EAAjBA,OAAQE,EAAS,EAATA,MAC9BH,EAAO,GACPD,EAAQ,GAEd,IAAKU,EAAI,EAAGA,EAAIR,EAAQQ,IAAK,CAC3B,IAAMO,EAAM,GACZ,IAAKR,EAAI,EAAGA,EAAIL,EAAOK,IACrBQ,EAAIN,KAAKU,KAAKC,SAAWC,OAAOH,GAlFzB,EADC,GAqFVnB,EAAKU,KAAKM,GAGZ,IAAKP,EAAI,EAAGA,EAAIR,EAAQQ,IACtB,IAAKD,EAAI,EAAGA,EAAIL,EAAOK,IACjBR,EAAKS,GAAGD,IACNR,EAAKS,EAAI,IAAMT,EAAKS,EAAI,GAAGD,KAE7BR,EAAKS,GAAGD,GAAKR,EAAKS,GAAGD,GAAK,GAExBR,EAAKS,GAAGD,EAAI,KAEdR,EAAKS,GAAGD,GAAKR,EAAKS,GAAGD,GAAK,GA7FG,IAgG7BR,EAAKS,GAAGD,IACRR,EAAKS,EAAI,GAAGD,EAAI,KAEhBR,EAAKS,GAAGD,GAlGiB,IAqGjB,IAANC,IACFT,EAAKS,GAAGD,GArGK,EAsGbT,EAAMW,KAAK,CAAEF,IAAGC,OAKxB,MAAO,CAAET,OAAMD,QAAOR,OAAQA,EAAOC,SA2BvC,IAAM+B,EAAmB,SAAC,GAAsB,IAApB3B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxB2B,EAAoC3B,EAApC2B,SAAUC,EAA0B5B,EAA1B4B,OAAQxB,EAAkBJ,EAAlBI,OAAQE,EAAUN,EAAVM,MAC5BuB,EAAYC,iBAAO,MAkFzB,OAjFAC,qBAAU,WACR,IACMC,EADSH,EAAUI,QACNC,WAAW,MAC9BF,EAAIG,UAAY,QAChBH,EAAII,SAAS,EAAG,EAAG9B,EAAQqB,EAAUvB,EAASuB,GAEjC,OAAT5B,GAIJA,EAAKI,KAAKe,SAAQ,SAACC,EAAKkB,GACtBlB,EAAID,SAAQ,SAACT,EAAM6B,GACjB,IAAM3B,EAAI2B,EAAWX,EACff,EAAIyB,EAAWV,EACjBlB,GA5JC,GA4JeA,GAxJO,IA0JzBuB,EAAIG,UAAY,OA3C1B,YAAyE,IAApDH,EAAmD,EAAnDA,IAAKrB,EAA8C,EAA9CA,EAAGC,EAA2C,EAA3CA,EAAGN,EAAwC,EAAxCA,MAAOF,EAAiC,EAAjCA,OAAiC,IAAzBmC,SAAyB,MAArB,EAAqB,EAAlBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,GACtDC,EAAUH,GAAMD,EAChBK,EAAWH,GAAMF,EACjBM,EAHgE,EAANC,IAGvCP,EACnBQ,EAAcL,GAAMH,EAE1BP,EAAIgB,YACJhB,EAAIiB,OAAOtC,EAAIgC,EAAS/B,GACxBoB,EAAIkB,OAAOvC,EAAIL,EAAQsC,EAAUhC,GACjCoB,EAAImB,iBAAiBxC,EAAIL,EAAOM,EAAGD,EAAIL,EAAOM,EAAIgC,GAClDZ,EAAIkB,OAAOvC,EAAIL,EAAOM,EAAIR,EAAS2C,GACnCf,EAAImB,iBACFxC,EAAIL,EACJM,EAAIR,EACJO,EAAIL,EAAQyC,EACZnC,EAAIR,GAEN4B,EAAIkB,OAAOvC,EAAIkC,EAAYjC,EAAIR,GAC/B4B,EAAImB,iBAAiBxC,EAAGC,EAAIR,EAAQO,EAAGC,EAAIR,EAASyC,GACpDb,EAAIkB,OAAOvC,EAAGC,EAAI+B,GAClBX,EAAImB,iBAAiBxC,EAAGC,EAAGD,EAAIgC,EAAS/B,GACxCoB,EAAIoB,YAwBIC,CAAU,CACRrB,MACArB,EAAGA,EAAIiB,EACPhB,EAAGA,EAAIgB,EACPW,EAAGX,EACHxB,OAAQuB,EAAW,EAAIC,EACvBtB,MAAOqB,EAAW,EAAIC,IAExBI,EAAIsB,OAvKkB,IAyKpB7C,GAvK2B,IAwK3BA,GAvKuB,IAwKvBA,GAEAuB,EAAII,SACFzB,EAAIgB,EAAW,EAAIC,EACnBhB,EAAIgB,EACJ,EAAIA,EACJD,EAAW,EAAIC,GAhLA,IAoLjBnB,GAnL2B,IAoL3BA,GAnLuB,IAoLvBA,GAEAuB,EAAII,SACFzB,EAAIiB,EACJhB,EAAIe,EAAW,EAAIC,EACnBD,EAAW,EAAIC,EACf,EAAIA,GA1LiB,IA6LrBnB,GACFuB,EAAII,SACFzB,EAAIgB,EAAW,EAAIC,EACnBhB,EAAIe,EAAW,EAAIC,EACnB,EAAIA,EACJ,EAAIA,IAINnB,GArMW,IAsMbuB,EAAIuB,UAAY5B,EAAW,EAAIC,EAC/BI,EAAIwB,YAAc,OAClBxB,EAAIyB,QAAU,QACdzB,EAAIgB,YACJhB,EAAIiB,OAAOtC,EAAIgB,EAAW,EAAGf,EAAIe,EAAW,GA1M/B,IA2MTlB,GACFuB,EAAIkB,OAAOvC,EAAIgB,EAAW,EAAGJ,KAAKmC,IAAI9C,EAAIe,EAAW,EAAG,IA1M5C,IA4MVlB,GACFuB,EAAIkB,OAAOvC,EAAIgB,EAAW,EAAGf,EAAIe,EAAW,GA9M/B,IAgNXlB,GACFuB,EAAIkB,OAAOvC,EAAK,EAAIgB,EAAY,EAAGf,EAAIe,EAAW,GAEpDK,EAAI2B,mBAOV,yBACEC,MAAO,CACLC,UAAW,cACXzD,OAAQuB,EAAWvB,EACnBE,MAAOqB,EAAWrB,EAClBwD,OAAO,cACL/D,EAAKL,SAAWA,EAAOC,QACnB,cACAI,EAAKL,SAAWA,EAAOE,QACvB,QACA,SAIR,4BACEU,MAAOA,EAAQqB,EACfvB,OAAQA,EAASuB,EACjBoC,IAAKlC,MAMPmC,EAAuB,SAAC,GAAsB,IAApBjE,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpC,OACE,yBACE4D,MAAO,CACLK,QAAS,OACTC,cAAe,SACf9D,QAASJ,EAAOI,OAASJ,EAAO2B,SAAW,IAAM3B,EAAOmE,KAAO,GAC/D7D,OAAQN,EAAOM,MAAQN,EAAO2B,SAAW,IAAM3B,EAAOoE,KAAO,KAG9DrE,EAAKsE,KAAI,SAAClD,EAAKP,GAAN,OACR,yBAAKgD,MAAO,CAAEK,QAAS,OAAQC,cAAe,OAASI,IAAG,OAAS1D,GAChEO,EAAIkD,KAAI,SAAC5D,EAAME,GAAP,OACP,yBACEiD,MAAO,CACLxD,OAAQJ,EAAOI,OAASJ,EAAO2B,SAC/BrB,MAAON,EAAOM,MAAQN,EAAO2B,SAC7BC,OAAQ,IAGV,kBAAC,EAAD,CACE0C,IAAG,QAAU3D,EAAV,IAAeC,EAClBb,KAAMU,EACNT,OAAQA,cAwCxB,SAASuE,EAAT,GASI,IARFjE,EAQC,EARDA,MACAF,EAOC,EAPDA,OAGA+D,GAIC,EANDxC,SAMC,EALDC,OAKC,EAJDuC,MACAC,EAGC,EAHDA,KACAI,EAEC,EAFDA,KACAC,EACC,EADDA,MAEA,OAAO,EAAIC,MAAMP,GAAMQ,QAAQN,KAAI,SAAA9B,GAAC,OAClC,EAAImC,MAAMN,GAAMO,QAAQN,KAAI,SAAAO,GAAC,OAC3BvD,EAAS,CACPjB,SACAE,QACAgB,SAAUkD,EAAOI,EAAIH,UAMtB,IAAMI,EAAkB,WAC7B,OACE,oCACE,kBAAC,IAAD,CACEC,MAAM,EACNhF,WAAYkB,EACZ+D,QAASC,IACT3D,SAAUkD,EACVU,cAAe,CACb3E,MAAO,GACPF,OAAQ,GACRuB,SAAU,IACVC,OAAQ,EACRuC,KAAM,GACNC,KAAM,GACNI,KAAM,IACNC,MAAO,MAGT,kBAAC,EAAD,SC7VD,IAAMS,EAAe,CAC1B,MAAS,eAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,qCACA,YAAC,EAAD,CAAiBA,QAAQ,qBAK7BH,EAAWI,gBAAiB","file":"component---src-pages-examples-percolation-mdx-c69fc45ae3437965dfc6.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { Flex, Box } from 'rebass';\nimport { Model } from 'react-sim';\n\nconst EMPTY = 0;\nconst ROCK = 1;\nconst ROCK_WITH_ROCK_ON_RIGHT = 2;\nconst ROCK_WITH_ROCK_BELOW = 3;\nconst ROCK_WITH_ROCK_RIGHT_AND_BELOW = 4;\nconst ROCK_WITH_ROCKS_ALL_AROUND = 5;\nconst WATER_FROM_TOP = 6;\nconst WATER_FROM_RIGHT = 7;\nconst WATER_FROM_LEFT = 8;\n\nconst status = {\n  pending: 'PENDING',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n};\n\nfunction updateData({ data, params, complete }) {\n  const { queue, grid } = data;\n  const { height, width } = params;\n  let updatedStatus = data.status;\n  if (queue.length === 0) {\n    updatedStatus = status.failure;\n  }\n  const nextQueue = [];\n  while (queue.length > 0 && updatedStatus === status.pending) {\n    const cell = queue.shift();\n    const { x, y } = cell;\n    if (y === height - 1) {\n      updatedStatus = status.success;\n    } else if (grid[y + 1][x] === EMPTY) {\n      grid[y + 1][x] = WATER_FROM_TOP;\n      nextQueue.push({ x, y: y + 1 });\n    }\n    // note - grid[y][x - 1] and grid[y][x + 1] can be undefined,\n    // but that doesn't make any difference.\n    if (grid[y][x - 1] === EMPTY) {\n      grid[y][x - 1] = WATER_FROM_RIGHT;\n      nextQueue.push({ x: x - 1, y });\n    }\n    if (grid[y][x + 1] === EMPTY) {\n      grid[y][x + 1] = WATER_FROM_LEFT;\n      nextQueue.push({ x: x + 1, y });\n    }\n  }\n  if (updatedStatus !== status.PENDING && params.shouldComplete) {\n    complete(updatedStatus);\n  }\n  return {\n    grid,\n    queue: nextQueue,\n    status: updatedStatus,\n  };\n}\n\nfunction updateDataGrid({ data, params, complete }) {\n  let nbPending = 0;\n  data.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      if (cell.status === status.pending) {\n        const updatedCell = updateData({\n          data: cell,\n          params: { height: params.height, shouldComplete: false },\n        });\n        data[y][x] = updatedCell;\n        if (updatedCell.status === status.pending) {\n          nbPending++;\n        }\n      }\n    })\n  );\n  if (nbPending === 0) {\n    complete();\n  }\n  return data;\n}\n\nfunction initData({ porosity, height, width }) {\n  const grid = [];\n  const queue = [];\n  let x, y;\n  for (y = 0; y < height; y++) {\n    const row = [];\n    for (x = 0; x < width; x++) {\n      row.push(Math.random() < Number(porosity) ? ROCK : EMPTY);\n    }\n    grid.push(row);\n  }\n\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      if (grid[y][x]) {\n        if (grid[y + 1] && grid[y + 1][x]) {\n          // rock below\n          grid[y][x] = grid[y][x] + 2;\n        }\n        if (grid[y][x + 1]) {\n          // rock to the right\n          grid[y][x] = grid[y][x] + 1;\n        }\n        if (\n          grid[y][x] === ROCK_WITH_ROCK_RIGHT_AND_BELOW &&\n          grid[y + 1][x + 1]\n        ) {\n          grid[y][x] = ROCK_WITH_ROCKS_ALL_AROUND;\n        }\n      } else {\n        if (y === 0) {\n          grid[y][x] = WATER_FROM_TOP;\n          queue.push({ x, y });\n        }\n      }\n    }\n  }\n  return { grid, queue, status: status.pending };\n}\n\nfunction roundRect({ ctx, x, y, width, height, r = 1, tl, tr, br, bl }) {\n  const topLeft = tl || r;\n  const topRight = tr || r;\n  const bottomLeft = bl || r;\n  const bottomRight = br || r;\n\n  ctx.beginPath();\n  ctx.moveTo(x + topLeft, y);\n  ctx.lineTo(x + width - topRight, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n  ctx.lineTo(x + width, y + height - bottomRight);\n  ctx.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - bottomRight,\n    y + height\n  );\n  ctx.lineTo(x + bottomLeft, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n  ctx.lineTo(x, y + topLeft);\n  ctx.quadraticCurveTo(x, y, x + topLeft, y);\n  ctx.closePath();\n}\n\nconst PercolationFrame = ({ data, params }) => {\n  const { cellSize, margin, height, width } = params;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'beige';\n    ctx.fillRect(0, 0, width * cellSize, height * cellSize);\n\n    if (data === null) {\n      return;\n    }\n\n    data.grid.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        const x = colIndex * cellSize;\n        const y = rowIndex * cellSize;\n        if (cell >= ROCK && cell <= ROCK_WITH_ROCKS_ALL_AROUND) {\n          // rock\n          ctx.fillStyle = '#777';\n\n          roundRect({\n            ctx,\n            x: x + margin,\n            y: y + margin,\n            r: margin,\n            height: cellSize - 2 * margin,\n            width: cellSize - 2 * margin,\n          });\n          ctx.fill();\n          if (\n            cell === ROCK_WITH_ROCK_ON_RIGHT ||\n            cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n            cell === ROCK_WITH_ROCKS_ALL_AROUND\n          ) {\n            ctx.fillRect(\n              x + cellSize - 2 * margin,\n              y + margin,\n              4 * margin,\n              cellSize - 2 * margin\n            );\n          }\n          if (\n            cell === ROCK_WITH_ROCK_BELOW ||\n            cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n            cell === ROCK_WITH_ROCKS_ALL_AROUND\n          ) {\n            ctx.fillRect(\n              x + margin,\n              y + cellSize - 2 * margin,\n              cellSize - 2 * margin,\n              4 * margin\n            );\n          }\n          if (cell === ROCK_WITH_ROCKS_ALL_AROUND) {\n            ctx.fillRect(\n              x + cellSize - 2 * margin,\n              y + cellSize - 2 * margin,\n              4 * margin,\n              4 * margin\n            );\n          }\n        }\n        if (cell >= WATER_FROM_TOP) {\n          ctx.lineWidth = cellSize - 2 * margin;\n          ctx.strokeStyle = 'cyan';\n          ctx.lineCap = 'round';\n          ctx.beginPath();\n          ctx.moveTo(x + cellSize / 2, y + cellSize / 2);\n          if (cell === WATER_FROM_TOP) {\n            ctx.lineTo(x + cellSize / 2, Math.max(y - cellSize / 2, 0));\n          }\n          if (cell === WATER_FROM_LEFT) {\n            ctx.lineTo(x - cellSize / 2, y + cellSize / 2);\n          }\n          if (cell === WATER_FROM_RIGHT) {\n            ctx.lineTo(x + (3 * cellSize) / 2, y + cellSize / 2);\n          }\n          ctx.stroke();\n        }\n      });\n    });\n  });\n\n  return (\n    <div\n      style={{\n        boxSizing: 'content-box',\n        height: cellSize * height,\n        width: cellSize * width,\n        border: `3px solid ${\n          data.status === status.pending\n            ? 'transparent'\n            : data.status === status.success\n            ? 'green'\n            : 'red'\n        }`,\n      }}\n    >\n      <canvas\n        width={width * cellSize}\n        height={height * cellSize}\n        ref={canvasRef}\n      />\n    </div>\n  );\n};\n\nconst PercolationFrameGrid = ({ data, params }) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: (params.height * params.cellSize + 10) * params.rows + 20,\n        width: (params.width * params.cellSize + 10) * params.cols + 20,\n      }}\n    >\n      {data.map((row, y) => (\n        <div style={{ display: 'flex', flexDirection: 'row' }} key={`row-${y}`}>\n          {row.map((cell, x) => (\n            <div\n              style={{\n                height: params.height * params.cellSize,\n                width: params.width * params.cellSize,\n                margin: 5,\n              }}\n            >\n              <PercolationFrame\n                key={`cell-${x}-${y}`}\n                data={cell}\n                params={params}\n              />\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport const Percolation = () => {\n  return (\n    <>\n      <Model\n        auto={false}\n        controls={{\n          param: 'porosity',\n          label: 'Porosity',\n          minValue: 0,\n          maxValue: 1,\n          step: 0.01,\n        }}\n        updateData={updateData}\n        maxTime={Infinity}\n        initData={initData}\n        initialParams={{\n          width: 100,\n          height: 100,\n          cellSize: 5,\n          margin: 0,\n          porosity: 0.4,\n          shouldComplete: true,\n        }}\n      >\n        <PercolationFrame />\n      </Model>\n    </>\n  );\n};\n\nfunction initDataGrid({\n  width,\n  height,\n  cellSize,\n  margin,\n  rows,\n  cols,\n  minP,\n  stepP,\n}) {\n  return [...Array(rows).keys()].map(r =>\n    [...Array(cols).keys()].map(c =>\n      initData({\n        height,\n        width,\n        porosity: minP + c * stepP,\n      })\n    )\n  );\n}\n\nexport const PercolationGrid = () => {\n  return (\n    <>\n      <Model\n        auto={false}\n        updateData={updateDataGrid}\n        maxTime={Infinity}\n        initData={initDataGrid}\n        initialParams={{\n          width: 20,\n          height: 20,\n          cellSize: 1.5,\n          margin: 0,\n          rows: 10,\n          cols: 10,\n          minP: 0.35,\n          stepP: 0.02,\n        }}\n      >\n        <PercolationFrameGrid />\n      </Model>\n    </>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { Percolation, PercolationGrid } from '../../components/examples/percolation';\nexport const _frontmatter = {\n  \"Title\": \"Percolation\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Percolation`}</h1>\n    <PercolationGrid mdxType=\"PercolationGrid\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}