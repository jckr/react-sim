{"version":3,"sources":["webpack:///./src/pages/home.js","webpack:///./src/components/examples/game-of-life.js"],"names":["reactsim","split","map","row","Number","initData","height","width","grid","Array","fill","r","d","Math","random","y","floor","length","x","forEach","rowIndex","c","colIndex","HomePage","start","updateData","updateGameOfLifeGrid","maxTime","Infinity","initialParams","to","countNeighbors","n","xOffset","yOffset","x1","y1","data","complete","changes","updatedGrid","cell","neighbors","updateGridNoComplete","initGrid","density","GameOfLifeFrame","render","this","props","accessor","size","index","key","styles","overflow","alignItems","justifyContent","style","background","borderRadius","React","Component","defaultProps","Frame","display","flexDirection","Step2","Step3","Step4","Step5","controls","param","resetOnChange","maxValue","step","label","showTimeSlider","GameOfLife","auto","delay"],"mappings":"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","file":"component---src-pages-home-js-2adde2054d298b10dc87.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { Model } from 'react-sim';\n\nimport {\n  GameOfLifeFrame,\n  updateGameOfLifeGrid,\n} from '../components/examples/game-of-life';\n\nconst reactsim = `0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000\n0011110011111001110001110011111000000111001110100000100\n0010001010000010001010001000100000001000100100110001100\n0010001010000010001010001000100000001000100100101010100\n0010001010000010001010000000100000001000000100100100100\n0011110011110010001010000000100011100111000100100000100\n0010001010000011111010000000100000000000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001011111010001001110000100000000111001110100000100\n0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000`\n  .split('\\n')\n  .map(row => row.split('').map(Number));\n\nfunction initData({ height, width }) {\n  const grid = Array(height)\n    .fill(0)\n    .map(r =>\n      Array(width)\n        .fill(0)\n        .map(d => (Math.random() > 0.8 ? 1 : 0))\n    );\n  const y = Math.floor((height - reactsim.length) / 2);\n  const x = Math.floor((width - reactsim[0].length) / 2);\n  reactsim.forEach((r, rowIndex) =>\n    r.forEach((c, colIndex) => {\n      if (grid[y + rowIndex]) {\n        grid[y + rowIndex][x + colIndex] = c;\n      }\n    })\n  );\n  return grid;\n}\n\nconst HomePage = () => {\n  return (\n    <div>\n      <Model\n        start={false}\n        updateData={updateGameOfLifeGrid}\n        maxTime={Infinity}\n        initData={initData}\n        initialParams={{\n          height: 60,\n          width: 80,\n        }}\n      >\n        <GameOfLifeFrame />\n      </Model>\n\n      <Link to=\"/about\">Get Started</Link>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { FlexRow, FlexColumn, Model } from 'react-sim';\n\n// helpers\n\nfunction countNeighbors(x, y, grid) {\n  const height = grid.length;\n  if (!height) {\n    return 0;\n  }\n  const width = grid[0].length;\n\n  let n = 0;\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n      const x1 = x + xOffset;\n      const y1 = y + yOffset;\n      if (\n        x1 < width &&\n        x1 > 0 &&\n        y1 < height &&\n        y1 > 0 &&\n        (x1 !== x || y1 !== y)\n      ) {\n        n += grid[y1][x1];\n      }\n    }\n  }\n  return n;\n}\n\nexport function updateGameOfLifeGrid({ data, complete }) {\n  let changes = 0;\n  const updatedGrid = data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        changes++;\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        changes++;\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n  if (changes === 0) {\n    complete();\n  }\n  return updatedGrid;\n}\n\nexport function updateGridNoComplete({ data }) {\n  return data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n}\n\nfunction initGrid({ height, width, density }) {\n  return Array(height)\n    .fill(0)\n    .map(row =>\n      Array(width)\n        .fill(0)\n        .map(() => Number(Math.random() < density))\n    );\n}\n\nexport class GameOfLifeFrame extends React.Component {\n  static defaultProps = {\n    size: 12,\n    accessor: d => d,\n  };\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const { accessor, data, size } = this.props;\n    return (\n      <div>\n        {data.map((row, index) => (\n          <FlexRow key={`r-${index}`} styles={{ height: size }}>\n            {row.map((cell, index) => (\n              <FlexColumn\n                key={`c-${index}`}\n                styles={{\n                  width: size,\n                  overflow: 'hidden',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  // border: \"1px solid black\"\n                }}\n              >\n                <div\n                  style={{\n                    background: '#000',\n                    borderRadius: accessor(cell) ? 0 : '50%',\n                    width: accessor(cell) ? '100%' : 0,\n                    height: accessor(cell) ? '100%' : 0,\n                    // transition: \"all 0.1s\"\n                  }}\n                ></div>\n              </FlexColumn>\n            ))}\n          </FlexRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst Frame = ({ data, size = 12, initData }) => {\n  if (data === null) {\n    return null;\n  }\n  return (\n    <div>\n      {data.map((row, index) => (\n        <div\n          key={`r-${index}`}\n          style={{ display: 'flex', flexDirection: 'row', height: size }}\n        >\n          {row.map((cell, index) => (\n            <div\n              key={`c-${index}`}\n              style={{\n                width: size,\n                background: cell ? '#000' : 'none',\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst GameOfLife = () => (\n  <Model\n    auto={false}\n    controls={{\n      param: 'density',\n      maxValue: 1,\n      step: 0.01,\n      resetOnChange: true,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    updateData={updateGameOfLifeGrid}\n    delay={100}\n    initData={initGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step2 = () => (\n  <Model\n    initData={initGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step3 = () => (\n  <Model\n    initData={initGrid}\n    updateData={updateGridNoComplete}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step4 = () => (\n  <Model\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step5 = () => (\n  <Model\n    controls={{\n      param: 'density',\n      resetOnChange: true,\n      maxValue: 1,\n      step: 0.01,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport default GameOfLife;\n"],"sourceRoot":""}