(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{IQ7j:function(t,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return i})),n.d(e,"default",(function(){return l}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var o=n("7ljp"),a=n("tBDR");var i={Title:"Controls"},r={_frontmatter:i};function l(t){var e=t.components,n=function(t,e){if(null==t)return{};var n,o,a={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,["components"]);return Object(o.b)("wrapper",Object.assign({},r,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"controls"},"Controls"),Object(o.b)("p",null,"Controls is how a user can interact with the simulation:"),Object(o.b)(a.a,{name:"modelControls",mdxType:"Image"}),Object(o.b)("p",null,"React-Sim provides 2 ways to build that interface."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'A "fast" one, by passing certain props to a ',Object(o.b)("inlineCode",{parentName:"li"},"<Model />")," component. You have access to building blocks to create a controls UI, styled sensibly, with minimal effort."),Object(o.b)("li",{parentName:"ul"},'a "custom" one, using a wrapper. You bring in the component you want, styled the way you want, wrap it in ',Object(o.b)("inlineCode",{parentName:"li"},"withControls")," and it will have the methods and information needed to interact with the simulation.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TL;DR"),": by default, your ",Object(o.b)("inlineCode",{parentName:"p"},"Model")," will come with a ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"/react-sim/controls/default-timer"}),"default timer")," control that lets user start, stop, reset and go step by step in a simulation. That default timer stops at 100 ticks."))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-controls-mdx-ded5a978b359262c26c0.js.map