{"version":3,"sources":["webpack:///./src/components/examples/dice.js","webpack:///./src/pages/examples/dice.mdx"],"names":["updateDice","data","tick","nbDice","params","lastTickWithoutData","i","lastTotals","length","totals","total","rolls","push","Math","ceil","random","updatedTotals","initDice","Die","value","dotStyle","background","width","height","borderRadius","position","top","bottom","right","left","mid","style","marginRight","border","Bar","label","max","nbRolls","nbValues","theme","color","colors","primary","styles","justifyContent","alignItems","backgroundColor","fontSize","min","DiceFrame","render","this","props","minValue","Number","lastDataPoint","bars","Array","fill","map","d","index","key","bar","React","Component","Dice","useThemeUI","auto","controls","param","maxValue","resetOnChange","updateData","maxTime","initData","initialParams","_frontmatter","layoutProps","MDXContent","components","mdxType","isMDXComponent"],"mappings":"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","file":"component---src-pages-examples-dice-mdx-ab1b6361b45183bcdab9.js","sourcesContent":["import React from 'react';\nimport {\n  Play,\n  FlexRow,\n  FlexColumn,\n  Model,\n} from 'react-sim';\nimport { useThemeUI } from 'theme-ui';\n// helpers\n\nconst roll = () => Math.ceil(Math.random() * 6);\n\nexport function updateDice({ data, tick, params: { nbDice } }) {\n  // if the user went back in time, we don't update the dataset\n  if (data[tick]) {\n    return data;\n  }\n\n  // else, we add new data points.\n\n  // in the standard case, the user just went forward by one tick.\n  // but if they went forward by many, we'll have to add that many\n  // datapoints.\n\n  let lastTickWithoutData = tick;\n  while (lastTickWithoutData > 0 && !data[lastTickWithoutData]) {\n    lastTickWithoutData--;\n  }\n\n  for (let i = lastTickWithoutData; i < tick; i++) {\n    const lastTotals = data[data.length - 1].totals;\n\n    // we roll the dice...\n    let total = 0;\n    const rolls = [];\n    for (let i = 0; i < nbDice; i++) {\n      rolls.push(roll());\n      total += rolls[i];\n    }\n\n    // and update the totals\n    const updatedTotals = {\n      ...lastTotals,\n      [total]: (lastTotals[total] || 0) + 1,\n    };\n\n    // then we append our data point to data\n    data.push({ rolls, totals: updatedTotals });\n  }\n\n  // and return it to update the property.\n  return data;\n}\n\nfunction initDice() {\n  return [\n    {\n      rolls: [],\n      totals: {},\n    },\n  ];\n}\n\nconst Die = ({ value }) => {\n  const dotStyle = {\n    background: '#000',\n    width: 3,\n    height: 3,\n    borderRadius: '100%',\n    position: 'absolute',\n  };\n  const top = { top: 3 };\n  const bottom = { bottom: 3 };\n  const right = { right: 3 };\n  const left = { left: 3 };\n  const mid = { top: 8 };\n  const center = { left: 8 };\n  return (\n    <div\n      style={{\n        width: 21,\n        height: 21,\n        marginRight: 10,\n        position: 'relative',\n        border: '1px solid #000',\n        borderRadius: '3px',\n      }}\n    >\n      {value !== 1 && <div style={{ ...dotStyle, ...top, ...left }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...top, ...right }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...left }} />}\n      {value % 2 === 1 && <div style={{ ...dotStyle, ...mid, ...center }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...right }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...bottom, ...left }} />}\n      {value !== 1 && <div style={{ ...dotStyle, ...bottom, ...right }} />}\n    </div>\n  );\n};\n\nconst Bar = ({ label, max, nbRolls, nbValues, theme }) => {\n  const height = max ? (50 * nbRolls) / max : 0;\n  const width = 500 / nbValues;\n  const color = theme?.colors?.primary || '#33f';\n\n  return (\n    <FlexColumn>\n      <FlexRow\n        styles={{\n          justifyContent: 'center',\n          alignItems: 'flex-end',\n          width,\n          height: 50,\n        }}\n      >\n        <div style={{ width: width * 0.8, height, backgroundColor: color }} />\n      </FlexRow>\n      <FlexRow\n        styles={{\n          justifyContent: 'center',\n          fontSize: Math.min((500 / 2) * nbValues, 12),\n        }}\n      >\n        {label}\n      </FlexRow>\n    </FlexColumn>\n  );\n};\n\nexport class DiceFrame extends React.Component {\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const {\n      data,\n      tick,\n      params: { nbDice },\n      theme,\n    } = this.props;\n\n    const minValue = Number(nbDice);\n    const maxValue = minValue * 6;\n    const nbValues = maxValue - minValue + 1;\n\n    const lastDataPoint = data[tick] || { rolls: [], totals: {} };\n\n    const { rolls, totals } = lastDataPoint;\n    let max = 0;\n    const bars = Array(nbValues)\n      .fill(0)\n      .map((d, i) => {\n        const label = minValue + i;\n        const nbRolls = totals[label] || 0;\n        max = Math.max(max, nbRolls);\n        return { label, nbRolls };\n      });\n\n    return (\n        <FlexColumn\n          styles={{ justifyContent: 'space-between', height: '140px' }}\n        >\n          <FlexRow>\n            {rolls.map((value, index) => (\n              <Die value={value} key={`k-${index}`} />\n            ))}\n          </FlexRow>\n          <FlexRow styles={{ alignItems: 'flex-end', height: '80px' }}>\n            {bars.map(bar => (\n              <Bar\n                {...bar}\n                key={bar.label}\n                max={max}\n                nbValues={nbValues}\n                theme={theme}\n              />\n            ))}\n          </FlexRow>\n        </FlexColumn>\n    );\n  }\n}\n\nconst Dice = () => {\n  const context = useThemeUI();\n  const { theme } = context;\n  return (\n    <>\n      <Model\n        theme={theme}\n        auto={false}\n        controls={{\n          param: 'nbDice',\n          minValue: 1,\n          maxValue: 6,\n          resetOnChange: true,\n          label: 'Number of dice per roll',\n        }}\n        updateData={updateDice}\n        maxTime={1000}\n        initData={initDice}\n        initialParams={{\n          nbDice: 5,\n        }}\n      >\n        <DiceFrame theme={theme} />\n      </Model>\n    </>\n  );\n};\n\nexport default Dice;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Dice from '../../components/examples/dice';\nexport const _frontmatter = {\n  \"Title\": \"Dice\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Dice`}</h1>\n    <Dice mdxType=\"Dice\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}