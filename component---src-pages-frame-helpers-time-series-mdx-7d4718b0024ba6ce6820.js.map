{"version":3,"sources":["webpack:///./src/components/examples/dice.js","webpack:///./src/components/examples/frame-helpers-examples.js","webpack:///./src/pages/frame-helpers/time-series.mdx"],"names":["updateDice","data","tick","nbDice","params","lastTotals","totals","total","rolls","i","push","Math","ceil","random","updatedTotals","average","initDice","Die","value","dotStyle","background","width","height","borderRadius","position","top","bottom","right","left","mid","style","marginRight","border","Bar","label","max","nbRolls","nbValues","theme","color","colors","primary","styles","justifyContent","alignItems","backgroundColor","fontSize","min","DiceFrame","render","this","props","minValue","Number","bars","Array","fill","map","d","index","key","bar","React","Component","Dice","useThemeUI","auto","controls","param","maxValue","resetOnChange","updateData","maxTime","initData","initialParams","Model","sx","p","initDataCF","balls","speed","x","y","c","floor","vx","vy","updateDataGF","ball","draw","ctx","cachedData","circle","clearRect","age","globalAlpha","r","forEach","fillStyle","CanvasFrameExample","HOCDieFrame","withFrame","flexDirection","series","accessor","toFixed","stackedSeries","keys","slice","dots","String","TimeSeriesExample","fontWeight","stacked","_frontmatter","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-frame-helpers-time-series-mdx-7d4718b0024ba6ce6820.js","sourcesContent":["import React from 'react';\nimport { Play, FlexRow, FlexColumn, Model } from 'react-sim';\nimport { useThemeUI } from 'theme-ui';\n// helpers\n\nconst roll = () => Math.ceil(Math.random() * 6);\n\nexport function updateDice({ data, tick, params: { nbDice } }) {\n  const lastTotals = data.totals;\n\n  // we roll the dice...\n  let total = 0;\n  const rolls = [];\n  for (let i = 0; i < nbDice; i++) {\n    rolls.push(roll());\n    total += rolls[i];\n  }\n\n  // and update the totals\n  const updatedTotals = {\n    ...lastTotals,\n    [total]: (lastTotals[total] || 0) + 1,\n  };\n\n  const average = (data.average * (tick - 1) + data.total) / tick;\n\n  return { rolls, average, total, totals: updatedTotals };\n}\n\nexport function initDice({ nbDice }) {\n  return {\n    rolls: [],\n    average: 3.5 * nbDice,\n    total: 0,\n    totals: {},\n  };\n}\n\nexport const Die = ({ value }) => {\n  const dotStyle = {\n    background: '#000',\n    width: 3,\n    height: 3,\n    borderRadius: '100%',\n    position: 'absolute',\n  };\n  const top = { top: 3 };\n  const bottom = { bottom: 3 };\n  const right = { right: 3 };\n  const left = { left: 3 };\n  const mid = { top: 8 };\n  const center = { left: 8 };\n  return (\n    <div\n      style={{\n        width: 21,\n        height: 21,\n        marginRight: 10,\n        position: 'relative',\n        border: '1px solid #000',\n        borderRadius: '3px',\n      }}\n    >\n      {value !== 1 && <div style={{ ...dotStyle, ...top, ...left }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...top, ...right }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...left }} />}\n      {value % 2 === 1 && <div style={{ ...dotStyle, ...mid, ...center }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...right }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...bottom, ...left }} />}\n      {value !== 1 && <div style={{ ...dotStyle, ...bottom, ...right }} />}\n    </div>\n  );\n};\n\nconst Bar = ({ label, max, nbRolls, nbValues, theme }) => {\n  const height = max ? (50 * nbRolls) / max : 0;\n  const width = 500 / nbValues;\n  const color = theme?.colors?.primary || '#33f';\n\n  return (\n    <FlexColumn>\n      <FlexRow\n        styles={{\n          justifyContent: 'center',\n          alignItems: 'flex-end',\n          width,\n          height: 50,\n        }}\n      >\n        <div style={{ width: width * 0.8, height, backgroundColor: color }} />\n      </FlexRow>\n      <FlexRow\n        styles={{\n          justifyContent: 'center',\n          fontSize: Math.min((500 / 2) * nbValues, 12),\n        }}\n      >\n        {label}\n      </FlexRow>\n    </FlexColumn>\n  );\n};\n\nexport class DiceFrame extends React.Component {\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const {\n      data,\n      tick,\n      params: { nbDice },\n      theme,\n    } = this.props;\n\n    const minValue = Number(nbDice);\n    const maxValue = minValue * 6;\n    const nbValues = maxValue - minValue + 1;\n\n    const { rolls, totals } = data;\n    let max = 0;\n    const bars = Array(nbValues)\n      .fill(0)\n      .map((d, i) => {\n        const label = minValue + i;\n        const nbRolls = totals[label] || 0;\n        max = Math.max(max, nbRolls);\n        return { label, nbRolls };\n      });\n\n    return (\n      <FlexColumn styles={{ justifyContent: 'space-between', height: '140px' }}>\n        <FlexRow>\n          {rolls.map((value, index) => (\n            <Die value={value} key={`k-${index}`} />\n          ))}\n        </FlexRow>\n        <FlexRow styles={{ alignItems: 'flex-end', height: '80px' }}>\n          {bars.map(bar => (\n            <Bar\n              {...bar}\n              key={bar.label}\n              max={max}\n              nbValues={nbValues}\n              theme={theme}\n            />\n          ))}\n        </FlexRow>\n      </FlexColumn>\n    );\n  }\n}\n\nconst Dice = () => {\n  const context = useThemeUI();\n  const { theme } = context;\n  return (\n    <>\n      <Model\n        theme={theme}\n        auto={false}\n        controls={{\n          param: 'nbDice',\n          minValue: 1,\n          maxValue: 6,\n          resetOnChange: true,\n          label: 'Number of dice per roll',\n        }}\n        updateData={updateDice}\n        maxTime={1000}\n        initData={initDice}\n        initialParams={{\n          nbDice: 5,\n        }}\n      >\n        <DiceFrame theme={theme} />\n      </Model>\n    </>\n  );\n};\n\nexport default Dice;\n","import React from 'react';\nimport {\n  Model as RawModel,\n  CanvasFrame,\n  Grid,\n  TimeSeries,\n  Counter,\n  Indicator,\n  withFrame,\n} from 'react-sim';\nimport { Flex, Text } from 'rebass';\n\nimport { initDice, updateDice, Die } from './dice';\n\nconst Model = props => (\n  <Flex sx={{ border: '1px solid currentcolor', p: 2, width: 'fit-content' }}>\n    <RawModel {...props} />\n  </Flex>\n);\n\nconst initDataCF = ({ height, width, balls, speed }) =>\n  Array(balls)\n    .fill(0)\n    .map(d => ({\n      x: Math.random() * width,\n      y: Math.random() * height,\n      c: `hsl(${Math.floor(Math.random() * 360)},85%,57%)`,\n\n      vx: (Math.random() - 0.5) * speed,\n      vy: (Math.random() - 0.5) * speed,\n    }));\n\nconst updateDataGF = ({ data, params }) =>\n  data.map(({ x, y, ...ball }) => ({\n    x: (x + ball.vx) % params.width,\n    y: (y + ball.vy) % params.height,\n    ...ball,\n  }));\n\nconst draw = ({ ctx, cachedData, data, circle, params, tick }) => {\n  const { height, width } = params;\n  ctx.clearRect(0, 0, width, height);\n\n  for (let i = Math.max(tick - 10, 0); i < tick; i++) {\n    const age = tick - i;\n    ctx.globalAlpha = 0.1 + (10 - age) * 0.05;\n    const r = 0.3 * (10 - age);\n    cachedData[i].forEach(d => {\n      ctx.fillStyle = d.c;\n      circle({ x: d.x, y: d.y, r });\n      ctx.fill();\n    });\n  }\n  ctx.globalAlpha = 1;\n  data.forEach(d => {\n    ctx.fillStyle = d.c;\n    circle({ x: d.x, y: d.y, r: 3 });\n    ctx.fill();\n  });\n};\n\nexport const CanvasFrameExample = () => (\n  <Model\n    initData={initDataCF}\n    updateData={updateDataGF}\n    maxTime={500}\n    initialParams={{\n      height: 200,\n      width: 500,\n      balls: 200,\n      speed: 3,\n    }}\n  >\n    <CanvasFrame draw={draw} />\n  </Model>\n);\n\nconst DieFrame = ({ data }) => {\n  return (\n    <Flex flexDirection=\"row\" sx={{ height: '30px' }}>\n      {data.rolls.map((value, index) => (\n        <Die value={value} key={`k-${index}`} />\n      ))}\n    </Flex>\n  );\n};\n\nconst HOCDieFrame = withFrame(DieFrame);\n\nconst average = {\n  color: '#33e',\n  label: 'Average',\n  accessor: d => Number(d.average.toFixed(2)),\n};\n\nconst series = [\n  average,\n  {\n    color: '#e3e',\n    label: 'Last roll',\n    accessor: d => d.total,\n  },\n];\n\nconst stackedSeries = [...Array(13).keys()].slice(2).map(dots => ({\n  color: `hsl(${(360 * (1 + dots - 2)) / 11},85%,57%)`,\n  label: String(dots),\n  accessor: d => d.totals[dots] || 0,\n}));\n\nexport const TimeSeriesExample = () => (\n  <Model\n    initData={initDice}\n    updateData={updateDice}\n    initialParams={{ nbDice: 2 }}\n  >\n    <Flex flexDirection=\"column\">\n      <Text sx={{ fontSize: 1, fontWeight: 'bold' }}>Roll:</Text>\n      <HOCDieFrame />\n      <Text sx={{ fontSize: 1, fontWeight: 'bold' }}>Average rolls:</Text>\n      <TimeSeries series={series} />\n      <Counter series={series} />\n      <Text sx={{ fontSize: 1, fontWeight: 'bold' }}>Roll distribution:</Text>\n      <TimeSeries series={stackedSeries} stacked />\n      <Counter series={stackedSeries.slice(0,6)} />\n      <Counter series={stackedSeries.slice(6)} />\n    </Flex>\n  </Model>\n);\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { TimeSeriesExample } from '../../components/examples/frame-helpers-examples.js';\nexport const _frontmatter = {\n  \"Title\": \"Time Series, Counter, Indicator\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p><inlineCode parentName=\"p\">{`Time Series`}</inlineCode>{` is a `}<a parentName=\"p\" {...{\n        \"href\": \"./frame-helpers\"\n      }}>{`frame helper`}</a>{` with which you can plot some changes in your data object during your simulation.`}</p>\n    <TimeSeriesExample mdxType=\"TimeSeriesExample\" />\n    <p>{`In this example, we are throwing 2 dice 100 times, and we are plotting the average value of the roll during the process.\nWe are also looking at the distribution of the rolls.`}</p>\n    <h1>{`Series parameter`}</h1>\n    <p><inlineCode parentName=\"p\">{`TimeSeries`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Counter`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Indicator`}</inlineCode>{` all rely on a parameter called `}<inlineCode parentName=\"p\">{`series`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`TimeSeries`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Counter`}</inlineCode>{` can take either an array of series or a single series, `}<inlineCode parentName=\"p\">{`Indicator`}</inlineCode>{` only takes a single series.`}</p>\n    <p><inlineCode parentName=\"p\">{`series`}</inlineCode>{` is an object with three properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`label`}</inlineCode>{` (string): describes the series,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`color`}</inlineCode>{` (string): color of the series,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`accessor`}</inlineCode>{` (function): function that turns a data object into the value that you want to plot.`}</li>\n    </ul>\n    <p>{`In `}<inlineCode parentName=\"p\">{`TimeSeries`}</inlineCode>{`, the accessor function is going to be called on every item in `}<inlineCode parentName=\"p\">{`cachedData`}</inlineCode>{` and the result will be plotted.\nIn `}<inlineCode parentName=\"p\">{`Counter`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Indicator`}</inlineCode>{`, the accessor function will be called on `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` and a single number will be shown per series.`}</p>\n    <p><inlineCode parentName=\"p\">{`TimeSeries`}</inlineCode>{` takes these other parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stacked`}</inlineCode>{` (boolean, default to false) - if true, represents the time series as full-height, stacked area charts. If false, the series are line charts.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`height`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` (numbers) - dimensions of the chart.`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`Counter`}</inlineCode>{` also takes:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`height`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`width`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`padding`}</inlineCode>{` (numbers) - dimensions of the indicators card.`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`Counter`}</inlineCode>{` is really a collection of `}<inlineCode parentName=\"p\">{`Indicator`}</inlineCode>{` components. The `}<inlineCode parentName=\"p\">{`Indicator`}</inlineCode>{` component is also available individually.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}