{"version":3,"sources":["webpack:///./src/components/examples/1d-automata.js","webpack:///./src/pages/examples/1d-automata.mdx"],"names":["params","rule","cols","rows","initData","data","Array","fill","Math","floor","length","updateData","map","cell","i","left","mid","right","Frame","withFrame","cachedData","tick","nbRows","min","style","overflow","position","height","width","direction","sx","top","keys","rowIndex","ts","key","x","size","color","Square","bg","m","border","BitControl","withControls","bit","setParams","increment","set","flexDirection","onClick","alignItems","mr","Automata","initialParams","controls","param","maxValue","label","justifyContent","my","_frontmatter","layoutProps","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"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","file":"component---src-pages-examples-1-d-automata-mdx-979ce0f6961589a17166.js","sourcesContent":["import React from 'react';\nimport { withControls, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nimport { Flex, Box } from 'rebass';\n\nexport const params = {\n  rule: 110,\n  cols: 50,\n  rows: 24,\n};\nexport const initData = ({ cols }) => {\n  const data = Array(cols).fill(0);\n  data[Math.floor(data.length / 2)] = 1;\n  return data;\n};\nexport const updateData = ({ data, cols, params }) => {\n  const { rule } = params;\n  return data.map((cell, i) => {\n    const left = data[i - 1];\n    const mid = data[i];\n    const right = data[i + 1];\n\n    const bit = (left ? 4 : 0) + (mid ? 2 : 0) + (right ? 1 : 0);\n    const output = rule & (1 << bit);\n    // console.log(left, mid, right, bit, output})\n    return output;\n  });\n};\n\nexport const FrameComponent = ({ data, cachedData, tick, params }) => {\n  const { rows, cols } = params;\n  const nbRows = Math.min(tick, params.rows);\n  return (\n    <div\n      style={{\n        overflow: 'hidden',\n        position: 'relative',\n        height: rows * 12,\n        width: cols * 12,\n      }}\n    >\n      <Flex direction=\"column\" sx={{ position: 'absolute', top: 0 }}>\n        {[...Array(nbRows).keys()].map(rowIndex => {\n          const ts = tick - nbRows + rowIndex;\n          return (\n            <Flex\n              direction=\"row\"\n              key={`row-${ts}`}\n              sx={{ position: 'absolute', top: 12 * rowIndex }}\n            >\n              {cachedData[ts].map((cell, x) => (\n                <Square\n                  size={10}\n                  color={cell ? '#000' : 'none'}\n                  key={`cell-${x}`}\n                />\n              ))}\n            </Flex>\n          );\n        })}\n      </Flex>\n    </div>\n  );\n};\nconst Frame = withFrame(FrameComponent);\n\nconst Square = ({ color, size = 12 }) => (\n  <Box\n    sx={{\n      height: `${size}px`,\n      width: `${size}px`,\n      bg: color,\n      m: '1px',\n      border: '2px solid #000',\n    }}\n  />\n);\n\nconst BitControlComponent = ({ bit, params, setParams }) => {\n  const { rule } = params;\n  const increment = 1 << bit;\n  const set = increment & rule;\n  const left = 4 & bit;\n  const mid = 2 & bit;\n  const right = 1 & bit;\n  const action = () => {\n    const updatedRule = set ? rule - increment : rule + increment;\n    setParams({ rule: updatedRule });\n  };\n  return (\n    <Flex\n      flexDirection=\"column\"\n      onClick={action}\n      alignItems=\"center\"\n      sx={{ mr: 2 }}\n    >\n      <Flex flexDirection=\"row\">\n        <Square color={left ? '#000' : 'none'} />\n        <Square color={mid ? '#000' : 'none'} />\n        <Square color={right ? '#000' : 'none'} />\n      </Flex>\n      <Square color={set ? '#000' : 'none'} />\n    </Flex>\n  );\n};\n\nconst BitControl = withControls(BitControlComponent);\n\nconst Automata = () => (\n  <Model\n    initialParams={params}\n    initData={initData}\n    updateData={updateData}\n    controls={{ param: 'rule', maxValue: 255, label: 'Rule' }}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[0, 1, 2, 3, 4, 5, 6, 7].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>\n    </Flex>\n  </Model>\n);\n\nexport default Automata;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Automata from '../../components/examples/1d-automata';\nexport const _frontmatter = {\n  \"Title\": \"1D automata\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"1d-automata\"\n    }}>{`1D Automata`}</h1>\n    <Automata mdxType=\"Automata\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}