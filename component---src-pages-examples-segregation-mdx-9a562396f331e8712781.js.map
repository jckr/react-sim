{"version":3,"sources":["webpack:///./src/components/examples/framed-model.js","webpack:///./src/components/examples/segregation.js","webpack:///./src/pages/examples/segregation.mdx"],"names":["FullWidthModel","props","sx","border","my","p","FitContentModel","width","initData","params","random","Math","cols","rows","proportion","tolerance","grid","Array","fill","map","row","col","community","forEach","y","citizen","x","isHappy","happy","reduce","totalHappiness","rowHappiness","cell","countHappiness","happiness","totalMoves","potentialNeighbors","height","length","onYBorder","getPotentialNeighbors","neighborsOfSameCommunity","offset","neighborX","neighborY","isInBounds","countNeighbors","updateData","data","complete","threshold","movers","updatedTotalMoves","updatedGrid","JSON","parse","stringify","prevX","prevY","push","firstUnhappyCitizen","shift","randomUnhappyCitizenNumber","floor","secondUnhappyCitizen","temp","slice","concat","draw","ctx","circle","showmoves","sy","size","min","clearRect","strokeStyle","lineWidth","globalAlpha","r","c","fillStyle","stroke","fillRect","strokeRect","undefined","x0","x1","y0","y1","moveTo","lineTo","Frame","series","label","accessor","d","counterSeries","Number","toFixed","Segregation","initialParams","maxTime","delay","controls","param","type","flexDirection","_frontmatter","layoutProps","MDXContent","components","mdxType","isMDXComponent"],"mappings":"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","file":"component---src-pages-examples-segregation-mdx-9a562396f331e8712781.js","sourcesContent":["import React from 'react';\nimport { Model } from 'react-sim';\nimport { Flex } from 'rebass';\n\nexport const FullWidthModel = props => (\n  <Flex sx={{ border: '1px solid currentcolor', my: 2, p: 2 }}>\n    <Model {...props} />\n  </Flex>\n);\n\nexport const FitContentModel = props => (\n  <Flex\n    sx={{ border: '1px solid currentcolor', my: 2, p: 2, width: 'fit-content' }}\n  >\n    <Model {...props} />\n  </Flex>\n);\n","import React from 'react';\nimport { CanvasFrame, Counter, TimeSeries } from 'react-sim';\nimport { Flex } from 'rebass';\n\nimport { FitContentModel as Model } from './framed-model';\n\n\nexport const initData = (params, random = Math.random) => {\n  const { cols, rows, proportion, tolerance } = params;\n  const grid = Array(rows)\n    .fill(0)\n    .map(row =>\n      Array(cols)\n        .fill(0)\n        .map(col => ({ community: 100 * random() > proportion ? 1 : 0 }))\n    );\n  grid.forEach((row, y) =>\n    row.forEach((citizen, x) => {\n      citizen.isHappy = isHappy(grid, x, y, tolerance);\n    })\n  );\n  const happy = countHappiness(grid, tolerance);\n  const happiness = happy / (cols * rows);\n  return { grid, happy, happiness, totalMoves: 0 };\n};\n\nexport function countNeighbors(grid, x, y) {\n  const { community } = grid[y][x];\n  return [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ].reduce((neighborsOfSameCommunity, offset) => {\n    const neighborX = x + offset[0];\n    const neighborY = y + offset[1];\n    if (isInBounds(grid, neighborX, neighborY)) {\n      const neighbor = grid[neighborY][neighborX];\n      if (neighbor.community === community) {\n        neighborsOfSameCommunity = neighborsOfSameCommunity + 1;\n      }\n    }\n    return neighborsOfSameCommunity;\n  }, 0);\n}\n\nexport function isInBounds(grid, x, y) {\n  if (!grid) {\n    return false;\n  }\n  const height = grid.length;\n  if (y < 0 || y >= height) {\n    return false;\n  }\n  const width = grid[0].length;\n  if (x < 0 || x >= width) {\n    return false;\n  }\n  return true;\n}\n\nexport function getPotentialNeighbors(grid, x, y) {\n  const height = grid.length;\n  const width = grid[0].length;\n  const onXBorder = x === 0 || x === width - 1;\n  const onYBorder = y === 0 || y === height - 1;\n\n  return onXBorder ? (onYBorder ? 3 : 5) : onYBorder ? 5 : 8;\n}\n\nexport function isHappy(grid, x, y, tolerance) {\n  const potentialNeighbors = getPotentialNeighbors(grid, x, y);\n  const differentNeighbors = potentialNeighbors - countNeighbors(grid, x, y);\n  return differentNeighbors / potentialNeighbors < tolerance / 100;\n}\n\nexport function countHappiness(grid, tolerance) {\n  return grid.reduce(\n    (totalHappiness, row, y) =>\n      row.reduce((rowHappiness, cell, x) => {\n        return rowHappiness + isHappy(grid, x, y, tolerance);\n      }, totalHappiness),\n    0\n  );\n}\n\nexport const updateData = (\n  { data, params, complete },\n  random = Math.random\n) => {\n  const { cols, rows, threshold, tolerance } = params;\n  let movers = [];\n  let happy = 0;\n  let updatedTotalMoves = data.totalMoves;\n  let updatedGrid = JSON.parse(JSON.stringify(data.grid));\n  updatedGrid.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      cell.prevX = x;\n      cell.prevY = y;\n      if (isHappy(updatedGrid, x, y, tolerance)) {\n        happy = happy + 1;\n        cell.isHappy = 1;\n      } else {\n        cell.isHappy = 0;\n        movers.push([x, y]);\n      }\n    })\n  );\n  if (happy > (cols * rows * threshold) / 100) {\n    complete();\n  }\n  // we only swap citizens if there are more than 2 willing to swap\n  while (movers.length > 1) {\n    // first to move is head of the queue\n    const firstUnhappyCitizen = movers.shift();\n    // second to move is randomly chosen in the queue\n    const randomUnhappyCitizenNumber = Math.floor(random() * movers.length);\n\n    const secondUnhappyCitizen = movers[randomUnhappyCitizenNumber];\n\n    // we swap them in grid\n\n    const temp = {\n      ...updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]],\n    };\n    updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]] = {\n      ...updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]],\n    };\n    updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]] = temp;\n\n    updatedTotalMoves = updatedTotalMoves + 2;\n\n    // we remove the second citizen from movers\n\n    movers = movers\n      .slice(0, randomUnhappyCitizenNumber)\n      .concat(movers.slice(randomUnhappyCitizenNumber + 1));\n  }\n  return {\n    grid: updatedGrid,\n    totalMoves: updatedTotalMoves,\n    happy,\n    happiness: happy / (cols * rows),\n  };\n};\nexport const draw = ({ ctx, data, params, circle }) => {\n  const { height, width, rows, cols, showmoves } = params;\n  const sx = height / rows;\n  const sy = width / cols;\n  const size = 0.8 * Math.min(sx, sy);\n  ctx.clearRect(0, 0, width, height);\n  ctx.strokeStyle = '#000';\n  ctx.lineWidth = 2;\n  ctx.globalAlpha = 1;\n  data.grid.forEach((row, r) =>\n    row.forEach((citizen, c) => {\n      if (citizen.community === 0) {\n        ctx.fillStyle = '#33e';\n        circle({ x: (c + 0.5) * sx, y: (r + 0.5) * sy, r: size / 2 });\n        if (citizen.isHappy) {\n          ctx.fill();\n        } else {\n          ctx.stroke();\n        }\n      } else {\n        ctx.fillStyle = '#a0c';\n        const x = (c + 0.5) * sx - size / 2;\n        const y = (r + 0.5) * sy - size / 2;\n        if (citizen.isHappy) {\n          ctx.fillRect(x, y, size, size);\n        } else {\n          ctx.strokeRect(x, y, size, size);\n        }\n      }\n    })\n  );\n  if (showmoves) {\n    ctx.strokeStyle = '#222';\n    ctx.fillStyle = '#222';\n    ctx.globalAlpha = 0.5;\n    ctx.lineWidth = 1;\n    data.grid.forEach((row, r) => {\n      row.forEach((citizen, c) => {\n        if (citizen.prevX !== undefined) {\n          const { prevX, prevY } = citizen;\n          if (prevX !== c || prevY !== r) {\n            // citizen has moved\n\n            const x0 = sx * (prevX + 0.5);\n            const x1 = sx * (c + 0.5);\n\n            const y0 = sy * (prevY + 0.5);\n            const y1 = sy * (r + 0.5);\n\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            circle({ x: x0, y: y0, r: size / 4 });\n            ctx.fill();\n            circle({ x: x1, y: y1, r: size / 4 });\n            ctx.fill();\n          }\n        }\n      });\n    });\n  }\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst series = {\n  label: 'Happiness',\n  accessor: d => d.happy,\n};\n\nconst counterSeries = [\n  {\n    label: 'Happiness',\n    accessor: d => `${Math.floor(1000 * Number(d.happiness.toFixed(3))) / 10}%`,\n  },\n  { label: 'Total moves', accessor: d => d.totalMoves },\n];\n\nexport const params = {\n  cols: 30,\n  rows: 30,\n  height: 480,\n  width: 480,\n  tolerance: 60,\n  proportion: 50,\n  showmoves: true,\n  threshold: 99,\n};\n\nconst Segregation = () => (\n  <Model\n    initialParams={params}\n    initData={initData}\n    updateData={updateData}\n    maxTime={50}\n    delay={100}\n    controls={[\n      { param: 'tolerance', label: 'Tolerance' },\n      { param: 'proportion', label: 'Proportion' },\n      { param: 'threshold', label: 'Proportion' },\n      { param: 'showmoves', label: 'Show moves', type: 'toggle' },\n    ]}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <TimeSeries series={series} />\n      <Counter series={counterSeries} />\n    </Flex>\n  </Model>\n);\n\nexport default Segregation;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Segregation from '../../components/examples/segregation';\nexport const _frontmatter = {\n  \"Title\": \"Segregation\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"segregation\"\n    }}>{`Segregation`}</h1>\n    <Segregation mdxType=\"Segregation\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}