{"version":3,"sources":["webpack:///./src/components/examples/dice.js","webpack:///./src/components/examples/percolation.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js","webpack:///./src/components/examples/boids.js","webpack:///./src/components/examples/segregation.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.repeat.js","webpack:///./src/components/examples/1d-automata.js","webpack:///./src/pages/fullsize.js","webpack:///./src/components/examples/chaos-game.js","webpack:///./src/components/examples/simple-model.js","webpack:///./src/components/examples/game-of-life.js","webpack:///./src/components/examples/activators.js","webpack:///./src/components/examples/epidemic.js","webpack:///./src/components/examples/framed-model.js","webpack:///./src/components/examples/fibonacci.js"],"names":["roll","random","Math","ceil","updateDice","data","tick","nbDice","params","lastTotals","totals","total","rolls","i","push","updatedTotals","average","initDice","Die","value","dotStyle","background","width","height","borderRadius","position","top","bottom","right","left","mid","style","marginRight","border","Bar","label","max","nbRolls","nbValues","theme","color","colors","primary","flexDirection","sx","justifyContent","alignItems","backgroundColor","fontSize","min","DiceFrame","render","this","props","minValue","Number","bars","Array","fill","map","d","index","key","bar","React","Component","Dice","useThemeUI","auto","controls","param","maxValue","resetOnChange","updateData","maxTime","initData","initialParams","status","complete","queue","grid","updatedStatus","length","nextQueue","cell","shift","x","y","shouldComplete","updateDataGrid","nbPending","grids","forEach","row","updatedCell","cols","result","porosity","draw","ctx","cellSize","margin","roundRectangle","fillStyle","fillRect","rowIndex","colIndex","r","lineWidth","strokeStyle","lineCap","beginPath","moveTo","lineTo","stroke","PercolationFrame","boxSizing","PercolationFrameGrid","ch","cw","display","rows","c","textAlign","fontWeight","p","toFixed","Percolation","step","Infinity","initDataGrid","minP","stepP","ck","keys","PercolationGrid","$export","abs","S","hypot","value1","value2","arg","div","sum","aLen","arguments","larg","sqrt","alignmentCoefficient","alignmentDistance","cohesionCoefficient","cohesionDistance","maxforce","maxspeed","nbBoids","separationCoefficient","separationDistance","showCircles","normalize","v","l","mult","k","add","v0","v1","sub","limit","force","limitedForce","angle","PI","velocity","cos","sin","acceleration","separation","alignment","cohesion","boid","countSeparation","countAlignment","countCohesion","j","otherBoid","positionDifference","distanceBetweenBoids","diff","seek","atan2","target","desired","steer","circle","globalAlpha","closePath","Frame","Boids","nocache","type","ChillBoids","isPlaying","noControls","proportion","tolerance","col","community","citizen","isHappy","happy","reduce","totalHappiness","rowHappiness","countHappiness","happiness","totalMoves","potentialNeighbors","onYBorder","getPotentialNeighbors","neighborsOfSameCommunity","offset","neighborX","neighborY","isInBounds","countNeighbors","threshold","movers","updatedTotalMoves","updatedGrid","JSON","parse","stringify","prevX","prevY","firstUnhappyCitizen","randomUnhappyCitizenNumber","floor","secondUnhappyCitizen","temp","slice","concat","showmoves","sy","size","clearRect","strokeRect","undefined","x0","x1","y0","y1","series","accessor","counterSeries","Segregation","extraParams","delay","P","repeat","rule","firstLine","withFrame","cachedData","nbRows","overflow","direction","ts","Square","bg","m","BitControl","withControls","bit","setParams","increment","set","onClick","mr","cursor","Automata","options","vertical","my","extraProps","fmOverrides","onAnimate","console","log","Page","location","search","hideSeries","ticksPerAnimation","updateAttractors","angleOffset","nbAttractors","center","radius","init","attractors","o","points","prevDirection","rules","split","prev","curr","lastPoint","attractor","newPoint","globalCompositeOperation","point","BasicChaosGame","loop","Controls","nbToggles","toggle","a","flex","checked","charAt","setValue","updatedRules","toggles","ChaosGame","SimpleModel","stale","n","xOffset","yOffset","updateGameOfLifeGrid","changes","neighbors","updateGridNoComplete","initGrid","density","Step2","Step3","Step4","Step5","showTimeSlider","GameOfLife","getTotalValue","listOfCells","update","w","innerNeighbors","outerNeighbors","mutation","innerRadius","outerRadius","cells","dist","ActivatorFrame","Activators","COLORS","sick","recovered","healthy","dead","updateEpidemic","updatedData","agents","nbSick","nbHealthy","nbDead","nbRecovered","contaminationRisk","deathRisk","recoveryTicks","agent","recovery","otherAgent","dx","dy","distance","ax","ay","vx","vy","chooseMamongN","N","results","Set","Object","findOverlaps","filter","nbAgents","maxSpeed","nbDistancing","distancing","has","isDistancing","speed","isBouncing","EpidemicFrame","myRef","createRef","componentDidUpdate","current","getContext","arc","ref","ConnectedFrame","Epidemic","stacked","FramedModel","phi","D","0","1","2","3","lastNumber","side","FibonacciSpiralFrame","FibonacciSpiral","NumberFrame","flexWrap","FibonacciNumbers"],"mappings":"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","file":"component---src-pages-fullsize-js-6d296d762982e4f0d125.js","sourcesContent":["import React from 'react';\nimport { useThemeUI } from 'theme-ui';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\n// helpers\n\nconst roll = random => Math.ceil(random() * 6);\n\nexport function updateDice(\n  { data, tick, params: { nbDice } },\n  random = Math.random\n) {\n  const lastTotals = data.totals;\n\n  // we roll the dice...\n  let total = 0;\n  const rolls = [];\n  for (let i = 0; i < nbDice; i++) {\n    rolls.push(roll(random));\n    total += rolls[i];\n  }\n\n  // and update the totals\n  const updatedTotals = {\n    ...lastTotals,\n    [total]: (lastTotals[total] || 0) + 1,\n  };\n\n  const average = (data.average * (tick - 1) + data.total) / tick;\n\n  return { rolls, average, total, totals: updatedTotals };\n}\n\nexport function initDice({ nbDice }) {\n  return {\n    rolls: [],\n    average: 3.5 * nbDice,\n    total: 0,\n    totals: {},\n  };\n}\n\nexport const Die = ({ value }) => {\n  const dotStyle = {\n    background: '#000',\n    width: 3,\n    height: 3,\n    borderRadius: '100%',\n    position: 'absolute',\n  };\n  const top = { top: 3 };\n  const bottom = { bottom: 3 };\n  const right = { right: 3 };\n  const left = { left: 3 };\n  const mid = { top: 8 };\n  const center = { left: 8 };\n  return (\n    <div\n      style={{\n        width: 21,\n        height: 21,\n        marginRight: 10,\n        position: 'relative',\n        border: '1px solid #000',\n        borderRadius: '3px',\n      }}\n    >\n      {value !== 1 && <div style={{ ...dotStyle, ...top, ...left }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...top, ...right }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...left }} />}\n      {value % 2 === 1 && <div style={{ ...dotStyle, ...mid, ...center }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...right }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...bottom, ...left }} />}\n      {value !== 1 && <div style={{ ...dotStyle, ...bottom, ...right }} />}\n    </div>\n  );\n};\n\nconst Bar = ({ label, max, nbRolls, nbValues, theme }) => {\n  const height = max ? (50 * nbRolls) / max : 0;\n  const width = 350 / nbValues;\n  const color = theme?.colors?.primary || '#33f';\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex\n        flexDirection=\"row\"\n        sx={{\n          justifyContent: 'center',\n          alignItems: 'flex-end',\n          width,\n          height: '50px',\n        }}\n      >\n        <div style={{ width: width * 0.8, height, backgroundColor: color }} />\n      </Flex>\n      <Flex\n        flexDirection=\"row\"\n        sx={{\n          justifyContent: 'center',\n          fontSize: `${Math.min(350 / (1.5 * nbValues), 12)}px`,\n        }}\n      >\n        {label}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport class DiceFrame extends React.Component {\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const {\n      data,\n      params: { nbDice },\n      theme,\n    } = this.props;\n\n    const minValue = Number(nbDice);\n    const maxValue = minValue * 6;\n    const nbValues = maxValue - minValue + 1;\n\n    const { rolls, totals } = data;\n    let max = 0;\n    const bars = Array(nbValues)\n      .fill(0)\n      .map((d, i) => {\n        const label = minValue + i;\n        const nbRolls = totals[label] || 0;\n        max = Math.max(max, nbRolls);\n        return { label, nbRolls };\n      });\n\n    return (\n      <Flex\n        flexDirection=\"column\"\n        sx={{ justifyContent: 'space-between', height: '140px' }}\n      >\n        <Flex flexDirection=\"row\">\n          {rolls.map((value, index) => (\n            <Die value={value} key={`k-${index}`} />\n          ))}\n        </Flex>\n        <Flex\n          flexDirection=\"row\"\n          sx={{ alignItems: 'flex-end', height: '80px' }}\n        >\n          {bars.map(bar => (\n            <Bar\n              {...bar}\n              key={bar.label}\n              max={max}\n              nbValues={nbValues}\n              theme={theme}\n            />\n          ))}\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nconst Dice = props => {\n  const context = useThemeUI();\n  const { theme } = context;\n  return (\n    <>\n      <Model\n        theme={theme}\n        auto={false}\n        controls={{\n          param: 'nbDice',\n          minValue: 1,\n          maxValue: 6,\n          resetOnChange: true,\n          label: 'Number of dice per roll',\n        }}\n        updateData={updateDice}\n        maxTime={1000}\n        initData={initDice}\n        initialParams={{\n          nbDice: 5,\n        }}\n        {...props}\n      >\n        <DiceFrame theme={theme} />\n      </Model>\n    </>\n  );\n};\n\nexport default Dice;\n","import React from 'react';\nimport { Flex, Box } from 'rebass';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst EMPTY = 0;\nconst ROCK = 1;\nconst ROCK_WITH_ROCK_ON_RIGHT = 2;\nconst ROCK_WITH_ROCK_BELOW = 3;\nconst ROCK_WITH_ROCK_RIGHT_AND_BELOW = 4;\nconst ROCK_WITH_ROCKS_ALL_AROUND = 5;\nconst WATER_FROM_TOP = 6;\nconst WATER_FROM_RIGHT = 7;\nconst WATER_FROM_LEFT = 8;\n\nconst status = {\n  pending: 'PENDING',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n};\n\nexport function updateData({ data, params, complete }) {\n  const { queue, grid } = data;\n  const { height } = params;\n  let updatedStatus = data.status;\n  if (queue.length === 0) {\n    updatedStatus = status.failure;\n  }\n  const nextQueue = [];\n  while (queue.length > 0 && updatedStatus === status.pending) {\n    const cell = queue.shift();\n    const { x, y } = cell;\n    if (y === height - 1) {\n      updatedStatus = status.success;\n    } else if (grid[y + 1][x] === EMPTY) {\n      grid[y + 1][x] = WATER_FROM_TOP;\n      nextQueue.push({ x, y: y + 1 });\n    }\n    // note - grid[y][x - 1] and grid[y][x + 1] can be undefined,\n    // but that doesn't make any difference.\n    if (grid[y][x - 1] === EMPTY) {\n      grid[y][x - 1] = WATER_FROM_RIGHT;\n      nextQueue.push({ x: x - 1, y });\n    }\n    if (grid[y][x + 1] === EMPTY) {\n      grid[y][x + 1] = WATER_FROM_LEFT;\n      nextQueue.push({ x: x + 1, y });\n    }\n  }\n  if (updatedStatus !== status.pending && params.shouldComplete) {\n    complete(updatedStatus);\n  }\n  return {\n    grid,\n    queue: nextQueue,\n    status: updatedStatus,\n  };\n}\n\nexport function updateDataGrid({ data, params, complete }) {\n  let nbPending = 0;\n  data.grids.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      if (cell.status === status.pending) {\n        const updatedCell = updateData({\n          data: cell,\n          params: { height: params.height, shouldComplete: false },\n        });\n        data.grids[y][x] = updatedCell;\n        if (updatedCell.status === status.pending) {\n          nbPending++;\n        }\n        if (updatedCell.status === status.success) {\n          data.cols[x].result++;\n        }\n      }\n    })\n  );\n  if (nbPending === 0) {\n    complete();\n  }\n  return data;\n}\n\nexport function initData({ porosity, height, width }, random = Math.random) {\n  const grid = [];\n  const queue = [];\n  let x, y;\n  for (y = 0; y < height; y++) {\n    const row = [];\n    for (x = 0; x < width; x++) {\n      row.push(random() > Number(porosity) ? ROCK : EMPTY);\n    }\n    grid.push(row);\n  }\n\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      if (grid[y][x]) {\n        if (grid[y + 1] && grid[y + 1][x]) {\n          // rock below\n          grid[y][x] = grid[y][x] + 2;\n        }\n        if (grid[y][x + 1]) {\n          // rock to the right\n          grid[y][x] = grid[y][x] + 1;\n        }\n        if (\n          grid[y][x] === ROCK_WITH_ROCK_RIGHT_AND_BELOW &&\n          grid[y + 1][x + 1]\n        ) {\n          grid[y][x] = ROCK_WITH_ROCKS_ALL_AROUND;\n        }\n      } else {\n        if (y === 0) {\n          grid[y][x] = WATER_FROM_TOP;\n          queue.push({ x, y });\n        }\n      }\n    }\n  }\n  return { grid, queue, status: status.pending };\n}\n\nexport function draw({\n  ctx,\n  params: { cellSize, margin, height, width },\n  data,\n  roundRectangle,\n}) {\n  ctx.fillStyle = 'beige';\n  ctx.fillRect(0, 0, width * cellSize, height * cellSize);\n\n  data.grid.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const x = colIndex * cellSize;\n      const y = rowIndex * cellSize;\n      if (cell >= ROCK && cell <= ROCK_WITH_ROCKS_ALL_AROUND) {\n        // rock\n        ctx.fillStyle = '#777';\n\n        roundRectangle({\n          ctx,\n          x: x + margin,\n          y: y + margin,\n          r: margin,\n          height: cellSize - 2 * margin,\n          width: cellSize - 2 * margin,\n        });\n        ctx.fill();\n        if (\n          cell === ROCK_WITH_ROCK_ON_RIGHT ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + margin,\n            4 * margin,\n            cellSize - 2 * margin\n          );\n        }\n        if (\n          cell === ROCK_WITH_ROCK_BELOW ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + margin,\n            y + cellSize - 2 * margin,\n            cellSize - 2 * margin,\n            4 * margin\n          );\n        }\n        if (cell === ROCK_WITH_ROCKS_ALL_AROUND) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + cellSize - 2 * margin,\n            4 * margin,\n            4 * margin\n          );\n        }\n      }\n      if (cell >= WATER_FROM_TOP) {\n        ctx.lineWidth = cellSize - 2 * margin;\n        ctx.strokeStyle = 'cyan';\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(x + cellSize / 2, y + cellSize / 2);\n        if (cell === WATER_FROM_TOP) {\n          ctx.lineTo(x + cellSize / 2, Math.max(y - cellSize / 2, 0));\n        }\n        if (cell === WATER_FROM_LEFT) {\n          ctx.lineTo(x - cellSize / 2, y + cellSize / 2);\n        }\n        if (cell === WATER_FROM_RIGHT) {\n          ctx.lineTo(x + (3 * cellSize) / 2, y + cellSize / 2);\n        }\n        ctx.stroke();\n      }\n    });\n  });\n}\n\nexport const PercolationFrame = ({ data, params }) => {\n  const { cellSize, height, width } = params;\n\n  return (\n    <div\n      style={{\n        boxSizing: 'content-box',\n        height: cellSize * height,\n        width: cellSize * width,\n        border: `3px solid ${\n          data.status === status.pending\n            ? 'transparent'\n            : data.status === status.success\n            ? '#33e'\n            : '#777'\n        }`,\n      }}\n    >\n      <CanvasFrame\n        data={data}\n        width={width * cellSize}\n        height={height * cellSize}\n        draw={draw}\n      />\n    </div>\n  );\n};\n\nexport const PercolationFrameGrid = ({ data, params }) => {\n  const ch = params.height * params.cellSize;\n  const cw = params.width * params.cellSize;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        margin: '0 auto',\n        flexDirection: 'column',\n        height: (ch + 10) * params.rows + 60,\n        width: (cw + 10) * params.cols + 10,\n      }}\n    >\n      <Flex\n        flexDirection=\"row\"\n        sx={{ justifyContent: 'space-around', width: '100%' }}\n      >\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n              fontWeight: 2,\n            }}\n          >\n            {c.p.toFixed(2)}\n          </Box>\n        ))}\n      </Flex>\n      <Flex\n        sx={{\n          flexDirection: 'column',\n          justifyContent: 'space-around',\n          height: (ch + 10) * params.rows,\n        }}\n      >\n        {data.grids.map((row, y) => (\n          <Flex\n            sx={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n            }}\n            key={`row-${y}`}\n          >\n            {row.map((cell, x) => (\n              <Flex\n                sx={{\n                  height: params.height * params.cellSize,\n                  width: params.width * params.cellSize,\n                }}\n              >\n                <PercolationFrame\n                  key={`cell-${x}-${y}`}\n                  data={cell}\n                  params={params}\n                />\n              </Flex>\n            ))}\n          </Flex>\n        ))}\n      </Flex>\n\n      <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-around' }}>\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n            }}\n          >\n            {`${c.result}/${c.total}`}\n          </Box>\n        ))}\n      </Flex>\n    </div>\n  );\n};\n\nexport const Percolation = props => {\n  return (\n    <>\n      <Model\n        auto={false}\n        controls={{\n          param: 'porosity',\n          label: 'Porosity',\n          minValue: 0,\n          maxValue: 1,\n          step: 0.01,\n        }}\n        updateData={updateData}\n        maxTime={Infinity}\n        initData={initData}\n        initialParams={{\n          width: 66,\n          height: 66,\n          cellSize: 5,\n          margin: 0,\n          porosity: 0.6,\n          shouldComplete: true,\n        }}\n        {...props}\n      >\n        <PercolationFrame />\n      </Model>\n    </>\n  );\n};\n\nexport function initDataGrid(\n  { width, height, cellSize, margin, rows, cols, minP, stepP },\n  random = Math.random\n) {\n  const ck = [...Array(cols).keys()];\n  return {\n    cols: ck.map(c => ({ p: minP + c * stepP, result: 0, total: rows })),\n    grids: [...Array(rows).keys()].map(r =>\n      ck.map(c =>\n        initData(\n          {\n            height,\n            width,\n            porosity: minP + c * stepP,\n          },\n          random\n        )\n      )\n    ),\n  };\n}\n\nexport const PercolationGrid = props => {\n  return (\n    <>\n      <Model\n        auto={false}\n        updateData={updateDataGrid}\n        maxTime={Infinity}\n        initData={initDataGrid}\n        initialParams={{\n          width: 20,\n          height: 20,\n          cellSize: 1.5,\n          margin: 0,\n          rows: 10,\n          cols: 8,\n          minP: 0.54,\n          stepP: 0.02,\n        }}\n        {...props}\n      >\n        <PercolationFrameGrid />\n      </Model>\n    </>\n  );\n};\n\nexport default Percolation;\n","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const params = {\n  alignmentCoefficient: 1,\n  alignmentDistance: 50,\n  cohesionCoefficient: 1,\n  cohesionDistance: 40,\n  height: 332,\n  maxforce: 0.03,\n  maxspeed: 2,\n  nbBoids: 50,\n  r: 5,\n  separationCoefficient: 1.5,\n  separationDistance: 25,\n  showCircles: true,\n  width: 332,\n};\n\n// helpers\n\nexport const normalize = v => {\n  const l = Math.hypot(...v);\n  if (l === 0) {\n    return v;\n  }\n  return div(v, l);\n};\n\nexport const mult = (v, k) => v.map(d => d * k);\nexport const div = (v, k) => v.map(d => d / k);\n\nexport const add = (v0, v1) => v0.map((d, i) => d + v1[i]);\nexport const sub = (v0, v1) => v0.map((d, i) => d - v1[i]);\n\nexport const limit = (v, k) => {\n  const force = Math.hypot(...v);\n  const limitedForce = Math.min(force, k);\n  return div(v, force / limitedForce);\n};\n\nexport const initData = ({ height, nbBoids, width }, random = Math.random) => {\n  const boids = Array(nbBoids)\n    .fill(0)\n    .map(d => {\n      const angle = random() * 2 * Math.PI;\n      const velocity = [Math.cos(angle), Math.sin(angle)];\n      const boid = {\n        angle,\n        acceleration: [0, 0],\n        position: [random() * width, random() * height],\n        velocity,\n      };\n      return boid;\n    });\n  return boids;\n};\n\nexport const updateData = ({ data, params }) => {\n  const {\n    alignmentDistance,\n    cohesionDistance,\n    separationCoefficient,\n    alignmentCoefficient,\n    cohesionCoefficient,\n    separationDistance,\n    maxspeed,\n    maxforce,\n    r,\n    height,\n    width,\n  } = params;\n\n  const separation = data.map(d => [0, 0]);\n  const alignment = data.map(d => [0, 0]);\n  const cohesion = data.map(d => [0, 0]);\n\n  data.forEach((boid, i) => {\n    let countSeparation = 0;\n    let countAlignment = 0;\n    let countCohesion = 0;\n\n    for (let j = 0; j < data.length; j++) {\n      if (j !== i) {\n        const otherBoid = data[j];\n        const positionDifference = sub(boid.position, otherBoid.position);\n        const distanceBetweenBoids = Math.hypot(...positionDifference);\n\n        // separation\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < separationDistance\n        ) {\n          const diff = div(normalize(positionDifference), distanceBetweenBoids);\n          separation[i] = add(separation[i], diff);\n          countSeparation++;\n        }\n\n        // alignment\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < alignmentDistance\n        ) {\n          alignment[i] = add(alignment[i], otherBoid.velocity);\n          countAlignment++;\n        }\n\n        // cohesion\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < cohesionDistance\n        ) {\n          cohesion[i] = add(cohesion[i], otherBoid.position);\n          countCohesion++;\n        }\n      }\n    }\n\n    // separation\n\n    if (countSeparation > 0) {\n      separation[i] = div(separation[i], countSeparation);\n      separation[i] = normalize(separation[i]);\n      separation[i] = mult(separation[i], maxspeed);\n      separation[i] = sub(separation[i], boid.velocity);\n      separation[i] = limit(separation[i], maxforce);\n      separation[i] = mult(separation[i], separationCoefficient);\n    }\n\n    // alignment\n    if (countAlignment > 0) {\n      alignment[i] = div(alignment[i], countAlignment);\n      alignment[i] = normalize(alignment[i]);\n      alignment[i] = mult(alignment[i], maxspeed);\n      alignment[i] = sub(alignment[i], boid.velocity);\n      alignment[i] = limit(alignment[i], maxforce);\n      alignment[i] = mult(alignment[i], alignmentCoefficient);\n    }\n\n    // cohesion\n    if (countCohesion > 0) {\n      cohesion[i] = div(cohesion[i], countCohesion);\n      cohesion[i] = seek(\n        boid.position,\n        cohesion[i],\n        boid.velocity,\n        maxspeed,\n        maxforce\n      );\n      cohesion[i] = mult(cohesion[i], cohesionCoefficient);\n    }\n  });\n\n  return data.map((boid, i) => {\n    // applying all three forces\n    const acceleration = add(add(alignment[i], cohesion[i]), separation[i]);\n    const velocity = limit(add(boid.velocity, acceleration), maxspeed);\n    const position = add(boid.position, velocity);\n    const angle = Math.atan2(boid.velocity[1], boid.velocity[0]);\n    // wraparound\n\n    if (position[0] < -r) {\n      position[0] = width + r;\n    }\n    if (position[0] > width + r) {\n      position[0] = -r;\n    }\n    if (position[1] < -r) {\n      position[1] = height + r;\n    }\n    if (position[1] > height + r) {\n      position[1] = -r;\n    }\n    return {\n      ...boid,\n      angle,\n      position,\n      velocity,\n    };\n  });\n};\n\nexport const seek = (position, target, velocity, maxspeed, maxforce) => {\n  const desired = mult(normalize(sub(target, position)), maxspeed);\n  const steer = sub(desired, velocity);\n  return limit(steer, maxforce);\n};\n\nexport const draw = ({\n  ctx,\n  circle,\n  data,\n  params: {\n    alignmentDistance,\n    cohesionDistance,\n    separationDistance,\n    height,\n    showCircles,\n    width,\n    r,\n  },\n}) => {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, width, height);\n  data.forEach(({ position: [x, y], angle }) => {\n    ctx.strokeStyle = '#000';\n    ctx.globalAlpha = 1;\n    ctx.beginPath();\n    ctx.moveTo(x + Math.cos(angle) * r, y + Math.sin(angle) * r);\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 2) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 2) / 3) * r * 2) / 3\n    );\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 4) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 4) / 3) * r * 2) / 3\n    );\n    ctx.closePath();\n    ctx.stroke();\n    if (showCircles) {\n      ctx.globalAlpha = 0.2;\n      ctx.strokeStyle = '#f00';\n      circle({ x, y, r: separationDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#0f0';\n      circle({ x, y, r: alignmentDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#00f';\n      circle({ x, y, r: cohesionDistance });\n      ctx.closePath();\n      ctx.stroke();\n    }\n  });\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Boids = props => (\n  <Model\n    initialParams={params}\n    maxTime={Infinity}\n    nocache\n    initData={initData}\n    updateData={updateData}\n    controls={[\n      [\n        {\n          param: 'alignmentCoefficient',\n          label: 'Alignment',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'alignmentDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'cohesionCoefficient',\n          label: 'Cohesion',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'cohesionDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'separationCoefficient',\n          label: 'Separation',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'separationDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      {\n        param: 'showCircles',\n        label: 'Show circles:',\n        type: 'toggle',\n      },\n    ]}\n    {...props}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const ChillBoids = props => (\n  <Boids isPlaying noControls {...props} />\n);\nexport default Boids;\n","import React from 'react';\nimport { CanvasFrame, Counter, TimeSeries } from 'react-sim';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\nexport const initData = (params, random = Math.random) => {\n  const { cols, rows, proportion, tolerance } = params;\n  const grid = Array(rows)\n    .fill(0)\n    .map(row =>\n      Array(cols)\n        .fill(0)\n        .map(col => ({ community: 100 * random() > proportion ? 1 : 0 }))\n    );\n  grid.forEach((row, y) =>\n    row.forEach((citizen, x) => {\n      citizen.isHappy = isHappy(grid, x, y, tolerance);\n    })\n  );\n  const happy = countHappiness(grid, tolerance);\n  const happiness = happy / (cols * rows);\n  return { grid, happy, happiness, totalMoves: 0 };\n};\n\nexport function countNeighbors(grid, x, y) {\n  const { community } = grid[y][x];\n  return [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ].reduce((neighborsOfSameCommunity, offset) => {\n    const neighborX = x + offset[0];\n    const neighborY = y + offset[1];\n    if (isInBounds(grid, neighborX, neighborY)) {\n      const neighbor = grid[neighborY][neighborX];\n      if (neighbor.community === community) {\n        neighborsOfSameCommunity = neighborsOfSameCommunity + 1;\n      }\n    }\n    return neighborsOfSameCommunity;\n  }, 0);\n}\n\nexport function isInBounds(grid, x, y) {\n  if (!grid) {\n    return false;\n  }\n  const height = grid.length;\n  if (y < 0 || y >= height) {\n    return false;\n  }\n  const width = grid[0].length;\n  if (x < 0 || x >= width) {\n    return false;\n  }\n  return true;\n}\n\nexport function getPotentialNeighbors(grid, x, y) {\n  const height = grid.length;\n  const width = grid[0].length;\n  const onXBorder = x === 0 || x === width - 1;\n  const onYBorder = y === 0 || y === height - 1;\n\n  return onXBorder ? (onYBorder ? 3 : 5) : onYBorder ? 5 : 8;\n}\n\nexport function isHappy(grid, x, y, tolerance) {\n  const potentialNeighbors = getPotentialNeighbors(grid, x, y);\n  const differentNeighbors = potentialNeighbors - countNeighbors(grid, x, y);\n  return differentNeighbors / potentialNeighbors < tolerance / 100;\n}\n\nexport function countHappiness(grid, tolerance) {\n  return grid.reduce(\n    (totalHappiness, row, y) =>\n      row.reduce((rowHappiness, cell, x) => {\n        return rowHappiness + isHappy(grid, x, y, tolerance);\n      }, totalHappiness),\n    0\n  );\n}\n\nexport const updateData = (\n  { data, params, complete },\n  random = Math.random\n) => {\n  const { cols, rows, threshold, tolerance } = params;\n  let movers = [];\n  let happy = 0;\n  let updatedTotalMoves = data.totalMoves;\n  let updatedGrid = JSON.parse(JSON.stringify(data.grid));\n  updatedGrid.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      cell.prevX = x;\n      cell.prevY = y;\n      if (isHappy(updatedGrid, x, y, tolerance)) {\n        happy = happy + 1;\n        cell.isHappy = 1;\n      } else {\n        cell.isHappy = 0;\n        movers.push([x, y]);\n      }\n    })\n  );\n  if (happy > (cols * rows * threshold) / 100) {\n    complete();\n  }\n  // we only swap citizens if there are more than 2 willing to swap\n  while (movers.length > 1) {\n    // first to move is head of the queue\n    const firstUnhappyCitizen = movers.shift();\n    // second to move is randomly chosen in the queue\n    const randomUnhappyCitizenNumber = Math.floor(random() * movers.length);\n\n    const secondUnhappyCitizen = movers[randomUnhappyCitizenNumber];\n\n    // we swap them in grid\n\n    const temp = {\n      ...updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]],\n    };\n    updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]] = {\n      ...updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]],\n    };\n    updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]] = temp;\n\n    updatedTotalMoves = updatedTotalMoves + 2;\n\n    // we remove the second citizen from movers\n\n    movers = movers\n      .slice(0, randomUnhappyCitizenNumber)\n      .concat(movers.slice(randomUnhappyCitizenNumber + 1));\n  }\n  return {\n    grid: updatedGrid,\n    totalMoves: updatedTotalMoves,\n    happy,\n    happiness: happy / (cols * rows),\n  };\n};\nexport const draw = ({ ctx, data, params, circle }) => {\n  const { height, width, rows, cols, showmoves } = params;\n  const sx = height / rows;\n  const sy = width / cols;\n  const size = 0.8 * Math.min(sx, sy);\n  ctx.clearRect(0, 0, width, height);\n  ctx.strokeStyle = '#000';\n  ctx.lineWidth = 2;\n  ctx.globalAlpha = 1;\n  data.grid.forEach((row, r) =>\n    row.forEach((citizen, c) => {\n      if (citizen.community === 0) {\n        ctx.fillStyle = '#33e';\n        circle({ x: (c + 0.5) * sx, y: (r + 0.5) * sy, r: size / 2 });\n        if (citizen.isHappy) {\n          ctx.fill();\n        } else {\n          ctx.stroke();\n        }\n      } else {\n        ctx.fillStyle = '#a0c';\n        const x = (c + 0.5) * sx - size / 2;\n        const y = (r + 0.5) * sy - size / 2;\n        if (citizen.isHappy) {\n          ctx.fillRect(x, y, size, size);\n        } else {\n          ctx.strokeRect(x, y, size, size);\n        }\n      }\n    })\n  );\n  if (showmoves) {\n    ctx.strokeStyle = '#222';\n    ctx.fillStyle = '#222';\n    ctx.globalAlpha = 0.5;\n    ctx.lineWidth = 1;\n    data.grid.forEach((row, r) => {\n      row.forEach((citizen, c) => {\n        if (citizen.prevX !== undefined) {\n          const { prevX, prevY } = citizen;\n          if (prevX !== c || prevY !== r) {\n            // citizen has moved\n\n            const x0 = sx * (prevX + 0.5);\n            const x1 = sx * (c + 0.5);\n\n            const y0 = sy * (prevY + 0.5);\n            const y1 = sy * (r + 0.5);\n\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            circle({ x: x0, y: y0, r: size / 4 });\n            ctx.fill();\n            circle({ x: x1, y: y1, r: size / 4 });\n            ctx.fill();\n          }\n        }\n      });\n    });\n  }\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst series = {\n  label: 'Happiness',\n  accessor: d => d.happy,\n};\n\nconst counterSeries = [\n  {\n    label: 'Happiness',\n    accessor: d => `${Math.floor(1000 * Number(d.happiness.toFixed(3))) / 10}%`,\n  },\n  { label: 'Total moves', accessor: d => d.totalMoves },\n];\n\nexport const params = {\n  cols: 20,\n  rows: 20,\n  height: 330,\n  width: 330,\n  tolerance: 60,\n  proportion: 50,\n  showmoves: true,\n  threshold: 99,\n};\n\nconst Segregation = props => (\n  <Model\n    initialParams={{ ...params, ...props.extraParams }}\n    initData={initData}\n    updateData={updateData}\n    maxTime={50}\n    delay={100}\n    controls={[\n      { param: 'tolerance', label: 'Tolerance' },\n      { param: 'proportion', label: 'Proportion' },\n      { param: 'threshold', label: 'Threshold' },\n      { param: 'showmoves', label: 'Show moves', type: 'toggle' },\n    ]}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <TimeSeries series={series} />\n      <Counter series={counterSeries} />\n    </Flex>\n  </Model>\n);\n\nexport default Segregation;\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","import React from 'react';\nimport { withControls, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nimport { Flex, Box } from 'rebass';\n\nexport const params = {\n  rule: 110,\n  cols: 33,\n  rows: 24,\n  firstLine: 'blank',\n};\nexport const initData = ({ cols, firstLine }, random = Math.random) => {\n  const data = Array(cols).fill(0);\n\n  data[Math.floor(data.length / 2)] = 1;\n  if (firstLine === 'blank') {\n    return data;\n  }\n  if (firstLine === 'full') {\n    return data.map(d => 1);\n  }\n  return data.map(d => (random() > 0.5 ? 1 : 0));\n};\nexport const updateData = ({ data, cols, params }) => {\n  const { rule } = params;\n  return data.map((cell, i) => {\n    const left = data[i - 1];\n    const mid = data[i];\n    const right = data[i + 1];\n\n    const bit = (left ? 4 : 0) + (mid ? 2 : 0) + (right ? 1 : 0);\n    const output = rule & (1 << bit);\n    // console.log(left, mid, right, bit, output})\n    return output;\n  });\n};\n\nexport const FrameComponent = ({ data, cachedData, tick, params }) => {\n  const { rows, cols } = params;\n  const nbRows = Math.min(tick, params.rows);\n  return (\n    <div\n      style={{\n        overflow: 'hidden',\n        position: 'relative',\n        height: rows * 10,\n        width: cols * 10,\n        margin: '0 auto',\n      }}\n    >\n      <Flex direction=\"column\" sx={{ position: 'absolute', top: 0 }}>\n        {[...Array(nbRows).keys()].map(rowIndex => {\n          const ts = tick - nbRows + rowIndex;\n          return (\n            <Flex\n              direction=\"row\"\n              key={`row-${ts}`}\n              sx={{ position: 'absolute', top: 10 * rowIndex }}\n            >\n              {cachedData[ts].map((cell, x) => (\n                <Square\n                  size={8}\n                  color={cell ? '#000' : 'none'}\n                  key={`cell-${x}`}\n                />\n              ))}\n            </Flex>\n          );\n        })}\n      </Flex>\n    </div>\n  );\n};\nconst Frame = withFrame(FrameComponent);\n\nconst Square = ({ color, size = 12 }) => (\n  <Box\n    sx={{\n      height: `${size}px`,\n      width: `${size}px`,\n      bg: color,\n      m: '1px',\n      border: '2px solid #000',\n    }}\n  />\n);\n\nconst BitControlComponent = ({ bit, params, setParams }) => {\n  const { rule } = params;\n  const increment = 1 << bit;\n  const set = increment & rule;\n  const left = 4 & bit;\n  const mid = 2 & bit;\n  const right = 1 & bit;\n  const action = () => {\n    const updatedRule = set ? rule - increment : rule + increment;\n    setParams({ rule: updatedRule });\n  };\n  return (\n    <Flex\n      flexDirection=\"column\"\n      onClick={action}\n      alignItems=\"center\"\n      sx={{ mr: 2, cursor: 'pointer' }}\n    >\n      <Flex flexDirection=\"row\">\n        <Square color={left ? '#000' : 'none'} />\n        <Square color={mid ? '#000' : 'none'} />\n        <Square color={right ? '#000' : 'none'} />\n      </Flex>\n      <Square color={set ? '#000' : 'none'} />\n    </Flex>\n  );\n};\n\nconst BitControl = withControls(BitControlComponent);\n\nconst Automata = props => (\n  <Model\n    initialParams={params}\n    initData={initData}\n    updateData={updateData}\n    controls={\n      ({ param: 'rule', maxValue: 255, label: 'Rule' },\n      {\n        param: 'firstLine',\n        label: 'First line:',\n        type: 'radio',\n        options: ['blank', 'full', 'random'],\n        resetOnChange: true,\n        vertical: true,\n      })\n    }\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      {props.noControls ? null : <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[0, 1, 2, 3].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>}\n      {props.noControls ? null : <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[4, 5, 6, 7].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>}\n    </Flex>\n  </Model>\n);\n\nexport default Automata;\n","import React from 'react';\n\nimport Automata from '../components/examples/1d-automata';\nimport Activators from '../components/examples/activators';\nimport Boids from '../components/examples/boids';\nimport ChaosGame from '../components/examples/chaos-game';\nimport Dice from '../components/examples/dice';\nimport Epidemic from '../components/examples/epidemic';\nimport Fibonacci from '../components/examples/fibonacci';\nimport GameOfLife from '../components/examples/game-of-life';\nimport Maze from '../components/examples/mazes';\nimport Percolation from '../components/examples/percolation';\nimport Segregation from '../components/examples/segregation';\nimport SimpleModel from '../components/examples/simple-model';\n\nconst extraProps = {\n  delay: 500,\n  fmOverrides: {\n    sx: {\n      border: 'none',\n      my: 0,\n      p: 0,\n      width: '332px',\n    },\n  },\n  noControls: true,\n  isPlaying: true,\n  maxTime: 50,\n  onAnimate: ({ tick }) => console.log(tick),\n};\n\nconst Page = props => {\n  const example = props.location.search.slice(1);\n  switch (example) {\n    case 'activators':\n      return <Activators {...extraProps} maxTime={30} />;\n    case 'automata':\n      return (\n        <Automata\n          {...extraProps}\n          maxTime={65}\n          initialParams={{ rule: 110, cols: 33, rows: 33, firstLine: 'random' }}\n        />\n      );\n    case 'boids':\n      return <Boids {...extraProps} maxTime={200} />;\n    case 'chaos-game':\n      return <ChaosGame {...extraProps} maxTime={5000} />;\n    case 'dice':\n      return <Dice {...extraProps} />;\n    case 'epidemic':\n      return <Epidemic {...extraProps} hideSeries maxTime={100} />;\n    case 'fibonacci':\n      return <Fibonacci {...extraProps} maxTime={15} />;\n    case 'game-of-life':\n      return <GameOfLife {...extraProps} />;\n    case 'maze':\n      return (\n        <Maze\n          {...extraProps}\n          extraParams={{ grid: 'circle', ticksPerAnimation: 5 }}\n        />\n      );\n    case 'percolation':\n      return (\n        <Percolation\n          {...extraProps}\n          initialParams={{\n            width: 16,\n            height: 16,\n            cellSize: 20.75,\n            margin: 0,\n            porosity: 0.65,\n            shouldComplete: false,\n          }}\n        />\n      );\n    case 'segregation':\n      return <Segregation {...extraProps} extraParams={{ tolerance: 50 }} />;\n    case 'simple-model':\n      return <SimpleModel {...extraProps} maxTime={100} />;\n    default:\n      return <div>Usage: have an example name in the search query.</div>;\n  }\n};\n\nexport default Page;\n","import React from 'react';\nimport {\n  withControls,\n  Range,\n  Toggle,\n  CanvasFrame,\n} from 'react-sim';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\nexport const updateAttractors = ({ angleOffset, nbAttractors, height, width }) => {\n  const center = { x: width / 2, y: height / 2 };\n  const radius = (0.95 * Math.min(height, width)) / 2;\n  return [...Array(nbAttractors).keys()].map(i => {\n    const angle = angleOffset + (0.5 * (nbAttractors + 4 * i)) / nbAttractors;\n    return {\n      x: center.x + radius * Math.cos(angle * Math.PI),\n      y: center.y - radius * Math.sin(angle * Math.PI),\n    };\n  });\n};\n\nexport function init({ angle, nbAttractors, height, width }, random = Math.random) {\n  const angleOffset = angle === undefined ? random() * 2 * Math.PI : angle;\n  const attractors = updateAttractors({\n    angleOffset,\n    nbAttractors,\n    height,\n    width,\n  });\n  const o = {\n    x: random() * width,\n    y: random() * height,\n  };\n  const background = `hsla(${Math.floor(random() * 360)}, 30%, 7%, 1)`;\n  const color = `hsla(${Math.floor(random() * 360)}, 77%, 45%, 1)`;\n  return {\n    attractors,\n    background,\n    color,\n    points: [o],\n    prevDirection: 0,\n  };\n}\n\nexport function updateData({ data, params, tick }, random = Math.random) {\n  const { nbAttractors } = params;\n  if (data.attractors.length !== nbAttractors) {\n    data.attractors = updateAttractors(params);\n  }\n  const rules = params.rules\n    ? params.rules.split('').reduce((prev, curr, i) => {\n        if (curr === '1') {\n          prev.push(i);\n        }\n        return prev;\n      }, [])\n    : [...Array(nbAttractors).keys()];\n  const direction =\n    (data.prevDirection + rules[Math.floor(random() * rules.length)]) %\n    nbAttractors;\n  data.prevDirection = direction;\n  const lastPoint = data.points[data.points.length - 1];\n  const attractor = data.attractors[direction];\n  const newPoint = {\n    x: (lastPoint.x + attractor.x) / 2,\n    y: (lastPoint.y + attractor.y) / 2,\n  };\n  data.points.push(newPoint);\n  return data;\n}\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nfunction draw({ ctx, data, params, tick, circle }) {\n  const { height, width } = params;\n  ctx.globalAlpha = 1;\n  ctx.fillStyle = data.background;\n  ctx.globalCompositeOperation = 'source-over';\n  ctx.fillRect(0, 0, width, height);\n\n  ctx.globalCompositeOperation = 'lighter';\n  ctx.fillStyle = data.color;\n  ctx.globalAlpha = 0.8;\n\n  for (let i = 0; i < tick; i++) {\n    const point = data.points[i];\n    const { x, y } = point;\n    const { r } = params;\n    circle({ x, y, r });\n    ctx.fill();\n  }\n}\n\nexport const BasicChaosGame = props => (\n  <Model\n    ticksPerAnimation={100}\n    maxTime={10000}\n    initData={init}\n    isPlaying\n    loop\n    updateData={updateData}\n    initialParams={{\n      height: 332,\n      width: 332,\n      nbAttractors: 3,\n      r: 1,\n    }}\n    {...props}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const CustomControls = ({ params, setParams }) => {\n  const nbToggles = params.nbAttractors;\n  const nbRows = Math.ceil(nbToggles / 5);\n  const toggle = a =>\n    a < nbToggles ? (\n      <Toggle\n        key={`toggle-${a}`}\n        sx={{ flex: '1 1 0' }}\n        checked={params.rules.charAt(a) === '1'}\n        label={`${a + 1}${a === 0 ? 'st' : a === 1 ? 'nd' : 'th'} vertex`}\n        setValue={checked => {\n          const bit = params.rules.charAt(a) === '1' ? '0' : '1';\n          const updatedRules =\n            params.rules.slice(0, a) + bit + params.rules.slice(a + 1);\n          setParams({ rules: updatedRules });\n        }}\n      />\n    ) : null;\n\n  const toggles = [...Array(nbRows).keys()].map(r => (\n    <Flex\n      flexDirection=\"row\"\n      key={`tr-${r}`}\n      sx={{ justifyContent: 'space-between' }}\n    >\n      {[r * 5, r * 5 + 1, r * 5 + 2, r * 5 + 3, r * 5 + 4].map(toggle)}\n    </Flex>\n  ));\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Range\n        key=\"range\"\n        minValue={3}\n        maxValue={20}\n        label=\"Vertices\"\n        value={params.nbAttractors}\n        setValue={v =>\n          setParams({ nbAttractors: v, rules: '1'.repeat(v) }, true)\n        }\n      />\n      <Flex flexDirection=\"column\">{toggles}</Flex>\n    </Flex>\n  );\n};\n\nconst Controls = withControls(CustomControls);\nexport const ChaosGame = props => (\n  <Model\n    ticksPerAnimation={100}\n    maxTime={20000}\n    initData={init}\n    updateData={updateData}\n    initialParams={{\n      height: 332,\n      width: 332,\n      nbAttractors: 7,\n      angle: 0,\n      r: 1,\n      rules: '1001100',\n    }}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <Controls />\n    </Flex>\n  </Model>\n);\nexport default ChaosGame;\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const Frame = ({ tick }) => {\n  const data = Array(10)\n    .fill(0)\n    .map((r, y) =>\n      Array(10)\n        .fill(0)\n        .map((c, x) => (10 * y + x > tick ? 0 : 1))\n    );\n  return <Grid data={data} size={36} />;\n};\n\nconst SimpleModel = props => (\n  <Model {...props}>\n    <Frame />\n  </Model>\n);\n\nexport default SimpleModel;\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst stale = `0000010000000000010000000000\n0000000100010010000000000000\n1110001000000000000000000001\n1010000000000000000000000000\n0000000000100000000010110000\n0100000101010100000000000001\n0000000000010100000001000001\n0000000011100100000000100001\n0000010000000000000000010000\n0000000000010100000000000100`\n  .split('\\n')\n  .map(d => d.split('').map(Number));\n\n// helpers\n\nfunction countNeighbors(x, y, grid) {\n  const height = grid.length;\n  if (!height) {\n    return 0;\n  }\n  const width = grid[0].length;\n\n  let n = 0;\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n      const x1 = x + xOffset;\n      const y1 = y + yOffset;\n      if (\n        x1 < width &&\n        x1 > 0 &&\n        y1 < height &&\n        y1 > 0 &&\n        (x1 !== x || y1 !== y)\n      ) {\n        n += grid[y1][x1];\n      }\n    }\n  }\n  return n;\n}\n\nexport function updateGameOfLifeGrid({ data, complete }) {\n  let changes = 0;\n  const updatedGrid = data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        changes++;\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        changes++;\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n  if (changes === 0) {\n    complete();\n  }\n  return updatedGrid;\n}\n\nexport function updateGridNoComplete({ data }) {\n  return data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n}\n\nexport function initGrid({ height, width, density }, random = Math.random) {\n  return Array(height)\n    .fill(0)\n    .map(row =>\n      Array(width)\n        .fill(0)\n        .map(() => Number(random() < density))\n    );\n}\n\nconst GameOfLife = props => (\n  <Model\n    auto={false}\n    controls={{\n      param: 'density',\n      maxValue: 1,\n      step: 0.01,\n      resetOnChange: true,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    updateData={updateGameOfLifeGrid}\n    delay={100}\n    initData={initGrid}\n    initialParams={{\n      height: 28,\n      width: 28,\n      density: 0.15,\n    }}\n    {...props}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step2 = () => (\n  <Model\n    initData={initGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step3 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGridNoComplete}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step4 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step5 = () => (\n  <Model\n    controls={{\n      param: 'density',\n      resetOnChange: true,\n      maxValue: 1,\n      step: 0.01,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport default GameOfLife;\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\n// helpers\n\nfunction getTotalValue(grid, listOfCells) {\n  return listOfCells.reduce((total, [x, y]) => total + grid[y][x].value, 0);\n}\n\nexport function update({ data, tick, params, complete }) {\n  let grid = JSON.parse(JSON.stringify(data));\n  let changes = 0;\n  const { height, width, w } = params;\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const { innerNeighbors, outerNeighbors } = data[row][col];\n\n      const activators = getTotalValue(data, innerNeighbors);\n      const inhibitors = getTotalValue(data, outerNeighbors);\n\n      const mutation = activators - w * inhibitors;\n\n      if (mutation > 0) {\n        grid[row][col].value = 1;\n      }\n      if (mutation < 0) {\n        grid[row][col].value = 0;\n      }\n      if (grid[row][col] !== data[row][col]) {\n        changes++;\n      }\n\n      // if mutation = 0, leave cell unchanged\n    }\n  }\n  if (changes < 0.01 * height * width) {\n    complete();\n  }\n  return grid;\n}\n\nexport function initData(\n  { height, width, density, innerRadius, outerRadius },\n  random = Math.random\n) {\n  const data = [];\n  for (let row = 0; row < height; row++) {\n    const cells = [];\n    for (let col = 0; col < width; col++) {\n      const innerNeighbors = [];\n      const outerNeighbors = [];\n\n      const x0 = Math.max(col - outerRadius, 0);\n      const x1 = Math.min(col + outerRadius, width - 1);\n      const y0 = Math.max(row - outerRadius, 0);\n      const y1 = Math.min(row + outerRadius, height - 1);\n\n      for (let x = x0; x < x1; x++) {\n        for (let y = y0; y < y1; y++) {\n          const dist = Math.hypot(col - x, row - y);\n          if (dist > innerRadius && dist <= outerRadius) {\n            outerNeighbors.push([x, y]);\n          } else {\n            if (dist > 0 && dist <= innerRadius) {\n              innerNeighbors.push([x, y]);\n            }\n          }\n        }\n      }\n\n      const value = random() < density;\n\n      cells.push({ value, innerNeighbors, outerNeighbors });\n    }\n    data.push(cells);\n  }\n  return data;\n}\n\nexport const ActivatorFrame = props => (\n  <Grid size={10} accessor={d => (d.value ? '#000' : 'none')} {...props} />\n);\nconst Activators = props => (\n  <Model\n    auto=\"false\"\n    controls={[\n      [\n        {\n          param: 'innerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Inner Radius',\n        },\n        {\n          param: 'outerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Outer Radius',\n        },\n      ],\n      [\n        { param: 'w', minValue: 0, maxValue: 1, label: 'weight', step: 0.01 },\n        { param: 'density', minValue: 0, maxValue: 1, step: 0.1 },\n      ],\n    ]}\n    initData={initData}\n    initialParams={{\n      height: 35,\n      width: 35,\n      density: 0.5,\n      innerRadius: 3,\n      outerRadius: 6,\n      w: 0.35,\n    }}\n    updateData={update}\n    maxTime={200}\n    {...props}\n  >\n    <ActivatorFrame />\n  </Model>\n);\n\nexport default Activators;\n","import React from 'react';\nimport { Flex } from 'rebass';\nimport { TimeSeries, Counter, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst COLORS = {\n  sick: '#4f8c9d',\n  recovered: '#add51f',\n  healthy: '#997cfb',\n  dead: '#6a9012',\n};\n\nexport function updateEpidemic(\n  { data, tick, params, complete },\n  random = Math.random\n) {\n  let updatedData = JSON.parse(JSON.stringify(data.agents));\n  let nbSick = 0,\n    nbHealthy = 0,\n    nbDead = 0,\n    nbRecovered = 0;\n\n  const {\n    contaminationRisk,\n    deathRisk,\n    r,\n    recoveryTicks,\n    height,\n    width,\n  } = params;\n\n  updatedData.forEach((agent, i) => {\n    // update status\n\n    if (agent.status === 'sick') {\n      if (tick >= agent.recovery) {\n        agent.status = 'recovered';\n      } else {\n        if (random() < deathRisk) {\n          agent.status = 'dead';\n        }\n      }\n    }\n    if (agent.status !== 'dead') {\n      // checking for collisions\n\n      for (let j = i + 1; j < updatedData.length; j++) {\n        let otherAgent = updatedData[j];\n        const dx = otherAgent.x - agent.x;\n        const dy = otherAgent.y - agent.y;\n        const distance = Math.hypot(dx, dy);\n        if (distance < 2 * r) {\n          // collision\n\n          const ax = dx / distance;\n          const ay = dy / distance;\n\n          agent.vx = agent.vx - ax;\n          agent.vy = agent.vy - ay;\n          otherAgent.vx = ax;\n          otherAgent.vy = ay;\n\n          // test for contagion\n\n          if (agent.status === 'sick' && otherAgent.status === 'healthy') {\n            if (random() <= contaminationRisk) {\n              otherAgent.status = 'sick';\n              otherAgent.recovery = tick + recoveryTicks;\n            }\n          }\n          if (agent.status === 'healthy' && otherAgent.status === 'sick') {\n            if (random() <= contaminationRisk) {\n              agent.status = 'sick';\n              agent.recovery = tick + recoveryTicks;\n            }\n          }\n        }\n      }\n\n      // now move\n\n      agent.x = agent.x + agent.vx;\n      agent.y = agent.y + agent.vy;\n\n      // bouncing on walls\n      if (\n        (agent.vy < 0 && agent.y < r) ||\n        (agent.vy > 0 && agent.y > height - r)\n      ) {\n        agent.vy = -agent.vy;\n      }\n\n      if (\n        (agent.vx < 0 && agent.x < r) ||\n        (agent.vx > 0 && agent.x > width - r)\n      ) {\n        agent.vx = -agent.vx;\n      }\n    }\n    // counting agents\n    switch (agent.status) {\n      case 'sick':\n        nbSick++;\n        break;\n      case 'healthy':\n        nbHealthy++;\n        break;\n      case 'recovered':\n        nbRecovered++;\n        break;\n      case 'dead':\n        nbDead++;\n        break;\n      default:\n    }\n  });\n  if (nbSick === 0) {\n    complete();\n  }\n\n  return {\n    agents: updatedData,\n    sick: nbSick,\n    recovered: nbRecovered,\n    dead: nbDead,\n    healthy: nbHealthy,\n  };\n}\n\nfunction chooseMamongN(n, m, random) {\n  const N = [...Array(n).keys()].reduce((prev, curr) => {\n    prev[curr] = true;\n    return prev;\n  }, {});\n  const results = new Set();\n\n  for (let i = 0; i < m; i++) {\n    const k = Math.floor(random() * Object.keys(N).length);\n    results.add(k);\n    delete N[k];\n  }\n\n  return results;\n}\n\nfunction findOverlaps(agents, i, r, point) {\n  const { x: x0, y: y0 } = point;\n  const domain = agents.slice(i);\n  return domain.filter(({ x, y }) => Math.hypot(x - x0, y - y0) < r);\n}\n\nexport function initData(\n  {\n    nbAgents = 200,\n    nbSick = 5,\n    maxSpeed = 30,\n    contaminationRisk = 1,\n    deathRisk = 0.005,\n    recoveryTicks = 20,\n    nbDistancing = 50,\n    r = 3,\n    height = 300,\n    width = 400,\n  },\n  random = Math.random\n) {\n  const sick = chooseMamongN(nbAgents, nbSick, random);\n  const distancing = chooseMamongN(nbAgents, nbDistancing, random);\n  const agents = [];\n\n  for (let i = 0; i < nbAgents; i++) {\n    let x, y;\n\n    do {\n      y = r / 2 + random() * (height - r);\n      x = r / 2 + random() * (width - r);\n    } while (findOverlaps(agents, 0, r, { x, y }).length);\n\n    const status = sick.has(i) ? 'sick' : 'healthy';\n\n    const recovery = sick.has(i) ? recoveryTicks : null;\n    const isDistancing = distancing.has(i);\n    const speed = isDistancing ? 0 : maxSpeed;\n    const vx = speed * (random() * 2 - 1);\n    const vy = speed * (random() * 2 - 1);\n    const isBouncing = false;\n\n    agents.push({\n      x,\n      y,\n      status,\n      isBouncing,\n      isDistancing,\n      vx,\n      vy,\n      recovery,\n      speed,\n    });\n  }\n  return {\n    agents,\n    sick: nbSick,\n    healthy: nbAgents - nbSick,\n    dead: 0,\n    recovered: 0,\n  };\n}\n\nexport class EpidemicFrame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  componentDidUpdate() {\n    const {\n      data,\n      params: { width, height, r },\n    } = this.props;\n    const canvas = this.myRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#fff';\n    ctx.lineWidth = '5px';\n    ctx.clearRect(0, 0, width, height);\n    data.agents.forEach(({ status, isBouncing, x, y }) => {\n      ctx.beginPath();\n      ctx.fillStyle = COLORS[status];\n      ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n      ctx.closePath();\n      ctx.fill();\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas\n          width={this.props.params.width}\n          height={this.props.params.height}\n          ref={this.myRef}\n        />\n      </div>\n    );\n  }\n}\n\nconst ConnectedFrame = withFrame(EpidemicFrame);\n\nconst series = [\n  {\n    color: COLORS['healthy'],\n    label: 'Healthy',\n    accessor: d => d.healthy,\n  },\n  {\n    color: COLORS['sick'],\n    label: 'Sick',\n    accessor: d => d.sick,\n  },\n  {\n    color: COLORS['recovered'],\n    label: 'Recovered',\n    accessor: d => d.recovered,\n  },\n  {\n    color: COLORS['dead'],\n    label: 'Dead',\n    accessor: d => d.dead,\n  },\n];\n\nconst Epidemic = props => (\n  <Model\n    initData={initData}\n    initialParams={{\n      nbAgents: 500,\n      nbSick: 20,\n      contaminationRisk: 1,\n      deathRisk: 0.001,\n      maxSpeed: 2,\n      recoveryTicks: 200,\n      nbDistancing: 0,\n      r: 2,\n      height: 332,\n      width: 332,\n    }}\n    updateData={updateEpidemic}\n    maxTime={500}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <ConnectedFrame />\n      {props.hideSeries ? null : <TimeSeries series={series} stacked={true} />}\n      {props.hideSeries ? null : <Counter series={series} />}\n    </Flex>\n  </Model>\n);\n\nexport default Epidemic;\n","import React from 'react';\nimport { Model } from 'react-sim';\nimport { Flex } from 'rebass';\n\nconst FramedModel = ({fmOverrides, ...props}) => (\n  <Flex\n    sx={{\n      border: '1px solid currentcolor',\n      my: 2,\n      p: 2,\n      width: '350px',\n    }}\n    {...fmOverrides}\n  >\n    <Model {...props} />\n  </Flex>\n);\n\nexport default FramedModel;\n","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\nimport { Flex, Box } from 'rebass';\nimport Model from './framed-model';\n\nconst phi = 0.5 + Math.sqrt(5) / 2;\n\nconst D = {\n  0: 'right',\n  1: 'down',\n  2: 'left',\n  3: 'up',\n};\n\nconst colors = {\n  right: '#b6b6e2',\n  down: '#a6d3d9',\n  left: '#ffeb3b',\n  up: '#95d392',\n};\n\nexport function initData() {\n  return [0];\n}\n\nexport function updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n\nexport function draw({ ctx, params: { size }, tick }) {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, size, size);\n  let x = 0,\n    y = 0,\n    side = size;\n  for (let i = 0; i < tick; i++) {\n    const d = D[i % 4];\n    side = side / phi;\n    ctx.strokeStyle = '#ddd';\n    ctx.strokeRect(x, y, side, side);\n    ctx.strokeStyle = '#222';\n\n    const radius = Math.max(0, side - 1);\n    switch (d) {\n      case 'right':\n        ctx.beginPath();\n        ctx.arc(x + side, y + side, radius, Math.PI, -Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + side;\n        break;\n      case 'down':\n        ctx.beginPath();\n        ctx.arc(x, y + side, radius, -Math.PI / 2, 0);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + (1 - 1 / phi) * side;\n        y = y + side;\n        break;\n      case 'left':\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x - side / phi;\n        y = y + (1 - 1 / phi) * side;\n        break;\n      case 'up':\n        ctx.beginPath();\n        ctx.arc(x + side, y, radius, Math.PI / 2, Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        y = y - side / phi;\n        break;\n      default:\n    }\n  }\n}\n\nexport const FibonacciSpiralFrame = ({ tick, params }) => {\n  const { size } = params;\n  const width = size;\n  const height = size / phi;\n\n  return <CanvasFrame height={height} width={width} draw={draw} />;\n};\n\nconst FibonacciSpiral = props => (\n  <Model initialParams={{ size: 332 }} delay={100} maxTime={15} {...props}>\n    <FibonacciSpiralFrame />\n  </Model>\n);\n\nexport const FibonacciSquaresFrame = ({ data, tick, params }) => {\n  let maxX = 0,\n    minX = 0,\n    maxY = 0,\n    minY = 0,\n    x = 0,\n    y = 0;\n  function renderSquares(sequence) {\n    return sequence.map((d, i) => {\n      const n = d * 10;\n      const direction = D[i % 4];\n      switch (direction) {\n        case 'right':\n          y = y - n;\n          break;\n        case 'left':\n          x = x - n;\n          break;\n        case 'up':\n          x = x - n;\n          y = y - n;\n          break;\n        default:\n      }\n      const borderWidth = Math.max(\n        0.1,\n        i < 2 ? 1 / params.size : 1 / (n + 10 * sequence[i - 1])\n      );\n\n      const fontSize = n / (1.5 * String(d).length);\n\n      const square = (\n        <div\n          key={`rect-${i}`}\n          style={{\n            position: 'absolute',\n            border: `#{borderWidth}px solid #777`,\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: colors[direction],\n            top: y,\n            left: x,\n            width: n,\n            height: n,\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            style={{\n              fontSize,\n            }}\n          >\n            {d}\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              width: 2 * n,\n              height: 2 * n,\n              border: `${borderWidth}px solid black`,\n              borderRadius: n,\n              boxSizing: 'border-box',\n              top: 0,\n              left: 0,\n              transform: {\n                right: undefined,\n                down: 'translate(-50%)',\n                left: 'translate(-50%,-50%)',\n                up: 'translate(0,-50%)',\n              }[direction],\n            }}\n          />\n        </div>\n      );\n      switch (direction) {\n        case 'right':\n          x = x + n;\n          break;\n        case 'down':\n          x = x + n;\n          y = y + n;\n          break;\n        case 'left':\n          y = y + n;\n          break;\n        default:\n      }\n      maxX = Math.max(maxX, x);\n      minX = Math.min(minX, x);\n      maxY = Math.max(maxY, y);\n      minY = Math.min(minY, y);\n      return square;\n    });\n  }\n\n  const squares = renderSquares(data.slice(1));\n  const maxSide = Math.max(maxX - minX, maxY - minY);\n  const scale = params.size / maxSide;\n\n  return (\n    <div\n      style={{\n        width: params.size,\n        height: params.size,\n        position: 'relative',\n        pointerEvents: 'none',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          transformOrigin: 'top left',\n          transform: `scale(${scale}) translate(${-minX}px,${-minY}px)`,\n          width: `${maxX - minX}px`,\n          height: `${maxY - minY}px`,\n          transition: 'transform 0.2s',\n        }}\n      >\n        {squares}\n      </div>\n    </div>\n  );\n};\n\nconst NumberFrame = ({ data }) => (\n  <Flex sx={{ flexDirection: 'row', flexWrap: 'wrap' }}>\n    {data.map((d, i) => (\n      <Box sx={{ m: 1, p: 2, bg: 'muted', fontSize: 1 }} key={i}>\n        {d}\n      </Box>\n    ))}\n  </Flex>\n);\nconst FibonacciNumbers = props => (\n  <Model initData={initData} updateData={updateData} maxTime={20} {...props}>\n    <NumberFrame />\n  </Model>\n);\n\nconst FibonacciSquares = props => (\n  <Model\n    initialParams={{ size: 332 }}\n    initData={initData}\n    updateData={updateData}\n    delay={400}\n    maxTime={12}\n    {...props}\n  >\n    <FibonacciSquaresFrame />\n  </Model>\n);\n\nexport { FibonacciSpiral, FibonacciSquares, FibonacciNumbers };\nexport default FibonacciSpiral;\n\n"],"sourceRoot":""}