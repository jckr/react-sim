{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-html.js","webpack:///./src/pages/concepts.mdx"],"names":["$export","fails","defined","quot","createHTML","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","name","isMDXComponent"],"mappings":"iFAAA,IAAIA,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,QAChBC,EAAU,EAAQ,QAClBC,EAAO,KAEPC,EAAa,SAAUC,EAAQC,EAAKC,EAAWC,GACjD,IAAIC,EAAIC,OAAOR,EAAQG,IACnBM,EAAK,IAAML,EAEf,MADkB,KAAdC,IAAkBI,GAAM,IAAMJ,EAAY,KAAOG,OAAOF,GAAOI,QAAQT,EAAM,UAAY,KACtFQ,EAAK,IAAMF,EAAI,KAAOH,EAAM,KAErCO,EAAOC,QAAU,SAAUC,EAAMC,GAC/B,IAAIC,EAAI,GACRA,EAAEF,GAAQC,EAAKZ,GACfJ,EAAQA,EAAQkB,EAAIlB,EAAQmB,EAAIlB,GAAM,WACpC,IAAImB,EAAO,GAAGL,GAAM,KACpB,OAAOK,IAASA,EAAKC,eAAiBD,EAAKE,MAAM,KAAKC,OAAS,KAC7D,SAAUN,K,sNCXT,IAAMO,EAAe,CAC1B,MAAS,qBAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,oBADR,qBAGA,qEAAoD,0BAAYC,WAAW,KAAvB,SAApD,KACA,YAAC,IAAD,CAAOC,KAAK,QAAQF,QAAQ,UAC5B,4BAAW,0BAAYC,WAAW,KAAvB,SAAX,+CACA,YAAC,IAAD,CAAOC,KAAK,aAAaF,QAAQ,UACjC,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,kFACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,qGACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,sEAEF,YAAC,IAAD,CAAOC,KAAK,kBAAkBF,QAAQ,UACtC,yHACA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,YAApB,+DACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,YAApB,qFACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,gCAA4G,0BAAYA,WAAW,MAAvB,QAA5G,aACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,sDAEF,iDACA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAOC,KAAK,gBAAgBF,QAAQ,UACpC,iFAAgE,0BAAYC,WAAW,KAAvB,YAAhE,kHACA,oKACA,wDAAuC,0BAAYA,WAAW,KAAvB,UAAvC,YAAsG,0BAAYA,WAAW,KAAvB,QAAtG,eAAsK,0BAAYA,WAAW,KAAvB,SAAtK,yCAAiQ,0BAAYA,WAAW,KAAvB,QAAjQ,YACA,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAOC,KAAK,gBAAgBF,QAAQ,UACpC,qBAAG,0BAAYC,WAAW,KAAvB,YAAH,kFAA0I,0BAAYA,WAAW,KAAvB,UAA1I,qBAAkN,0BAAYA,WAAW,KAAvB,QAAlN,KACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,KAAK,kBAAkBF,QAAQ,UACtC,sCAAqB,0BAAYC,WAAW,KAAvB,QAArB,aAAmF,0BAAYA,WAAW,KAAvB,cAAnF,mDACA,sBACE,kBAAIA,WAAW,MAAf,gBAAqC,0BAAYA,WAAW,MAAvB,QAArC,KACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,UAA5B,KACA,kBAAIA,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,QAAzC,MAEF,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOC,KAAK,aAAaF,QAAQ,UACjC,4BAAW,0BAAYC,WAAW,KAAvB,SAAX,oEACO,0BAAYA,WAAW,KAAvB,SADP,eAEA,sBACE,kBAAIA,WAAW,MAAf,eAAoC,0BAAYA,WAAW,MAAvB,QAApC,KACA,kBAAIA,WAAW,MAAf,eAAoC,0BAAYA,WAAW,MAAvB,QAApC,KACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,YAE9B,wKACA,YAAC,IAAD,CAAOC,KAAK,qBAAqBF,QAAQ,UACzC,oGAKJH,EAAWM,gBAAiB","file":"component---src-pages-concepts-mdx-28b7df7ab18bbc92f057.js","sourcesContent":["var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Image from '../components/image';\nexport const _frontmatter = {\n  \"Title\": \"how does it work?\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"how-does-it-work\"\n    }}>{`How does it work?`}</h1>\n    <p>{`At the core of a React-Sim simulation is the `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{`.`}</p>\n    <Image name=\"model\" mdxType=\"Image\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` maintains three key pieces of information:`}</p>\n    <Image name=\"modelState\" mdxType=\"Image\" />\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`params`}</inlineCode>{`, parameters of the simulation which don't change without a user intervention,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tick`}</inlineCode>{`, a measure of the progression of the simulation, which may increase automatically over time, and`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{`, data for the simulation which will be updated at each new tick.`}</li>\n    </ul>\n    <Image name=\"modelComponents\" mdxType=\"Image\" />\n    <p>{`To make a simulation work, the model has to interact with several other parts of the simulation:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`controls`}</inlineCode>{`, which will handle how users interact with the simulation,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initData`}</inlineCode>{`, which is run at the beginning of the simulation, to create the initial dataset,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updateData`}</inlineCode>{`, which is run each time the `}<inlineCode parentName=\"li\">{`tick`}</inlineCode>{` changes,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`frame`}</inlineCode>{`, which will render the simulation for each tick.`}</li>\n    </ul>\n    <p>{`Let's see how they work.`}</p>\n    <h2 {...{\n      \"id\": \"controls\"\n    }}>{`Controls`}</h2>\n    <Image name=\"modelControls\" mdxType=\"Image\" />\n    <p>{`Controls let users interact with the simulation. Through `}<inlineCode parentName=\"p\">{`controls`}</inlineCode>{`, users can play or pause the simulation, when applicable, jump to a point in time, or control the parameters.`}</p>\n    <p>{`Controls enable developers to describe a UI for these interactions, using things like sliders, textboxes, toggles etc. (or bring your own).`}</p>\n    <p>{`Controls get to change both the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` inside the `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{`. Controls can't access or change the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` though.`}</p>\n    <h2 {...{\n      \"id\": \"initdata\"\n    }}>{`initData`}</h2>\n    <Image name=\"modelInitData\" mdxType=\"Image\" />\n    <p><inlineCode parentName=\"p\">{`initData`}</inlineCode>{` generates the dataset at the start of the simulation. It can read the model's `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{`, and replace its `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"updatedata\"\n    }}>{`updateData`}</h2>\n    <Image name=\"modelUpdateData\" mdxType=\"Image\" />\n    <p>{`Each time the `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` changes, `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` will generate a new dataset, as a function of:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`the existing `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`params`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`tick`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"frame\"\n    }}>{`frame`}</h2>\n    <Image name=\"modelFrame\" mdxType=\"Image\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`frame`}</inlineCode>{` is how the simulation is going to represent the data.\nFrom the `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{`, it reads:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`the current `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\">{`the current `}<inlineCode parentName=\"li\">{`tick`}</inlineCode>{`,`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`params`}</inlineCode></li>\n    </ul>\n    <p>{`and it uses that to render the simulation. Anything that can be rendered by React can go into a Frame - canvas, HTML content, SVG, you name it.`}</p>\n    <Image name=\"modelHighLevelView\" mdxType=\"Image\" />\n    <p>{`So that's how the Model and the other components interact at a high level.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}