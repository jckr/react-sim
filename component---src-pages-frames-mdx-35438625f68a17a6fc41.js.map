{"version":3,"sources":["webpack:///./src/pages/frames.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oQAKO,IAAMA,EAAe,CAC1B,MAAS,UAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,4BAAW,0BAAYC,WAAW,KAAvB,UAAX,8EACA,gCAAe,0BAAYA,WAAW,KAAvB,QAAf,UAA0E,0BAAYA,WAAW,KAAvB,QAA1E,cAAyI,0BAAYA,WAAW,KAAvB,UAAzI,sCACA,iCAAgB,0BAAYA,WAAW,KAAvB,SAAhB,8CAAgH,0BAAYA,WAAW,KAAvB,QAAhH,QAAyK,0BAAYA,WAAW,KAAvB,QAAzK,WAAqO,0BAAYA,WAAW,KAAvB,UAArO,YAAoS,0BAAYA,WAAW,KAAvB,UAApS,yCACA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,oCAAkG,0BAAYA,WAAW,KAAvB,cAAlG,0CAAmM,0BAAYA,WAAW,KAAvB,SAAnM,8BAAmR,+BAAGA,WAAW,KAAQ,CACrS,KAAQ,wBADuQ,YAAnR,0CAGA,uGACA,iBAAQ,CACN,GAAM,uCADR,uCAGA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,sCAAoG,0BAAYA,WAAW,KAAvB,SAApG,KACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,qDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,+CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,4GACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,iCAA6G,0BAAYA,WAAW,MAAvB,SAA7G,2BACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,kEACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,YAApB,iDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,wIAEF,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,mCACA,mDAAkC,0BAAYA,WAAW,KAAvB,UAAlC,SAA8F,0BAAYA,WAAW,KAAvB,SAA9F,+DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uCAML,+DAA8C,0BAAYA,WAAW,KAAvB,SAA9C,6CAA6I,0BAAYA,WAAW,KAAvB,SAA7I,KACA,uEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2DAOL,mHACA,+FACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4DAQL,8BAAa,0BAAYA,WAAW,KAAvB,eAAb,uEACS,0BAAYA,WAAW,KAAvB,UADT,qCACiG,0BAAYA,WAAW,KAAvB,cADjG,aAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+OAeL,8BAAa,0BAAYA,WAAW,KAAvB,wBAAb,iBAA+F,0BAAYA,WAAW,KAAvB,UAA/F,YAKJJ,EAAWK,gBAAiB","file":"component---src-pages-frames-mdx-35438625f68a17a6fc41.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"Title\": \"Frames\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"how-frames-works\"\n    }}>{`How frames works`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` are the part of the simulation in charge of rendering the internal state.`}</p>\n    <p>{`Given a `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` prop, the `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` paint a view of that information.`}</p>\n    <p>{`When the `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` refreshes the animation, it sends updated `}<inlineCode parentName=\"p\">{`tick`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{`, so the `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` rerender and show fresh information.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` only job is to render the data. `}<inlineCode parentName=\"p\">{`updateData`}</inlineCode>{` does the calculation on the data, the `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` manages the animation and `}<a parentName=\"p\" {...{\n        \"href\": \"/react-sim/controls\"\n      }}>{`controls`}</a>{` let the user interact with the Model.`}</p>\n    <p>{`This is a completely declarative approach, consistent with the React approach.`}</p>\n    <h1 {...{\n      \"id\": \"how-to-connect-frames-and-the-model\"\n    }}>{`How to connect Frames and the Model`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` receive some information from the `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` (anything), the current state of the simulation.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tick`}</inlineCode>{` (integer), the progress in the simulation.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`params`}</inlineCode>{` (object), all the parameters set by the user/author, which don't change over time without intervention.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cachedData`}</inlineCode>{` (object), data from previous `}<inlineCode parentName=\"li\">{`ticks`}</inlineCode>{` of the simulation, and`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`results`}</inlineCode>{` (array), data from previous completed runs of the simulation,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initData`}</inlineCode>{` (function), the Frame can reinitialize data,`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setData`}</inlineCode>{` (function), the Frame can change the data. (so for instance the Frame can be used to let the user enter an initial state of data).`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` can be one or more components.`}</p>\n    <p>{`The easiest way to connect `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` to a `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` is just to have these components as children of the Model:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Model>\n  <MyFrame />\n</Model>\n`}</code></pre>\n    <p>{`A component which is a direct child of `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` will receive all of the props above from `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{`.`}</p>\n    <p>{`This also works if there are several children:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Model>\n  <MyFrame />\n  <MyOtherFrame />\n</Model>\n`}</code></pre>\n    <p>{`All components will receive these props. The children will be arranged from left to right.`}</p>\n    <p>{`However, it doesn't work if the components are deep into the tree, ie:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Model>\n  <div>\n    <MyFrame />\n  </div>\n</Model>\n`}</code></pre>\n    <p>{`Here, `}<inlineCode parentName=\"p\">{`<MyFrame />`}</inlineCode>{` won't receive the frame props, because it is too deep.\nTo connect `}<inlineCode parentName=\"p\">{`Frames`}</inlineCode>{` deep in the tree, we can use the `}<inlineCode parentName=\"p\">{`withFrames`}</inlineCode>{` wrapper.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { withFrames, Model } from 'react-sim';\nimport MyFrame from 'my-frame';\n\nconst MyConnectedFrame = withFrames(MyFrame);\n\nexport default () => (\n  <Model>\n    <div>\n      <MyConnectedFrame />\n    </div>\n  </Model>\n);\n`}</code></pre>\n    <p>{`Here, `}<inlineCode parentName=\"p\">{`<MyConnectedFrame />`}</inlineCode>{` receives the `}<inlineCode parentName=\"p\">{`frames`}</inlineCode>{` props.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}