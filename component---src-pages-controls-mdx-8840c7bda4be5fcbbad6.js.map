{"version":3,"sources":["webpack:///./src/pages/controls.mdx","webpack:///./src/components/image.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","name","parentName","isMDXComponent","Image","data","fluid","childImageSharp"],"mappings":"gRAMO,IAAMA,EAAe,CAC1B,MAAS,YAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,kCACA,iFACA,YAAC,IAAD,CAAOC,KAAK,gBAAgBD,QAAQ,UACpC,2EACA,sBACE,kBAAIE,WAAW,MAAf,+CAAoE,0BAAYA,WAAW,MAAvB,aAApE,iHACA,kBAAIA,WAAW,MAAf,6GAAkI,0BAAYA,WAAW,MAAvB,gBAAlI,0FAEF,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,sBAAmE,0BAAYA,WAAW,KAAvB,SAAnE,qBAA0I,+BAAGA,WAAW,KAAQ,CAC5J,KAAQ,4BAD8H,iBAA1I,2HAOJL,EAAWM,gBAAiB,G,goPCmBbC,IAND,SAAC,GAAc,IAAZH,EAAW,EAAXA,KACTI,EAAI,OAEV,OAAO,kBAAC,IAAD,CAAKC,MAAOD,EAAKJ,GAAMM,gBAAgBD","file":"component---src-pages-controls-mdx-8840c7bda4be5fcbbad6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Image from '../components/image';\nexport const _frontmatter = {\n  \"Title\": \"Controls\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Controls`}</h1>\n    <p>{`Controls is how a user can interact with the simulation:`}</p>\n    <Image name=\"modelControls\" mdxType=\"Image\" />\n    <p>{`React-Sim provides 2 ways to build that interface.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A \"fast\" one, by passing certain props to a `}<inlineCode parentName=\"li\">{`<Model />`}</inlineCode>{` component. You have access to building blocks to create a controls UI, styled sensibly, with minimal effort.`}</li>\n      <li parentName=\"ul\">{`a \"custom\" one, using a wrapper. You bring in the component you want, styled the way you want, wrap it in `}<inlineCode parentName=\"li\">{`withControls`}</inlineCode>{` and it will have the methods and information needed to interact with the simulation.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`TL;DR`}</strong>{`: by default, your `}<inlineCode parentName=\"p\">{`Model`}</inlineCode>{` will come with a `}<a parentName=\"p\" {...{\n        \"href\": \"/controls/default-timer\"\n      }}>{`default timer`}</a>{` control that lets user start, stop, reset and go step by step in a simulation. That default timer stops at 100 ticks.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst query = graphql`\n  fragment fluidImage on File {\n    childImageSharp {\n      fluid(maxWidth: 1000) {\n        ...GatsbyImageSharpFluid\n      }\n    }\n  }\n  query {\n    model: file(relativePath: { eq: \"model.png\" }) {\n      ...fluidImage\n    }\n    modelState: file(relativePath: { eq: \"model-state.png\" }) {\n      ...fluidImage\n    }\n    modelInitData: file(relativePath: { eq: \"model-init-data.png\" }) {\n      ...fluidImage\n    }\n    modelControls: file(relativePath: { eq: \"model-controls.png\" }) {\n      ...fluidImage\n    }\n    modelComponents: file(relativePath: { eq: \"model-components.png\" }) {\n      ...fluidImage\n    }\n    modelHighLevelView: file(\n      relativePath: { eq: \"model-high-level-view.png\" }\n    ) {\n      ...fluidImage\n    }\n    modelUpdateData: file(relativePath: { eq: \"model-update-data.png\" }) {\n      ...fluidImage\n    }\n    modelFrame: file(relativePath: { eq: \"model-frame.png\" }) {\n      ...fluidImage\n    }\n  }\n`;\n\nconst Image = ({ name }) => {\n  const data = useStaticQuery(query);\n\n  return <Img fluid={data[name].childImageSharp.fluid} />;\n};\n\nexport default Image;\n"],"sourceRoot":""}