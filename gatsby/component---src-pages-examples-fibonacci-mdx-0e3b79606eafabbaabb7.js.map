{"version":3,"sources":["webpack:///./src/pages/examples/fibonacci.mdx","webpack:///./src/components/examples/fibonacci.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","isMDXComponent","phi","Math","sqrt","D","0","1","2","3","initData","updateData","data","tick","lastNumber","FibonacciFrame","params","canvasRef","useRef","size","useEffect","ctx","current","getContext","fillStyle","fillRect","x","y","side","i","length","d","strokeStyle","strokeRect","radius","max","beginPath","arc","PI","stroke","closePath","width","height","ref","Fibonacci","initialParams","delay","maxTime"],"mappings":"gRAMO,IAAMA,EAAe,CAC1B,MAAS,aAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,mCACA,YAAC,IAAD,CAAWA,QAAQ,eAKvBH,EAAWI,gBAAiB,G,24BC3B5B,IAAMC,EAAM,GAAMC,KAAKC,KAAK,GAAK,EAE3BC,EAAI,CACRC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MAGL,SAASC,IACP,MAAO,CAAC,GAGV,SAASC,EAAT,GAAqC,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAC1B,GAAa,IAATA,EACF,MAAO,CAAC,GAEV,GAAa,IAATA,EACF,MAAO,CAAC,EAAG,GAEb,IAAMC,EAAaF,EAAKC,EAAO,GAAKD,EAAKC,EAAO,GAChD,MAAM,GAAN,SAAWD,GAAX,CAAiBE,IAGnB,IAAMC,EAAiB,SAAC,GAAsB,IAApBH,EAAmB,EAAnBA,KAAMI,EAAa,EAAbA,OACxBC,EAAYC,iBAAO,MACjBC,EAASH,EAATG,KAsDR,OApDAC,qBAAU,WACR,IACMC,EADSJ,EAAUK,QACNC,WAAW,MAE9BF,EAAIG,UAAY,OAChBH,EAAII,SAAS,EAAG,EAAGN,EAAMA,GAIzB,IAHA,IAAIO,EAAI,EACNC,EAAI,EACJC,EAAOT,EACAU,EAAI,EAAGA,EAAIjB,EAAKkB,OAAQD,IAAK,CACpC,IAAME,EAAI1B,EAAEwB,EAAI,GAChBD,GAAc1B,EACdmB,EAAIW,YAAc,OAClBX,EAAIY,WAAWP,EAAGC,EAAGC,EAAMA,GAC3BP,EAAIW,YAAc,OAElB,IAAME,EAAS/B,KAAKgC,IAAI,EAAGP,EAAO,GAClC,OAAQG,GACN,IAAK,QACHV,EAAIe,YACJf,EAAIgB,IAAIX,EAAIE,EAAMD,EAAIC,EAAMM,EAAQ/B,KAAKmC,IAAKnC,KAAKmC,GAAK,GACxDjB,EAAIkB,SACJlB,EAAImB,YACJd,GAAQE,EACR,MACF,IAAK,OACHP,EAAIe,YACJf,EAAIgB,IAAIX,EAAGC,EAAIC,EAAMM,GAAS/B,KAAKmC,GAAK,EAAG,GAC3CjB,EAAIkB,SACJlB,EAAImB,YACJd,IAAS,EAAI,EAAIxB,GAAO0B,EACxBD,GAAQC,EACR,MACF,IAAK,OACHP,EAAIe,YACJf,EAAIgB,IAAIX,EAAGC,EAAGO,EAAQ,EAAG/B,KAAKmC,GAAK,GACnCjB,EAAIkB,SACJlB,EAAImB,YACJd,GAAQE,EAAO1B,EACfyB,IAAS,EAAI,EAAIzB,GAAO0B,EACxB,MACF,IAAK,KACHP,EAAIe,YACJf,EAAIgB,IAAIX,EAAIE,EAAMD,EAAGO,EAAQ/B,KAAKmC,GAAK,EAAGnC,KAAKmC,IAC/CjB,EAAIkB,SACJlB,EAAImB,YACJb,GAAQC,EAAO1B,OAMhB,4BAAQuC,MAAOtB,EAAMuB,OAAQvB,EAAOjB,EAAKyC,IAAK1B,KAexC2B,IAZG,kBAChB,kBAAC,IAAD,CACEC,cAAe,CAAE1B,KAAM,KACvB2B,MAAO,IACPpC,SAAUA,EACVC,WAAYA,EACZoC,QAAS,IAET,kBAAChC,EAAD","file":"component---src-pages-examples-fibonacci-mdx-0e3b79606eafabbaabb7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Fibonacci from '../../components/examples/fibonacci';\nexport const _frontmatter = {\n  \"Title\": \"Fibonacci\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Fibonacci`}</h1>\n    <Fibonacci mdxType=\"Fibonacci\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { useRef, useEffect } from 'react';\nimport { Model } from 'react-sim';\nimport { Flex, Box } from 'rebass';\n\nconst phi = 0.5 + Math.sqrt(5) / 2;\n\nconst D = {\n  0: 'right',\n  1: 'down',\n  2: 'left',\n  3: 'up',\n};\n\nfunction initData() {\n  return [0];\n}\n\nfunction updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n\nconst FibonacciFrame = ({ data, params }) => {\n  const canvasRef = useRef(null);\n  const { size } = params;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.fillStyle = '#fff';\n    ctx.fillRect(0, 0, size, size);\n    let x = 0,\n      y = 0,\n      side = size;\n    for (let i = 0; i < data.length; i++) {\n      const d = D[i % 4];\n      side = side / phi;\n      ctx.strokeStyle = '#ddd';\n      ctx.strokeRect(x, y, side, side);\n      ctx.strokeStyle = '#222';\n\n      const radius = Math.max(0, side - 1);\n      switch (d) {\n        case 'right':\n          ctx.beginPath();\n          ctx.arc(x + side, y + side, radius, Math.PI, -Math.PI / 2);\n          ctx.stroke();\n          ctx.closePath();\n          x = x + side;\n          break;\n        case 'down':\n          ctx.beginPath();\n          ctx.arc(x, y + side, radius, -Math.PI / 2, 0);\n          ctx.stroke();\n          ctx.closePath();\n          x = x + (1 - 1 / phi) * side;\n          y = y + side;\n          break;\n        case 'left':\n          ctx.beginPath();\n          ctx.arc(x, y, radius, 0, Math.PI / 2);\n          ctx.stroke();\n          ctx.closePath();\n          x = x - side / phi;\n          y = y + (1 - 1 / phi) * side;\n          break;\n        case 'up':\n          ctx.beginPath();\n          ctx.arc(x + side, y, radius, Math.PI / 2, Math.PI);\n          ctx.stroke();\n          ctx.closePath();\n          y = y - side / phi;\n          break;\n      }\n    }\n  });\n\n  return <canvas width={size} height={size / phi} ref={canvasRef} />;\n};\n\nconst Fibonacci = () => (\n  <Model\n    initialParams={{ size: 500 }}\n    delay={100}\n    initData={initData}\n    updateData={updateData}\n    maxTime={20}\n  >\n    <FibonacciFrame />\n  </Model>\n);\n\nexport default Fibonacci;\n"],"sourceRoot":""}