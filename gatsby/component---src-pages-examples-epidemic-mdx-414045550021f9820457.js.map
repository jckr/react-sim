{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js","webpack:///./src/components/examples/epidemic.js","webpack:///./src/pages/examples/epidemic.mdx"],"names":["$export","abs","Math","S","hypot","value1","value2","arg","div","sum","i","aLen","arguments","length","larg","Infinity","sqrt","COLORS","sick","recovered","healthy","dead","updateEpidemic","data","tick","params","complete","updatedData","JSON","parse","stringify","nbSick","contaminationRisk","deathRisk","r","recoveryTicks","height","width","forEach","agent","status","recovery","random","j","otherAgent","dx","x","dy","y","distance","ax","ay","vx","vy","chooseMamongN","n","m","N","Array","keys","reduce","prev","curr","results","Set","k","floor","Object","add","findOverlaps","agents","point","x0","y0","slice","filter","initData","nbAgents","maxSpeed","nbDistancing","distancing","has","isDistancing","speed","push","isBouncing","EpidemicFrame","props","myRef","React","createRef","componentDidUpdate","this","ctx","current","getContext","fillStyle","lineWidth","clearRect","beginPath","arc","PI","closePath","fill","render","ref","style","cursor","background","padding","margin","onClick","Component","Epidemic","auto","initialParams","updateData","maxTime","_frontmatter","layoutProps","MDXContent","components","mdxType","isMDXComponent"],"mappings":"+EACA,IAAIA,EAAU,EAAQ,QAClBC,EAAMC,KAAKD,IAEfD,EAAQA,EAAQG,EAAG,OAAQ,CACzBC,MAAO,SAAeC,EAAQC,GAM5B,IALA,IAIIC,EAAKC,EAJLC,EAAM,EACNC,EAAI,EACJC,EAAOC,UAAUC,OACjBC,EAAO,EAEJJ,EAAIC,GAELG,GADJP,EAAMN,EAAIW,UAAUF,QAGlBD,EAAMA,GADND,EAAMM,EAAOP,GACKC,EAAM,EACxBM,EAAOP,GAGPE,GAFSF,EAAM,GACfC,EAAMD,EAAMO,GACCN,EACDD,EAEhB,OAAOO,IAASC,IAAWA,IAAWD,EAAOZ,KAAKc,KAAKP,O,uiCCnB3D,IAAMQ,EAAS,CACbC,KAAM,MACNC,UAAW,OACXC,QAAS,OACTC,KAAM,SAGD,SAASC,EAAT,GAA2D,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAC/CC,EAAcC,KAAKC,MAAMD,KAAKE,UAAUP,IACxCQ,EAAS,EAGXC,EAMEP,EANFO,kBACAC,EAKER,EALFQ,UACAC,EAIET,EAJFS,EACAC,EAGEV,EAHFU,cACAC,EAEEX,EAFFW,OACAC,EACEZ,EADFY,MAkFF,OA/EAV,EAAYW,SAAQ,SAACC,EAAO7B,GAY1B,GATqB,SAAjB6B,EAAMC,SACJhB,GAAQe,EAAME,SAChBF,EAAMC,OAAS,YAEXtC,KAAKwC,SAAWT,IAClBM,EAAMC,OAAS,SAIA,SAAjBD,EAAMC,OAAmB,CAG3B,IAAK,IAAIG,EAAIjC,EAAI,EAAGiC,EAAIhB,EAAYd,OAAQ8B,IAAK,CAC/C,IAAIC,EAAajB,EAAYgB,GACvBE,EAAKD,EAAWE,EAAIP,EAAMO,EAC1BC,EAAKH,EAAWI,EAAIT,EAAMS,EAC1BC,EAAW/C,KAAKE,MAAMyC,EAAIE,GAChC,GAAIE,EAAW,EAAIf,EAAG,CAGpB,IAAMgB,EAAKL,EAAKI,EACVE,EAAKJ,EAAKE,EAEhBV,EAAMa,GAAKb,EAAMa,GAAKF,EACtBX,EAAMc,GAAKd,EAAMc,GAAKF,EACtBP,EAAWQ,GAAKF,EAChBN,EAAWS,GAAKF,EAIK,SAAjBZ,EAAMC,QAA2C,YAAtBI,EAAWJ,QACpCtC,KAAKwC,UAAYV,IACnBY,EAAWJ,OAAS,OACpBI,EAAWH,SAAWjB,EAAOW,GAGZ,YAAjBI,EAAMC,QAA8C,SAAtBI,EAAWJ,QACvCtC,KAAKwC,UAAYV,IACnBO,EAAMC,OAAS,OACfD,EAAME,SAAWjB,EAAOW,IAQhCI,EAAMO,EAAIP,EAAMO,EAAIP,EAAMa,GAC1Bb,EAAMS,EAAIT,EAAMS,EAAIT,EAAMc,IAIvBd,EAAMc,GAAK,GAAKd,EAAMS,EAAId,GAC1BK,EAAMc,GAAK,GAAKd,EAAMS,EAAIZ,EAASF,KAEpCK,EAAMc,IAAMd,EAAMc,KAIjBd,EAAMa,GAAK,GAAKb,EAAMO,EAAIZ,GAC1BK,EAAMa,GAAK,GAAKb,EAAMO,EAAIT,EAAQH,KAEnCK,EAAMa,IAAMb,EAAMa,IAKC,SAAjBb,EAAMC,QACRT,QAIS,IAAXA,GACFL,IAGKC,EAGT,SAAS2B,EAAcC,EAAGC,GAOxB,IANA,IAAMC,EAAI,EAAIC,MAAMH,GAAGI,QAAQC,QAAO,SAACC,EAAMC,GAE3C,OADAD,EAAKC,IAAQ,EACND,IACN,IACGE,EAAU,IAAIC,IAEXtD,EAAI,EAAGA,EAAI8C,EAAG9C,IAAK,CAC1B,IAAMuD,EAAI/D,KAAKgE,MAAMhE,KAAKwC,SAAWyB,OAAOR,KAAKF,GAAG5C,QACpDkD,EAAQK,IAAIH,UACLR,EAAEQ,GAGX,OAAOF,EAGT,SAASM,EAAaC,EAAQ5D,EAAGwB,EAAGqC,GAAQ,IAC/BC,EAAcD,EAAjBzB,EAAU2B,EAAOF,EAAVvB,EAEf,OADesB,EAAOI,MAAMhE,GACdiE,QAAO,gBAAG7B,EAAH,EAAGA,EAAGE,EAAN,EAAMA,EAAN,OAAc9C,KAAKE,MAAM0C,EAAI0B,EAAIxB,EAAIyB,GAAMvC,KAGlE,SAAS0C,EAAT,GAeE,IAJE,IAAD,IAVDC,gBAUC,MAVU,IAUV,MATD9C,cASC,MATQ,EASR,MARD+C,gBAQC,MARU,GAQV,OAPD9C,kBAOC,EANDC,UAMC,EALDE,sBAKC,MALe,GAKf,MAJD4C,oBAIC,MAJc,GAId,MAHD7C,SAGC,MAHG,EAGH,MAFDE,cAEC,MAFQ,IAER,MADDC,aACC,MADO,IACP,EACKnB,EAAOoC,EAAcuB,EAAU9C,GAC/BiD,EAAa1B,EAAcuB,EAAUE,GACrCT,EAAS,GACN5D,EAAI,EAAGA,EAAImE,EAAUnE,IAAK,CACjC,IAAIoC,OAAC,EAAEE,OAAC,EAER,GACEA,EAAId,EAAI,EAAIhC,KAAKwC,UAAYN,EAASF,GACtCY,EAAIZ,EAAI,EAAIhC,KAAKwC,UAAYL,EAAQH,SAC9BmC,EAAaC,EAAQ,EAAGpC,EAAG,CAAEY,IAAGE,MAAKnC,QAE9C,IAAM2B,EAAStB,EAAK+D,IAAIvE,GAAK,OAAS,UAChC+B,EAAWvB,EAAK+D,IAAIvE,GAAKyB,EAAgB,KACzC+C,EAAeF,EAAWC,IAAIvE,GAC9ByE,EAAQD,EAAe,EAAIJ,EAC3B1B,EAAK+B,GAAyB,EAAhBjF,KAAKwC,SAAe,GAClCW,EAAK8B,GAAyB,EAAhBjF,KAAKwC,SAAe,GAGxC4B,EAAOc,KAAK,CACVtC,IACAE,IACAR,SACA6C,YANiB,EAOjBH,eACA9B,KACAC,KACAZ,WACA0C,UAGJ,OAAOb,EAGF,IAAMgB,EAAb,Y,QACE,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQC,IAAMC,YAFF,E,EADrB,G,EAAA,G,6EAAA,2BAKEC,mBAAA,WAAsB,IAAD,EAIfC,KAAKL,MAFPhE,EAFiB,EAEjBA,KAFiB,IAGjBE,OAAUY,EAHO,EAGPA,MAAOD,EAHA,EAGAA,OAAQF,EAHR,EAGQA,EAGrB2D,EADSD,KAAKJ,MAAMM,QACPC,WAAW,MAC9BF,EAAIG,UAAY,OAChBH,EAAII,UAAY,MAChBJ,EAAIK,UAAU,EAAG,EAAG7D,EAAOD,GAC3Bb,EAAKe,SAAQ,YAAmC,IAAhCE,EAA+B,EAA/BA,OAAoBM,GAAW,EAAvBuC,WAAuB,EAAXvC,GAAGE,EAAQ,EAARA,EACrC6C,EAAIM,YACJN,EAAIG,UAAY/E,EAAOuB,GACvBqD,EAAIO,IAAItD,EAAGE,EAAGd,EAAG,EAAG,EAAIhC,KAAKmG,IAAI,GACjCR,EAAIS,YACJT,EAAIU,WApBV,EAuBEC,OAAA,WACE,OACE,6BACE,4BACEnE,MAAOuD,KAAKL,MAAM9D,OAAOY,MACzBD,OAAQwD,KAAKL,MAAM9D,OAAOW,OAC1BqE,IAAKb,KAAKJ,QAEZ,yBACEkB,MAAO,CACLC,OAAQ,UACRC,WAAY,OACZC,QAAS,MACTC,OAAQ,gBACRzE,MAAO,eAET0E,QAASnB,KAAKL,MAAMX,UARtB,eA/BR,GAAmCa,IAAMuB,WAuE1BC,EAvBE,kBACf,kBAAC,IAAD,CACEC,KAAK,QACLtC,SAAUA,EACVuC,cAAe,CACbtC,SAAU,IACV9C,OAAQ,GACRC,kBAAmB,EACnBC,UAAW,KACX6C,SAAU,EACV3C,cAAe,IACf4C,aAAc,EACd7C,EAAG,EACHE,OAAQ,IACRC,MAAO,KAET+E,WAAY9F,EACZ+F,QAAStG,KAET,kBAAC,EAAD,QC1OG,IAAMuG,EAAe,CAC1B,MAAS,YAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGlC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAegC,EAAiBhC,EAAhC,CAAuCkC,WAAYA,EAAYC,QAAQ,cAE5E,kCACA,YAAC,EAAD,CAAUA,QAAQ,aAClB,gCACA,8HAKJF,EAAWG,gBAAiB","file":"component---src-pages-examples-epidemic-mdx-414045550021f9820457.js","sourcesContent":["// 20.2.2.17 Math.hypot([value1[, value2[, â€¦ ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import React from \"react\";\nimport { FlexRow, FlexColumn, Model } from \"react-sim\";\n\nconst COLORS = {\n  sick: \"red\",\n  recovered: \"gold\",\n  healthy: \"blue\",\n  dead: \"black\"\n};\n\nexport function updateEpidemic({ data, tick, params, complete }) {\n  let updatedData = JSON.parse(JSON.stringify(data));\n  let nbSick = 0;\n\n  const {\n    contaminationRisk,\n    deathRisk,\n    r,\n    recoveryTicks,\n    height,\n    width\n  } = params;\n\n  updatedData.forEach((agent, i) => {\n    // update status\n\n    if (agent.status === \"sick\") {\n      if (tick >= agent.recovery) {\n        agent.status = \"recovered\";\n      } else {\n        if (Math.random() < deathRisk) {\n          agent.status = \"dead\";\n        }\n      }\n    }\n    if (agent.status !== \"dead\") {\n      // checking for collisions\n\n      for (let j = i + 1; j < updatedData.length; j++) {\n        let otherAgent = updatedData[j];\n        const dx = otherAgent.x - agent.x;\n        const dy = otherAgent.y - agent.y;\n        const distance = Math.hypot(dx, dy);\n        if (distance < 2 * r) {\n          // collision\n\n          const ax = dx / distance;\n          const ay = dy / distance;\n\n          agent.vx = agent.vx - ax;\n          agent.vy = agent.vy - ay;\n          otherAgent.vx = ax;\n          otherAgent.vy = ay;\n\n          // test for contagion\n\n          if (agent.status === \"sick\" && otherAgent.status === \"healthy\") {\n            if (Math.random() <= contaminationRisk) {\n              otherAgent.status = \"sick\";\n              otherAgent.recovery = tick + recoveryTicks;\n            }\n          }\n          if (agent.status === \"healthy\" && otherAgent.status === \"sick\") {\n            if (Math.random() <= contaminationRisk) {\n              agent.status = \"sick\";\n              agent.recovery = tick + recoveryTicks;\n            }\n          }\n        }\n      }\n\n      // now move\n\n      agent.x = agent.x + agent.vx;\n      agent.y = agent.y + agent.vy;\n\n      // bouncing on walls\n      if (\n        (agent.vy < 0 && agent.y < r) ||\n        (agent.vy > 0 && agent.y > height - r)\n      ) {\n        agent.vy = -agent.vy;\n      }\n\n      if (\n        (agent.vx < 0 && agent.x < r) ||\n        (agent.vx > 0 && agent.x > width - r)\n      ) {\n        agent.vx = -agent.vx;\n      }\n\n      // counting sick agents\n\n      if (agent.status === \"sick\") {\n        nbSick++;\n      }\n    }\n  });\n  if (nbSick === 0) {\n    complete();\n  }\n\n  return updatedData;\n}\n\nfunction chooseMamongN(n, m) {\n  const N = [...Array(n).keys()].reduce((prev, curr) => {\n    prev[curr] = true;\n    return prev;\n  }, {});\n  const results = new Set();\n\n  for (let i = 0; i < m; i++) {\n    const k = Math.floor(Math.random() * Object.keys(N).length);\n    results.add(k);\n    delete N[k];\n  }\n\n  return results;\n}\n\nfunction findOverlaps(agents, i, r, point) {\n  const { x: x0, y: y0 } = point;\n  const domain = agents.slice(i);\n  return domain.filter(({ x, y }) => Math.hypot(x - x0, y - y0) < r);\n}\n\nfunction initData({\n  nbAgents = 200,\n  nbSick = 5,\n  maxSpeed = 30,\n  contaminationRisk = 1,\n  deathRisk = 0.005,\n  recoveryTicks = 20,\n  nbDistancing = 50,\n  r = 3,\n  height = 300,\n  width = 400\n}) {\n  const sick = chooseMamongN(nbAgents, nbSick);\n  const distancing = chooseMamongN(nbAgents, nbDistancing);\n  const agents = [];\n  for (let i = 0; i < nbAgents; i++) {\n    let x, y;\n\n    do {\n      y = r / 2 + Math.random() * (height - r);\n      x = r / 2 + Math.random() * (width - r);\n    } while (findOverlaps(agents, 0, r, { x, y }).length);\n\n    const status = sick.has(i) ? \"sick\" : \"healthy\";\n    const recovery = sick.has(i) ? recoveryTicks : null;\n    const isDistancing = distancing.has(i);\n    const speed = isDistancing ? 0 : maxSpeed;\n    const vx = speed * (Math.random() * 2 - 1);\n    const vy = speed * (Math.random() * 2 - 1);\n    const isBouncing = false;\n\n    agents.push({\n      x,\n      y,\n      status,\n      isBouncing,\n      isDistancing,\n      vx,\n      vy,\n      recovery,\n      speed\n    });\n  }\n  return agents;\n}\n\nexport class EpidemicFrame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  componentDidUpdate() {\n    const {\n      data,\n      params: { width, height, r }\n    } = this.props;\n    const canvas = this.myRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"#fff\";\n    ctx.lineWidth = '5px';\n    ctx.clearRect(0, 0, width, height);\n    data.forEach(({ status, isBouncing, x, y }) => {\n      ctx.beginPath();\n      ctx.fillStyle = COLORS[status];\n      ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n      ctx.closePath();\n      ctx.fill();\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas\n          width={this.props.params.width}\n          height={this.props.params.height}\n          ref={this.myRef}\n        />\n        <div\n          style={{\n            cursor: \"pointer\",\n            background: \"#eee\",\n            padding: \"8px\",\n            margin: \"8px 8px 8px 0\",\n            width: \"fit-content\"\n          }}\n          onClick={this.props.initData}\n        >\n          Reset sim\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Epidemic = () => (\n  <Model\n    auto=\"false\"\n    initData={initData}\n    initialParams={{\n      nbAgents: 500,\n      nbSick: 20,\n      contaminationRisk: 1,\n      deathRisk: 0.001,\n      maxSpeed: 2,\n      recoveryTicks: 200,\n      nbDistancing: 0,\n      r: 3,\n      height: 300,\n      width: 400\n    }}\n    updateData={updateEpidemic}\n    maxTime={Infinity}\n  >\n    <EpidemicFrame />\n  </Model>\n);\n\nexport default Epidemic;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Epidemic from '../../components/examples/epidemic';\nexport const _frontmatter = {\n  \"Title\": \"Epidemic\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Epidemic`}</h1>\n    <Epidemic mdxType=\"Epidemic\" />\n    <h3>{`Caveat`}</h3>\n    <p>{`The purpose of this model is just to show how simulations work in React. It has no scientific value.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}