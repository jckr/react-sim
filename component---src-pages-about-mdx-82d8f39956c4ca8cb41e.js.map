{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js","webpack:///./src/components/examples/boids.js","webpack:///./src/pages/about.mdx"],"names":["$export","abs","Math","S","hypot","value1","value2","arg","div","sum","i","aLen","arguments","length","larg","Infinity","sqrt","params","alignmentCoefficient","alignmentDistance","cohesionCoefficient","cohesionDistance","height","maxforce","maxspeed","nbBoids","r","separationCoefficient","separationDistance","showCircles","width","normalize","v","l","mult","k","map","d","add","v0","v1","sub","limit","force","limitedForce","min","initData","random","Array","fill","angle","PI","velocity","cos","sin","acceleration","position","updateData","data","separation","alignment","cohesion","forEach","boid","countSeparation","countAlignment","countCohesion","j","otherBoid","positionDifference","distanceBetweenBoids","diff","seek","atan2","target","desired","steer","draw","ctx","circle","fillStyle","fillRect","x","y","strokeStyle","globalAlpha","beginPath","moveTo","lineTo","closePath","stroke","Frame","props","ChillBoids","initialParams","isPlaying","maxTime","noCache","noControls","Boids","nocache","controls","param","label","minValue","maxValue","step","type","_frontmatter","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-about-mdx-82d8f39956c4ca8cb41e.js","sourcesContent":["// 20.2.2.17 Math.hypot([value1[, value2[, â€¦ ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const params = {\n  alignmentCoefficient: 1,\n  alignmentDistance: 50,\n  cohesionCoefficient: 1,\n  cohesionDistance: 40,\n  height: 332,\n  maxforce: 0.03,\n  maxspeed: 2,\n  nbBoids: 50,\n  r: 5,\n  separationCoefficient: 1.5,\n  separationDistance: 25,\n  showCircles: true,\n  width: 332,\n};\n\n// helpers\n\nexport const normalize = v => {\n  const l = Math.hypot(...v);\n  if (l === 0) {\n    return v;\n  }\n  return div(v, l);\n};\n\nexport const mult = (v, k) => v.map(d => d * k);\nexport const div = (v, k) => v.map(d => d / k);\n\nexport const add = (v0, v1) => v0.map((d, i) => d + v1[i]);\nexport const sub = (v0, v1) => v0.map((d, i) => d - v1[i]);\n\nexport const limit = (v, k) => {\n  const force = Math.hypot(...v);\n  const limitedForce = Math.min(force, k);\n  return div(v, force / limitedForce);\n};\n\nexport const initData = ({ height, nbBoids, width }, random = Math.random) => {\n  const boids = Array(nbBoids)\n    .fill(0)\n    .map(d => {\n      const angle = random() * 2 * Math.PI;\n      const velocity = [Math.cos(angle), Math.sin(angle)];\n      const boid = {\n        angle,\n        acceleration: [0, 0],\n        position: [random() * width, random() * height],\n        velocity,\n      };\n      return boid;\n    });\n  return boids;\n};\n\nexport const updateData = ({ data, params }) => {\n  const {\n    alignmentDistance,\n    cohesionDistance,\n    separationCoefficient,\n    alignmentCoefficient,\n    cohesionCoefficient,\n    separationDistance,\n    maxspeed,\n    maxforce,\n    r,\n    height,\n    width,\n  } = params;\n\n  const separation = data.map(d => [0, 0]);\n  const alignment = data.map(d => [0, 0]);\n  const cohesion = data.map(d => [0, 0]);\n\n  data.forEach((boid, i) => {\n    let countSeparation = 0;\n    let countAlignment = 0;\n    let countCohesion = 0;\n\n    for (let j = 0; j < data.length; j++) {\n      if (j !== i) {\n        const otherBoid = data[j];\n        const positionDifference = sub(boid.position, otherBoid.position);\n        const distanceBetweenBoids = Math.hypot(...positionDifference);\n\n        // separation\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < separationDistance\n        ) {\n          const diff = div(normalize(positionDifference), distanceBetweenBoids);\n          separation[i] = add(separation[i], diff);\n          countSeparation++;\n        }\n\n        // alignment\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < alignmentDistance\n        ) {\n          alignment[i] = add(alignment[i], otherBoid.velocity);\n          countAlignment++;\n        }\n\n        // cohesion\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < cohesionDistance\n        ) {\n          cohesion[i] = add(cohesion[i], otherBoid.position);\n          countCohesion++;\n        }\n      }\n    }\n\n    // separation\n\n    if (countSeparation > 0) {\n      separation[i] = div(separation[i], countSeparation);\n      separation[i] = normalize(separation[i]);\n      separation[i] = mult(separation[i], maxspeed);\n      separation[i] = sub(separation[i], boid.velocity);\n      separation[i] = limit(separation[i], maxforce);\n      separation[i] = mult(separation[i], separationCoefficient);\n    }\n\n    // alignment\n    if (countAlignment > 0) {\n      alignment[i] = div(alignment[i], countAlignment);\n      alignment[i] = normalize(alignment[i]);\n      alignment[i] = mult(alignment[i], maxspeed);\n      alignment[i] = sub(alignment[i], boid.velocity);\n      alignment[i] = limit(alignment[i], maxforce);\n      alignment[i] = mult(alignment[i], alignmentCoefficient);\n    }\n\n    // cohesion\n    if (countCohesion > 0) {\n      cohesion[i] = div(cohesion[i], countCohesion);\n      cohesion[i] = seek(\n        boid.position,\n        cohesion[i],\n        boid.velocity,\n        maxspeed,\n        maxforce\n      );\n      cohesion[i] = mult(cohesion[i], cohesionCoefficient);\n    }\n  });\n\n  return data.map((boid, i) => {\n    // applying all three forces\n    const acceleration = add(add(alignment[i], cohesion[i]), separation[i]);\n    const velocity = limit(add(boid.velocity, acceleration), maxspeed);\n    const position = add(boid.position, velocity);\n    const angle = Math.atan2(boid.velocity[1], boid.velocity[0]);\n    // wraparound\n\n    if (position[0] < -r) {\n      position[0] = width + r;\n    }\n    if (position[0] > width + r) {\n      position[0] = -r;\n    }\n    if (position[1] < -r) {\n      position[1] = height + r;\n    }\n    if (position[1] > height + r) {\n      position[1] = -r;\n    }\n    return {\n      ...boid,\n      angle,\n      position,\n      velocity,\n    };\n  });\n};\n\nexport const seek = (position, target, velocity, maxspeed, maxforce) => {\n  const desired = mult(normalize(sub(target, position)), maxspeed);\n  const steer = sub(desired, velocity);\n  return limit(steer, maxforce);\n};\n\nexport const draw = ({\n  ctx,\n  circle,\n  data,\n  params: {\n    alignmentDistance,\n    cohesionDistance,\n    separationDistance,\n    height,\n    showCircles,\n    width,\n    r,\n  },\n}) => {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, width, height);\n  data.forEach(({ position: [x, y], angle }) => {\n    ctx.strokeStyle = '#000';\n    ctx.globalAlpha = 1;\n    ctx.beginPath();\n    ctx.moveTo(x + Math.cos(angle) * r, y + Math.sin(angle) * r);\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 2) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 2) / 3) * r * 2) / 3\n    );\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 4) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 4) / 3) * r * 2) / 3\n    );\n    ctx.closePath();\n    ctx.stroke();\n    if (showCircles) {\n      ctx.globalAlpha = 0.2;\n      ctx.strokeStyle = '#f00';\n      circle({ x, y, r: separationDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#0f0';\n      circle({ x, y, r: alignmentDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#00f';\n      circle({ x, y, r: cohesionDistance });\n      ctx.closePath();\n      ctx.stroke();\n    }\n  });\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Boids = () => (\n  <Model\n    initialParams={params}\n    maxTime={Infinity}\n    nocache\n    initData={initData}\n    updateData={updateData}\n    controls={[\n      [\n        {\n          param: 'alignmentCoefficient',\n          label: 'Alignment',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'alignmentDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'cohesionCoefficient',\n          label: 'Cohesion',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'cohesionDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'separationCoefficient',\n          label: 'Separation',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'separationDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      {\n        param: 'showCircles',\n        label: 'Show circles:',\n        type: 'toggle',\n      },\n    ]}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const ChillBoids = () => (\n  <Model\n    initialParams={params}\n    isPlaying\n    maxTime={Infinity}\n    noCache\n    noControls\n    initData={initData}\n    updateData={updateData}\n  >\n    <Frame />\n  </Model>\n);\nexport default Boids;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { ChillBoids } from '../components/examples/boids';\nexport const _frontmatter = {\n  \"Title\": \"what is React-Sim?\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`React-sim is a framework for building and rendering simulations using React.`}</p>\n    <ChillBoids mdxType=\"ChillBoids\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/react-sim/examples/boids\"\n      }}>{`Boids example`}</a></p>\n    <p>{`Simulations may have:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`a data model, with rules to initialize it and update it,`}</li>\n      <li parentName=\"ul\">{`a way to render them visually,`}</li>\n      <li parentName=\"ul\">{`logic to animate the model over time,`}</li>\n      <li parentName=\"ul\">{`a UI to let a user control it.`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` lets developers work on all of these things separately and provides building blocks to get the common tasks out of the way.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}