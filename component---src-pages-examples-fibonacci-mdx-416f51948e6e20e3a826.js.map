{"version":3,"sources":["webpack:///./src/pages/examples/fibonacci.mdx","webpack:///./src/components/examples/fibonacci.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","phi","Math","sqrt","D","0","1","2","3","colors","right","down","left","up","initData","updateData","data","tick","lastNumber","FibonacciSpiralFrame","params","canvasRef","useRef","size","useEffect","ctx","current","getContext","fillStyle","fillRect","x","y","side","i","d","strokeStyle","strokeRect","radius","max","beginPath","arc","PI","stroke","closePath","width","height","ref","FibonacciSpiral","initialParams","delay","maxTime","FibonacciSquaresFrame","maxX","minX","maxY","minY","sequence","squares","slice","map","n","direction","borderWidth","fontSize","String","length","square","key","style","position","border","boxSizing","display","alignItems","justifyContent","background","top","overflow","borderRadius","transform","undefined","min","maxSide","scale","pointerEvents","transformOrigin","transition","FibonacciSquares"],"mappings":"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","file":"component---src-pages-examples-fibonacci-mdx-416f51948e6e20e3a826.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { FibonacciSpiral, FibonacciSquares } from '../../components/examples/fibonacci';\nexport const _frontmatter = {\n  \"Title\": \"Fibonacci\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Fibonacci sequence`}</h1>\n    <p>{`Both of these examples are inspired by the Fibonacci sequence, where:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`F`}<sub>{`0`}</sub>{` = 0,`}</li>\n      <li parentName=\"ul\">{`F`}<sub>{`1`}</sub>{` = 1,`}</li>\n      <li parentName=\"ul\">{`F`}<sub>{`n`}</sub>{` = F`}<sub>{`n - 1`}</sub>{` + F`}<sub>{`n - 2`}</sub>{` for each n > 2.`}</li>\n    </ul>\n    <p>{`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...`}</p>\n    <FibonacciSquares mdxType=\"FibonacciSquares\" />\n    <p>{`The corresponding `}<inlineCode parentName=\"p\">{`udpateData`}</inlineCode>{` function is really simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n`}</code></pre>\n    <p>{`We can draw squares with sides corresponding to the number in the sequence:`}</p>\n    <p>{`Joining their corners, they form a spiral.`}</p>\n    <p>{`F`}<sub>{`n`}</sub>{` / F`}<sub>{`n-1`}</sub>{` converges to φ, the golden ratio - (1 - √5) / 2.`}</p>\n    <p>{`We can start from a rectangle φ * k by k rectangle, divide its longer side by φ, draw that square, and keep on dividing the remaining rectangle.\nWe'll have squares of same proportions and can also draw a similar spiral.`}</p>\n    <FibonacciSpiral mdxType=\"FibonacciSpiral\" />\n    <p>{`In this case, we don't even need to provide data, an initData or an updateData function.\nAll we need is the number of steps we want to go (tick) and a Frame to render the squares and spiral.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const FibonacciSpiral = () => (\n  <Model initialParams={{ size: 500 }} delay={100} maxTime={20}>\n    <FibonacciSpiralFrame />\n  </Model>\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { useRef, useEffect } from 'react';\nimport { Model } from 'react-sim';\nimport { Flex, Box } from 'rebass';\n\nconst phi = 0.5 + Math.sqrt(5) / 2;\n\nconst D = {\n  0: 'right',\n  1: 'down',\n  2: 'left',\n  3: 'up',\n};\n\nconst colors = {\n  right: '#b6b6e2',\n  down: '#a6d3d9',\n  left: '#ffeb3b',\n  up: '#95d392',\n};\n\nfunction initData() {\n  return [0];\n}\n\nfunction updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n\nconst FibonacciSpiralFrame = ({ tick, params }) => {\n  const canvasRef = useRef(null);\n  const { size } = params;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.fillStyle = '#fff';\n    ctx.fillRect(0, 0, size, size);\n    let x = 0,\n      y = 0,\n      side = size;\n    for (let i = 0; i < tick; i++) {\n      const d = D[i % 4];\n      side = side / phi;\n      ctx.strokeStyle = '#ddd';\n      ctx.strokeRect(x, y, side, side);\n      ctx.strokeStyle = '#222';\n\n      const radius = Math.max(0, side - 1);\n      switch (d) {\n        case 'right':\n          ctx.beginPath();\n          ctx.arc(x + side, y + side, radius, Math.PI, -Math.PI / 2);\n          ctx.stroke();\n          ctx.closePath();\n          x = x + side;\n          break;\n        case 'down':\n          ctx.beginPath();\n          ctx.arc(x, y + side, radius, -Math.PI / 2, 0);\n          ctx.stroke();\n          ctx.closePath();\n          x = x + (1 - 1 / phi) * side;\n          y = y + side;\n          break;\n        case 'left':\n          ctx.beginPath();\n          ctx.arc(x, y, radius, 0, Math.PI / 2);\n          ctx.stroke();\n          ctx.closePath();\n          x = x - side / phi;\n          y = y + (1 - 1 / phi) * side;\n          break;\n        case 'up':\n          ctx.beginPath();\n          ctx.arc(x + side, y, radius, Math.PI / 2, Math.PI);\n          ctx.stroke();\n          ctx.closePath();\n          y = y - side / phi;\n          break;\n      }\n    }\n  });\n\n  return <canvas width={size} height={size / phi} ref={canvasRef} />;\n};\n\nconst FibonacciSpiral = () => (\n  <Model initialParams={{ size: 500 }} delay={100} maxTime={15}>\n    <FibonacciSpiralFrame />\n  </Model>\n);\n\nconst FibonacciSquaresFrame = ({ data, tick, params }) => {\n  let maxX = 0,\n    minX = 0,\n    maxY = 0,\n    minY = 0,\n    x = 0,\n    y = 0;\n  function renderSquares(sequence) {\n    return sequence.map((d, i) => {\n      const n = d * 10;\n      const direction = D[i % 4];\n      switch (direction) {\n        case 'right':\n          y = y - n;\n          break;\n        case 'left':\n          x = x - n;\n          break;\n        case 'up':\n          x = x - n;\n          y = y - n;\n          break;\n      }\n      const borderWidth = Math.max(\n        0.1,\n        i < 2 ? 1 / params.size : 1 / (n + 10 * sequence[i - 1])\n      );\n\n      const fontSize = n / (1.5 * String(d).length);\n\n      const square = (\n        <div\n          key={`rect-${i}`}\n          style={{\n            position: 'absolute',\n            border: `#{borderWidth}px solid #777`,\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: colors[direction],\n            top: y,\n            left: x,\n            width: n,\n            height: n,\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            style={{\n              fontSize,\n            }}\n          >\n            {d}\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              width: 2 * n,\n              height: 2 * n,\n              border: `${borderWidth}px solid black`,\n              borderRadius: n,\n              boxSizing: 'border-box',\n              top: 0,\n              left: 0,\n              transform: {\n                right: undefined,\n                down: 'translate(-50%)',\n                left: 'translate(-50%,-50%)',\n                up: 'translate(0,-50%)',\n              }[direction],\n            }}\n          />\n        </div>\n      );\n      switch (direction) {\n        case 'right':\n          x = x + n;\n          break;\n        case 'down':\n          x = x + n;\n          y = y + n;\n          break;\n        case 'left':\n          y = y + n;\n          break;\n      }\n      maxX = Math.max(maxX, x);\n      minX = Math.min(minX, x);\n      maxY = Math.max(maxY, y);\n      minY = Math.min(minY, y);\n      return square;\n    });\n  }\n\n  const squares = renderSquares(data.slice(1));\n  const maxSide = Math.max(maxX - minX, maxY - minY);\n  const scale = params.size / maxSide;\n\n  return (\n    <div\n      style={{\n        width: params.size,\n        height: params.size,\n        position: 'relative',\n        pointerEvents: 'none',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          transformOrigin: 'top left',\n          transform: `scale(${scale}) translate(${-minX}px,${-minY}px)`,\n          width: `${maxX - minX}px`,\n          height: `${maxY - minY}px`,\n          transition: 'transform 0.2s',\n        }}\n      >\n        {squares}\n      </div>\n    </div>\n  );\n};\n\nconst FibonacciSquares = () => (\n  <Model\n    initialParams={{ size: 500 }}\n    initData={initData}\n    updateData={updateData}\n    delay={400}\n    maxTime={16}\n  >\n    <FibonacciSquaresFrame />\n  </Model>\n);\n\nexport { FibonacciSpiral, FibonacciSquares };\n"],"sourceRoot":""}