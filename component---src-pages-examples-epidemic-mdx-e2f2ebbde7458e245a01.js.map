{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js","webpack:///./src/components/examples/epidemic.js","webpack:///./src/pages/examples/epidemic.mdx"],"names":["$export","abs","Math","S","hypot","value1","value2","arg","div","sum","i","aLen","arguments","length","larg","Infinity","sqrt","COLORS","sick","recovered","healthy","dead","updateEpidemic","random","data","tick","params","complete","updatedData","JSON","parse","stringify","agents","nbSick","nbHealthy","nbDead","nbRecovered","contaminationRisk","deathRisk","r","recoveryTicks","height","width","forEach","agent","status","recovery","j","otherAgent","dx","x","dy","y","distance","ax","ay","vx","vy","chooseMamongN","n","m","N","Array","keys","reduce","prev","curr","results","Set","k","floor","Object","add","findOverlaps","point","x0","y0","slice","filter","initData","nbAgents","maxSpeed","nbDistancing","distancing","has","isDistancing","speed","push","isBouncing","EpidemicFrame","props","myRef","React","createRef","componentDidUpdate","this","ctx","current","getContext","fillStyle","lineWidth","clearRect","beginPath","arc","PI","closePath","fill","render","ref","Component","ConnectedFrame","withFrame","series","color","label","accessor","d","Epidemic","auto","initialParams","updateData","maxTime","flexDirection","stacked","_frontmatter","layoutProps","MDXContent","components","mdxType","isMDXComponent"],"mappings":"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","file":"component---src-pages-examples-epidemic-mdx-e2f2ebbde7458e245a01.js","sourcesContent":["// 20.2.2.17 Math.hypot([value1[, value2[, â€¦ ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import React, { useRef, useEffect } from 'react';\nimport { Flex } from 'rebass';\nimport { Model, TimeSeries, Counter, withFrame } from 'react-sim';\n\nconst COLORS = {\n  sick: '#4f8c9d',\n  recovered: '#add51f',\n  healthy: '#997cfb',\n  dead: '#6a9012',\n};\n\nexport function updateEpidemic(\n  { data, tick, params, complete },\n  random = Math.random()\n) {\n  let updatedData = JSON.parse(JSON.stringify(data.agents));\n  let nbSick = 0,\n    nbHealthy = 0,\n    nbDead = 0,\n    nbRecovered = 0;\n\n  const {\n    contaminationRisk,\n    deathRisk,\n    r,\n    recoveryTicks,\n    height,\n    width,\n  } = params;\n\n  updatedData.forEach((agent, i) => {\n    // update status\n\n    if (agent.status === 'sick') {\n      if (tick >= agent.recovery) {\n        agent.status = 'recovered';\n      } else {\n        if (random() < deathRisk) {\n          agent.status = 'dead';\n        }\n      }\n    }\n    if (agent.status !== 'dead') {\n      // checking for collisions\n\n      for (let j = i + 1; j < updatedData.length; j++) {\n        let otherAgent = updatedData[j];\n        const dx = otherAgent.x - agent.x;\n        const dy = otherAgent.y - agent.y;\n        const distance = Math.hypot(dx, dy);\n        if (distance < 2 * r) {\n          // collision\n\n          const ax = dx / distance;\n          const ay = dy / distance;\n\n          agent.vx = agent.vx - ax;\n          agent.vy = agent.vy - ay;\n          otherAgent.vx = ax;\n          otherAgent.vy = ay;\n\n          // test for contagion\n\n          if (agent.status === 'sick' && otherAgent.status === 'healthy') {\n            if (random() <= contaminationRisk) {\n              otherAgent.status = 'sick';\n              otherAgent.recovery = tick + recoveryTicks;\n            }\n          }\n          if (agent.status === 'healthy' && otherAgent.status === 'sick') {\n            if (random() <= contaminationRisk) {\n              agent.status = 'sick';\n              agent.recovery = tick + recoveryTicks;\n            }\n          }\n        }\n      }\n\n      // now move\n\n      agent.x = agent.x + agent.vx;\n      agent.y = agent.y + agent.vy;\n\n      // bouncing on walls\n      if (\n        (agent.vy < 0 && agent.y < r) ||\n        (agent.vy > 0 && agent.y > height - r)\n      ) {\n        agent.vy = -agent.vy;\n      }\n\n      if (\n        (agent.vx < 0 && agent.x < r) ||\n        (agent.vx > 0 && agent.x > width - r)\n      ) {\n        agent.vx = -agent.vx;\n      }\n    }\n    // counting agents\n    switch (agent.status) {\n      case 'sick':\n        nbSick++;\n        break;\n      case 'healthy':\n        nbHealthy++;\n        break;\n      case 'recovered':\n        nbRecovered++;\n        break;\n      case 'dead':\n        nbDead++;\n    }\n  });\n  if (nbSick === 0) {\n    complete();\n  }\n\n  return {\n    agents: updatedData,\n    sick: nbSick,\n    recovered: nbRecovered,\n    dead: nbDead,\n    healthy: nbHealthy,\n  };\n}\n\nfunction chooseMamongN(n, m, random) {\n  const N = [...Array(n).keys()].reduce((prev, curr) => {\n    prev[curr] = true;\n    return prev;\n  }, {});\n  const results = new Set();\n\n  for (let i = 0; i < m; i++) {\n    const k = Math.floor(random * Object.keys(N).length);\n    results.add(k);\n    delete N[k];\n  }\n\n  return results;\n}\n\nfunction findOverlaps(agents, i, r, point) {\n  const { x: x0, y: y0 } = point;\n  const domain = agents.slice(i);\n  return domain.filter(({ x, y }) => Math.hypot(x - x0, y - y0) < r);\n}\n\nexport function initData(\n  {\n    nbAgents = 200,\n    nbSick = 5,\n    maxSpeed = 30,\n    contaminationRisk = 1,\n    deathRisk = 0.005,\n    recoveryTicks = 20,\n    nbDistancing = 50,\n    r = 3,\n    height = 300,\n    width = 400,\n  },\n  random = Math.random\n) {\n  const sick = chooseMamongN(nbAgents, nbSick, random);\n  const distancing = chooseMamongN(nbAgents, nbDistancing, random);\n  const agents = [];\n\n  for (let i = 0; i < nbAgents; i++) {\n    let x, y;\n\n    do {\n      y = r / 2 + random() * (height - r);\n      x = r / 2 + random() * (width - r);\n    } while (findOverlaps(agents, 0, r, { x, y }).length);\n\n    const status = sick.has(i) ? 'sick' : 'healthy';\n\n    const recovery = sick.has(i) ? recoveryTicks : null;\n    const isDistancing = distancing.has(i);\n    const speed = isDistancing ? 0 : maxSpeed;\n    const vx = speed * (random() * 2 - 1);\n    const vy = speed * (random() * 2 - 1);\n    const isBouncing = false;\n\n    agents.push({\n      x,\n      y,\n      status,\n      isBouncing,\n      isDistancing,\n      vx,\n      vy,\n      recovery,\n      speed,\n    });\n  }\n  return {\n    agents,\n    sick: nbSick,\n    healthy: nbAgents - nbSick,\n    dead: 0,\n    recovered: 0,\n  };\n}\n\nexport class EpidemicFrame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  componentDidUpdate() {\n    const {\n      data,\n      params: { width, height, r },\n    } = this.props;\n    const canvas = this.myRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#fff';\n    ctx.lineWidth = '5px';\n    ctx.clearRect(0, 0, width, height);\n    data.agents.forEach(({ status, isBouncing, x, y }) => {\n      ctx.beginPath();\n      ctx.fillStyle = COLORS[status];\n      ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n      ctx.closePath();\n      ctx.fill();\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas\n          width={this.props.params.width}\n          height={this.props.params.height}\n          ref={this.myRef}\n        />\n      </div>\n    );\n  }\n}\n\nconst ConnectedFrame = withFrame(EpidemicFrame);\n\nconst series = [\n  {\n    color: COLORS['healthy'],\n    label: 'Healthy',\n    accessor: d => d.healthy,\n  },\n  {\n    color: COLORS['sick'],\n    label: 'Sick',\n    accessor: d => d.sick,\n  },\n  {\n    color: COLORS['recovered'],\n    label: 'Recovered',\n    accessor: d => d.recovered,\n  },\n  {\n    color: COLORS['dead'],\n    label: 'Dead',\n    accessor: d => d.dead,\n  },\n];\n\nconst Epidemic = () => (\n  <Model\n    auto=\"false\"\n    initData={initData}\n    initialParams={{\n      nbAgents: 500,\n      nbSick: 20,\n      contaminationRisk: 1,\n      deathRisk: 0.001,\n      maxSpeed: 2,\n      recoveryTicks: 200,\n      nbDistancing: 0,\n      r: 3,\n      height: 300,\n      width: 500,\n    }}\n    updateData={updateEpidemic}\n    maxTime={500}\n  >\n    <Flex flexDirection=\"column\">\n      <ConnectedFrame />\n      <TimeSeries series={series} stacked={true} />\n      <Counter series={series} />\n    </Flex>\n  </Model>\n);\n\nexport default Epidemic;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Epidemic from '../../components/examples/epidemic';\nexport const _frontmatter = {\n  \"Title\": \"Epidemic\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Epidemic`}</h1>\n    <Epidemic mdxType=\"Epidemic\" />\n    <h3>{`Caveat`}</h3>\n    <p>{`The purpose of this model is just to show how simulations work in React. It has no scientific value.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}