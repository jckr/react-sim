{"version":3,"sources":["webpack:///./src/pages/initData.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"iPAKaA,EAAe,CAC1B,MAAS,aAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,+BACA,kBACE,GAAM,iBADR,iBAGA,+BACA,uLAEA,8FACA,kBACE,GAAM,YADR,YAGA,+BACA,0SAGA,kBACE,GAAM,YADR,YAGA,uCACA,0IACA,kBACE,GAAM,eADR,eAGA,2CACA,2OAeJH,EAAWI,gBAAiB","file":"component---src-pages-init-data-mdx-2350e7682bd757969569.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"Title\": \"Model API\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`props:`}</p>\n    <h3 {...{\n      \"id\": \"initialparams\"\n    }}>{`initialParams`}</h3>\n    <p>{`Object`}</p>\n    <p>{`An object that describes parameters for the simulation.\nThese parameters may be changed through controls, but they cannot be updated by the simulation alone.`}</p>\n    <p>{`The current value of the parameters is maintain in the Model's state.`}</p>\n    <h3 {...{\n      \"id\": \"controls\"\n    }}>{`controls`}</h3>\n    <p>{`Object`}</p>\n    <p>{`Contains a `}{`[./controls]`}{` configuration.\nBy default, controls contain a Timer module, which can be used to play or stop the simulation or to advance to a specific time.\nIt's possible to add sliders, switches and text boxes to control any parameter for the simulation.`}</p>\n    <h3 {...{\n      \"id\": \"initdata\"\n    }}>{`initData`}</h3>\n    <p>{`params => data`}</p>\n    <p>{`initData contain a function that takes as input the params of the simulation, and which outputs the initial data.`}</p>\n    <h3 {...{\n      \"id\": \"initialtick\"\n    }}>{`initialTick`}</h3>\n    <p>{`number, default: 0`}</p>\n    <p>{`controls: null,\ninitData: () => null,\ninitialData: null,\ninitialParams: {},\ninitialTick: 0,\nminTime: 0,\nmaxTime: 100,\nshowTime: true,\nisPlaying: false,\ntimeInterval: 100,\nupdateData: (d, t) => `}{`[d]`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}