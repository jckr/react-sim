{"version":3,"sources":["webpack:///./src/pages/examples/chaos-game.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mQAMO,IAAMA,EAAe,CAC1B,MAAS,cAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,MACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,kBACE,GAAM,cADR,cAGA,YAAC,IAAD,CAAgBA,QAAQ,mBACxB,4BAAW,iBAAGC,WAAW,IACrB,KAAQ,4CADD,cAAX,uCAGA,iSAGA,8DAA6C,iBAAGA,WAAW,IACvD,KAAQ,0DADiC,wBAG7C,YAAC,IAAD,CAAWD,QAAQ,cACnB,kXAGA,0LACA,oIAEA,sBACE,kBAAIC,WAAW,MAAf,yBACA,kBAAIA,WAAW,MAAf,2BACA,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,qCAEF,iGAKJJ,EAAWK,gBAAiB","file":"component---src-pages-examples-chaos-game-mdx-1dc9512c42f9c284091d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { BasicChaosGame, ChaosGame } from '../../components/examples/';\nexport const _frontmatter = {\n  \"Title\": \"Chaos Game\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"chaos-game\"\n    }}>{`Chaos Game`}</h1>\n    <BasicChaosGame mdxType=\"BasicChaosGame\" />\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Chaos_game\"\n      }}>{`Chaos Game`}</a>{` is a method to generate a fractal.`}</p>\n    <p>{`We start from an equilateral triangle, and one point chosen at random in the plane.\nAt each iteration, we plot a new point which is halfway between the previous point, and one of the vertices of the triangle, chosen at random.\nWe continue plot points like these.`}</p>\n    <p>{`Eventually, our figure looks like the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle\"\n      }}>{`Sierpi≈Ñski triangle`}</a></p>\n    <ChaosGame mdxType=\"ChaosGame\" />\n    <p>{`But we can generalize this to other polygons.\nIn this second version, we can choose a regular polygon with 3 to 12 vertices (so, anything from a triangle to a dodecagon).\nWe can also choose whether we use each vertex as an attractor or not. If a vertex is not an attractor, it won't be used to compute the position of new points in iterations.`}</p>\n    <p>{`For larger polygons, if all vertices are used as attractors, the resulting figure looks a bit messy. But if we only pick a few, then shapes will start to emerge.`}</p>\n    <p>{`One interesting pattern is for polygons with odd number of vertices, if vertices = 2 x n + 3.\nYou can try:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`set the first vertex,`}</li>\n      <li parentName=\"ul\">{`leave n vertices unset,`}</li>\n      <li parentName=\"ul\">{`set the next 2 vertices,`}</li>\n      <li parentName=\"ul\">{`leave the last n vertices unset.`}</li>\n    </ul>\n    <p>{`So: 1 0 1 1 0 for 5, 1 0 0 1 1 0 0 for 7, 1 0 0 0 1 1 0 0 0 for 9, etc.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}