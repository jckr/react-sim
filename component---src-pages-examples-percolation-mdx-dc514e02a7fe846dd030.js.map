{"version":3,"sources":["webpack:///./src/components/examples/framed-model.js","webpack:///./src/components/examples/percolation.js","webpack:///./src/pages/examples/percolation.mdx"],"names":["FramedModel","props","sx","border","my","p","width","status","updateData","data","params","complete","queue","grid","height","updatedStatus","length","nextQueue","cell","shift","x","y","push","shouldComplete","updateDataGrid","nbPending","grids","forEach","row","updatedCell","cols","result","initData","random","porosity","Math","Number","draw","ctx","cellSize","margin","roundRectangle","fillStyle","fillRect","rowIndex","colIndex","r","fill","lineWidth","strokeStyle","lineCap","beginPath","moveTo","lineTo","max","stroke","PercolationFrame","style","boxSizing","PercolationFrameGrid","ch","cw","display","flexDirection","rows","justifyContent","map","c","fontSize","textAlign","fontWeight","toFixed","key","total","Percolation","auto","controls","param","label","minValue","maxValue","step","maxTime","Infinity","initialParams","initDataGrid","minP","stepP","ck","Array","keys","PercolationGrid","_frontmatter","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-examples-percolation-mdx-dc514e02a7fe846dd030.js","sourcesContent":["import React from 'react';\nimport { Model } from 'react-sim';\nimport { Flex } from 'rebass';\n\nconst FramedModel = props => (\n  <Flex\n    sx={{\n      border: '1px solid currentcolor',\n      my: 2,\n      p: 2,\n      width: '350px',\n    }}\n  >\n    <Model {...props} />\n  </Flex>\n);\n\nexport default FramedModel;\n","import React from 'react';\nimport { Flex, Box } from 'rebass';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst EMPTY = 0;\nconst ROCK = 1;\nconst ROCK_WITH_ROCK_ON_RIGHT = 2;\nconst ROCK_WITH_ROCK_BELOW = 3;\nconst ROCK_WITH_ROCK_RIGHT_AND_BELOW = 4;\nconst ROCK_WITH_ROCKS_ALL_AROUND = 5;\nconst WATER_FROM_TOP = 6;\nconst WATER_FROM_RIGHT = 7;\nconst WATER_FROM_LEFT = 8;\n\nconst status = {\n  pending: 'PENDING',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n};\n\nexport function updateData({ data, params, complete }) {\n  const { queue, grid } = data;\n  const { height } = params;\n  let updatedStatus = data.status;\n  if (queue.length === 0) {\n    updatedStatus = status.failure;\n  }\n  const nextQueue = [];\n  while (queue.length > 0 && updatedStatus === status.pending) {\n    const cell = queue.shift();\n    const { x, y } = cell;\n    if (y === height - 1) {\n      updatedStatus = status.success;\n    } else if (grid[y + 1][x] === EMPTY) {\n      grid[y + 1][x] = WATER_FROM_TOP;\n      nextQueue.push({ x, y: y + 1 });\n    }\n    // note - grid[y][x - 1] and grid[y][x + 1] can be undefined,\n    // but that doesn't make any difference.\n    if (grid[y][x - 1] === EMPTY) {\n      grid[y][x - 1] = WATER_FROM_RIGHT;\n      nextQueue.push({ x: x - 1, y });\n    }\n    if (grid[y][x + 1] === EMPTY) {\n      grid[y][x + 1] = WATER_FROM_LEFT;\n      nextQueue.push({ x: x + 1, y });\n    }\n  }\n  if (updatedStatus !== status.pending && params.shouldComplete) {\n    complete(updatedStatus);\n  }\n  return {\n    grid,\n    queue: nextQueue,\n    status: updatedStatus,\n  };\n}\n\nexport function updateDataGrid({ data, params, complete }) {\n  let nbPending = 0;\n  data.grids.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      if (cell.status === status.pending) {\n        const updatedCell = updateData({\n          data: cell,\n          params: { height: params.height, shouldComplete: false },\n        });\n        data.grids[y][x] = updatedCell;\n        if (updatedCell.status === status.pending) {\n          nbPending++;\n        }\n        if (updatedCell.status === status.success) {\n          data.cols[x].result++;\n        }\n      }\n    })\n  );\n  if (nbPending === 0) {\n    complete();\n  }\n  return data;\n}\n\nexport function initData({ porosity, height, width }, random = Math.random) {\n  const grid = [];\n  const queue = [];\n  let x, y;\n  for (y = 0; y < height; y++) {\n    const row = [];\n    for (x = 0; x < width; x++) {\n      row.push(random() > Number(porosity) ? ROCK : EMPTY);\n    }\n    grid.push(row);\n  }\n\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      if (grid[y][x]) {\n        if (grid[y + 1] && grid[y + 1][x]) {\n          // rock below\n          grid[y][x] = grid[y][x] + 2;\n        }\n        if (grid[y][x + 1]) {\n          // rock to the right\n          grid[y][x] = grid[y][x] + 1;\n        }\n        if (\n          grid[y][x] === ROCK_WITH_ROCK_RIGHT_AND_BELOW &&\n          grid[y + 1][x + 1]\n        ) {\n          grid[y][x] = ROCK_WITH_ROCKS_ALL_AROUND;\n        }\n      } else {\n        if (y === 0) {\n          grid[y][x] = WATER_FROM_TOP;\n          queue.push({ x, y });\n        }\n      }\n    }\n  }\n  return { grid, queue, status: status.pending };\n}\n\nexport function draw({\n  ctx,\n  params: { cellSize, margin, height, width },\n  data,\n  roundRectangle,\n}) {\n  ctx.fillStyle = 'beige';\n  ctx.fillRect(0, 0, width * cellSize, height * cellSize);\n\n  data.grid.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const x = colIndex * cellSize;\n      const y = rowIndex * cellSize;\n      if (cell >= ROCK && cell <= ROCK_WITH_ROCKS_ALL_AROUND) {\n        // rock\n        ctx.fillStyle = '#777';\n\n        roundRectangle({\n          ctx,\n          x: x + margin,\n          y: y + margin,\n          r: margin,\n          height: cellSize - 2 * margin,\n          width: cellSize - 2 * margin,\n        });\n        ctx.fill();\n        if (\n          cell === ROCK_WITH_ROCK_ON_RIGHT ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + margin,\n            4 * margin,\n            cellSize - 2 * margin\n          );\n        }\n        if (\n          cell === ROCK_WITH_ROCK_BELOW ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + margin,\n            y + cellSize - 2 * margin,\n            cellSize - 2 * margin,\n            4 * margin\n          );\n        }\n        if (cell === ROCK_WITH_ROCKS_ALL_AROUND) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + cellSize - 2 * margin,\n            4 * margin,\n            4 * margin\n          );\n        }\n      }\n      if (cell >= WATER_FROM_TOP) {\n        ctx.lineWidth = cellSize - 2 * margin;\n        ctx.strokeStyle = 'cyan';\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(x + cellSize / 2, y + cellSize / 2);\n        if (cell === WATER_FROM_TOP) {\n          ctx.lineTo(x + cellSize / 2, Math.max(y - cellSize / 2, 0));\n        }\n        if (cell === WATER_FROM_LEFT) {\n          ctx.lineTo(x - cellSize / 2, y + cellSize / 2);\n        }\n        if (cell === WATER_FROM_RIGHT) {\n          ctx.lineTo(x + (3 * cellSize) / 2, y + cellSize / 2);\n        }\n        ctx.stroke();\n      }\n    });\n  });\n}\n\nexport const PercolationFrame = ({ data, params }) => {\n  const { cellSize, height, width } = params;\n\n  return (\n    <div\n      style={{\n        boxSizing: 'content-box',\n        height: cellSize * height,\n        width: cellSize * width,\n        border: `3px solid ${\n          data.status === status.pending\n            ? 'transparent'\n            : data.status === status.success\n            ? '#33e'\n            : '#777'\n        }`,\n      }}\n    >\n      <CanvasFrame\n        data={data}\n        width={width * cellSize}\n        height={height * cellSize}\n        draw={draw}\n      />\n    </div>\n  );\n};\n\nexport const PercolationFrameGrid = ({ data, params }) => {\n  const ch = params.height * params.cellSize;\n  const cw = params.width * params.cellSize;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        margin: '0 auto',\n        flexDirection: 'column',\n        height: (ch + 10) * params.rows + 60,\n        width: (cw + 10) * params.cols + 10,\n      }}\n    >\n      <Flex\n        flexDirection=\"row\"\n        sx={{ justifyContent: 'space-around', width: '100%' }}\n      >\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n              fontWeight: 2,\n            }}\n          >\n            {c.p.toFixed(2)}\n          </Box>\n        ))}\n      </Flex>\n      <Flex\n        sx={{\n          flexDirection: 'column',\n          justifyContent: 'space-around',\n          height: (ch + 10) * params.rows,\n        }}\n      >\n        {data.grids.map((row, y) => (\n          <Flex\n            sx={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n            }}\n            key={`row-${y}`}\n          >\n            {row.map((cell, x) => (\n              <Flex\n                sx={{\n                  height: params.height * params.cellSize,\n                  width: params.width * params.cellSize,\n                }}\n              >\n                <PercolationFrame\n                  key={`cell-${x}-${y}`}\n                  data={cell}\n                  params={params}\n                />\n              </Flex>\n            ))}\n          </Flex>\n        ))}\n      </Flex>\n\n      <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-around' }}>\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n            }}\n          >\n            {`${c.result}/${c.total}`}\n          </Box>\n        ))}\n      </Flex>\n    </div>\n  );\n};\n\nexport const Percolation = () => {\n  return (\n    <>\n      <Model\n        auto={false}\n        controls={{\n          param: 'porosity',\n          label: 'Porosity',\n          minValue: 0,\n          maxValue: 1,\n          step: 0.01,\n        }}\n        updateData={updateData}\n        maxTime={Infinity}\n        initData={initData}\n        initialParams={{\n          width: 66,\n          height: 66,\n          cellSize: 5,\n          margin: 0,\n          porosity: 0.6,\n          shouldComplete: true,\n        }}\n      >\n        <PercolationFrame />\n      </Model>\n    </>\n  );\n};\n\nexport function initDataGrid(\n  { width, height, cellSize, margin, rows, cols, minP, stepP },\n  random = Math.random\n) {\n  const ck = [...Array(cols).keys()];\n  return {\n    cols: ck.map(c => ({ p: minP + c * stepP, result: 0, total: rows })),\n    grids: [...Array(rows).keys()].map(r =>\n      ck.map(c =>\n        initData(\n          {\n            height,\n            width,\n            porosity: minP + c * stepP,\n          },\n          random\n        )\n      )\n    ),\n  };\n}\n\nexport const PercolationGrid = () => {\n  return (\n    <>\n      <Model\n        auto={false}\n        updateData={updateDataGrid}\n        maxTime={Infinity}\n        initData={initDataGrid}\n        initialParams={{\n          width: 20,\n          height: 20,\n          cellSize: 1.5,\n          margin: 0,\n          rows: 10,\n          cols: 8,\n          minP: 0.54,\n          stepP: 0.02,\n        }}\n      >\n        <PercolationFrameGrid />\n      </Model>\n    </>\n  );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { Percolation, PercolationGrid } from '../../components/examples/percolation';\nexport const _frontmatter = {\n  \"Title\": \"Percolation\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"percolation\"\n    }}>{`Percolation`}</h1>\n    <p>{`A 2D lattice is made of cells which either let liquid go through (porous) or not.\nIf we pour liquid on the top of the lattice, will any of it go through? This depends on the porosity of the lattice, i.e. the percentage of cells which are porous.`}</p>\n    <Percolation mdxType=\"Percolation\" />\n    <p>{`Interestingly, the chances of liquid getting through don't vary linearly with the porosity. If porosity is beyond a certain `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Percolation_threshold\"\n      }}>{`threshold`}</a>{`, there are very little chances that the liquid gets through, and beyond that threshold it becomes very likely.\nFor our 2D lattice with liquid being able to go in all 4 directions, the threshold is around `}<em parentName=\"p\">{`0.59`}</em>{`.`}</p>\n    <p>{`To see how dramatically the chances of liquid percolating increase once we're past the threshold, let's simulate 100 pours at a time:\nOn that grid, every column has the same porosity index.`}</p>\n    <PercolationGrid mdxType=\"PercolationGrid\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}