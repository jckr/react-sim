{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js","webpack:///./src/components/examples/game-of-life.js","webpack:///./src/components/examples/activators.js","webpack:///./src/pages/examples/activators.mdx"],"names":["$export","abs","Math","S","hypot","value1","value2","arg","div","sum","i","aLen","arguments","length","larg","Infinity","sqrt","countNeighbors","x","y","grid","height","width","n","xOffset","yOffset","x1","y1","updateGameOfLifeGrid","data","complete","changes","updatedGrid","map","row","cell","neighbors","updateGridNoComplete","initGrid","density","Array","fill","Number","random","GameOfLifeFrame","render","this","props","accessor","size","index","key","styles","overflow","alignItems","justifyContent","style","background","borderRadius","React","Component","defaultProps","d","Frame","initData","display","flexDirection","Step2","initialParams","Step3","updateData","Step4","Step5","controls","param","resetOnChange","maxValue","step","label","showTimeSlider","GameOfLife","auto","delay","getTotalValue","listOfCells","reduce","total","value","update","params","tick","JSON","parse","stringify","w","col","innerNeighbors","outerNeighbors","mutation","innerRadius","outerRadius","cells","x0","max","min","y0","dist","push","Activators","minValue","maxTime","_frontmatter","layoutProps","MDXContent","components","mdxType","isMDXComponent"],"mappings":"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","file":"component---src-pages-examples-activators-mdx-78698119fc8388418839.js","sourcesContent":["// 20.2.2.17 Math.hypot([value1[, value2[, â€¦ ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import React from 'react';\nimport { FlexRow, FlexColumn, Model } from 'react-sim';\n\n// helpers\n\nfunction countNeighbors(x, y, grid) {\n  const height = grid.length;\n  if (!height) {\n    return 0;\n  }\n  const width = grid[0].length;\n\n  let n = 0;\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n      const x1 = x + xOffset;\n      const y1 = y + yOffset;\n      if (\n        x1 < width &&\n        x1 > 0 &&\n        y1 < height &&\n        y1 > 0 &&\n        (x1 !== x || y1 !== y)\n      ) {\n        n += grid[y1][x1];\n      }\n    }\n  }\n  return n;\n}\n\nexport function updateGameOfLifeGrid({ data, complete }) {\n  let changes = 0;\n  const updatedGrid = data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        changes++;\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        changes++;\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n  if (changes === 0) {\n    complete();\n  }\n  return updatedGrid;\n}\n\nexport function updateGridNoComplete({ data }) {\n  return data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n}\n\nfunction initGrid({ height, width, density }) {\n  return Array(height)\n    .fill(0)\n    .map(row =>\n      Array(width)\n        .fill(0)\n        .map(() => Number(Math.random() < density))\n    );\n}\n\nexport class GameOfLifeFrame extends React.Component {\n  static defaultProps = {\n    size: 12,\n    accessor: d => d,\n  };\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const { accessor, data, size } = this.props;\n    return (\n      <div>\n        {data.map((row, index) => (\n          <FlexRow key={`r-${index}`} styles={{ height: size }}>\n            {row.map((cell, index) => (\n              <FlexColumn\n                key={`c-${index}`}\n                styles={{\n                  width: size,\n                  overflow: 'hidden',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  // border: \"1px solid black\"\n                }}\n              >\n                <div\n                  style={{\n                    background: '#000',\n                    borderRadius: accessor(cell) ? 0 : '50%',\n                    width: accessor(cell) ? '100%' : 0,\n                    height: accessor(cell) ? '100%' : 0,\n                    // transition: \"all 0.1s\"\n                  }}\n                ></div>\n              </FlexColumn>\n            ))}\n          </FlexRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst Frame = ({ data, size = 12, initData }) => {\n  if (data === null) {\n    return null;\n  }\n  return (\n    <div>\n      {data.map((row, index) => (\n        <div\n          key={`r-${index}`}\n          style={{ display: 'flex', flexDirection: 'row', height: size }}\n        >\n          {row.map((cell, index) => (\n            <div\n              key={`c-${index}`}\n              style={{\n                width: size,\n                background: cell ? '#000' : 'none',\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst GameOfLife = () => (\n  <Model\n    auto={false}\n    controls={{\n      param: 'density',\n      maxValue: 1,\n      step: 0.01,\n      resetOnChange: true,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    updateData={updateGameOfLifeGrid}\n    delay={100}\n    initData={initGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step2 = () => (\n  <Model\n    initData={initGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step3 = () => (\n  <Model\n    initData={initGrid}\n    updateData={updateGridNoComplete}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step4 = () => (\n  <Model\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step5 = () => (\n  <Model\n    controls={{\n      param: 'density',\n      resetOnChange: true,\n      maxValue: 1,\n      step: 0.01,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport default GameOfLife;\n","import React from \"react\";\nimport { FlexRow, FlexColumn, Model } from \"react-sim\";\nimport { GameOfLifeFrame } from \"./game-of-life\";\n\n// helpers\n\nfunction getTotalValue(grid, listOfCells) {\n  return listOfCells.reduce((total, [x, y]) => total + grid[y][x].value, 0);\n}\n\nexport function update({ data, tick, params, complete }) {\n  let grid = JSON.parse(JSON.stringify(data));\n  let changes = 0;\n  const { height, width, w } = params;\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const { innerNeighbors, outerNeighbors } = data[row][col];\n\n      const activators = getTotalValue(data, innerNeighbors);\n      const inhibitors = getTotalValue(data, outerNeighbors);\n\n      const mutation = activators - w * inhibitors;\n\n      if (mutation > 0) {\n        grid[row][col].value = 1;\n      }\n      if (mutation < 0) {\n        grid[row][col].value = 0;\n      }\n      if (grid[row][col] !== data[row][col]) {\n        changes++;\n      }\n\n      // if mutation = 0, leave cell unchanged\n    }\n  }\n  if (changes < 0.01 * height * width) {\n    complete();\n  }\n  return grid;\n}\n\nfunction initData({ height, width, density, innerRadius, outerRadius }) {\n  const data = [];\n  for (let row = 0; row < height; row++) {\n    const cells = [];\n    for (let col = 0; col < width; col++) {\n      const innerNeighbors = [];\n      const outerNeighbors = [];\n\n      const x0 = Math.max(col - outerRadius, 0);\n      const x1 = Math.min(col + outerRadius, width - 1);\n      const y0 = Math.max(row - outerRadius, 0);\n      const y1 = Math.min(row + outerRadius, height - 1);\n\n      for (let x = x0; x < x1; x++) {\n        for (let y = y0; y < y1; y++) {\n          const dist = Math.hypot(col - x, row - y);\n          if (dist > innerRadius && dist <= outerRadius) {\n            outerNeighbors.push([x, y]);\n          } else {\n            if (dist > 0 && dist <= innerRadius) {\n              innerNeighbors.push([x, y]);\n            }\n          }\n        }\n      }\n\n      const value = Math.random() < density;\n\n      cells.push({ value, innerNeighbors, outerNeighbors });\n    }\n    data.push(cells);\n  }\n  return data;\n}\n\nconst Activators = () => (\n  <Model\n    auto=\"false\"\n    controls={[\n      [\n        { param: \"w\", minValue: 0, maxValue: 1, label: \"weight\", step: 0.01 },\n        {\n          param: \"innerRadius\",\n          minValue: 1,\n          maxValue: 10,\n          label: \"Inner Radius\"\n        },\n        {\n          param: \"outerRadius\",\n          minValue: 1,\n          maxValue: 10,\n          label: \"Outer Radius\"\n        }\n      ],\n      [\n        { param: \"height\", minValue: 5, maxValue: 100, label: \"Height\" },\n        { param: \"width\", minValue: 5, maxValue: 100, label: \"Width\" },\n        { param: \"density\", minValue: 0, maxValue: 1, step: 0.1 }\n      ]\n    ]}\n    initData={initData}\n    initialParams={{\n      height: 30,\n      width: 30,\n      density: 0.5,\n      innerRadius: 3,\n      outerRadius: 6,\n      w: 0.35\n    }}\n    updateData={update}\n    maxTime={200}\n  >\n    <GameOfLifeFrame size={10} accessor={d => d.value} />\n  </Model>\n);\n\nexport default Activators;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Activators from '../../components/examples/activators';\nexport const _frontmatter = {\n  \"Title\": \"Activators / Inhibitors\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Activators / Inhibitors`}</h1>\n    <Activators mdxType=\"Activators\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}