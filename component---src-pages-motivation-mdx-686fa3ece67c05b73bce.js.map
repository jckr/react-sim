{"version":3,"sources":["webpack:///./src/pages/motivation.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iPAKaA,EAAe,CAC1B,MAAS,4BAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,kBACE,GAAM,cADR,cAGA,qBAAG,0BAAYC,WAAW,KAAvB,aAAH,4DACA,oDACA,sBACE,kBAAIA,WAAW,MAAf,0BACA,kBAAIA,WAAW,MAAf,4CACA,kBAAIA,WAAW,MAAf,iCAEF,kBACE,GAAM,yBADR,yBAGA,+FACA,sBACE,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,gDACA,kBAAIA,WAAW,MAAf,4DACA,kBAAIA,WAAW,MAAf,6GACA,kBAAIA,WAAW,MAAf,6BAEF,2BAAU,0BAAYA,WAAW,KAAvB,aAAV,oCAAoG,kBAAIA,WAAW,KAAf,cAApG,sVAEA,kBACE,GAAM,0CADR,2CAGA,0SAC4H,0BAAYA,WAAW,KAAvB,aAD5H,mIAGA,qBAAG,0BAAYA,WAAW,KAAvB,aAAH,kMAEA,kBACE,GAAM,6BADR,6BAGA,qBAAG,0BAAYA,WAAW,KAAvB,aAAH,mLACgB,0BAAYA,WAAW,KAAvB,aADhB,SAC+E,0BAAYA,WAAW,KAAvB,UAD/E,wDAC0L,0BAAYA,WAAW,KAAvB,UAD1L,mCAEA,kBACE,GAAM,eADR,eAGA,kEAAiD,0BAAYA,WAAW,KAAvB,aAAjD,QAA+G,iBAAGA,WAAW,IACzH,KAAQ,2BADmG,cAA/G,KAE6B,iBAAGA,WAAW,IACvC,KAAQ,6BADiB,cAF7B,SAIiC,iBAAGA,WAAW,IAC3C,KAAQ,wCADqB,WAJjC,KAOA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,2BADT,cAAH,0OAIF,0BAAYA,WAAW,KAAvB,aAJE,gKAKA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,6BADT,cAAH,uTAGF,0BAAYA,WAAW,KAAvB,aAHE,2JAIA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,0BADT,WAAH,sNAE2O,0BAAYA,WAAW,KAAvB,aAF3O,4EAOJJ,EAAWK,gBAAiB","file":"component---src-pages-motivation-mdx-686fa3ece67c05b73bce.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"Title\": \"Motivation & Inspiration\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"motivation\"\n    }}>{`Motivation`}</h1>\n    <p><inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` was written to make building interactive models simple.`}</p>\n    <p>{`It is based on three ideas:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`separation of concern,`}</li>\n      <li parentName=\"ul\">{`building blocks instead of boiler-plate,`}</li>\n      <li parentName=\"ul\">{`integration with other apps.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"separation-of-concern\"\n    }}>{`Separation of concern`}</h2>\n    <p>{`To build an interactive model, a developer must manage several things:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`how the model is initialized,`}</li>\n      <li parentName=\"ul\">{`how the data of the model changes over time,`}</li>\n      <li parentName=\"ul\">{`how to render a visual representation of the simulation,`}</li>\n      <li parentName=\"ul\">{`how to deal with time and animation - can the simulation play and pause, go forward or back in time, etc.`}</li>\n      <li parentName=\"ul\">{`handle user interaction.`}</li>\n    </ul>\n    <p>{`In `}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{`, those things can be dealt with `}<em parentName=\"p\">{`separately`}</em>{`. We don't need to know how the data will update to figure out how to render it.\nWhen the simulation is initalized, it doesn't need to be aware of how it will animate. So, in react-sim, the code that does any of these tasks is separate. By having all of that logic separated, the code is safer, more legible, easier to maintain and test.`}</p>\n    <h2 {...{\n      \"id\": \"less-boiler-plate-more-building-blocks\"\n    }}>{`Less boiler-plate, more building blocks`}</h2>\n    <p>{`Another painpoint in creating an interactive model from scratch is that there are common tasks that need to be taken care of for each new project.\nThat can be: actually implementing an animation and calling certain functions at regular intervals, which is the core of what `}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` does.\nBut that also includes: setting up a component that can refresh a canvas, or building a simple UI to control the nodel.`}</p>\n    <p><inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` comes with 2 series of building blocks, one for controls and one for display elements, that take care of the most basic and common tasks.\nBut it also allows developers to create their own.`}</p>\n    <h2 {...{\n      \"id\": \"integration-in-other-apps\"\n    }}>{`Integration in other apps`}</h2>\n    <p><inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` produces a React component and works everywhere React does, just like any other React components. They can take parameters and properties from the outside.\nThe default UI of `}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` uses `}<inlineCode parentName=\"p\">{`rebass`}</inlineCode>{`, and so a simulation can appear in an app styled by `}<inlineCode parentName=\"p\">{`rebass`}</inlineCode>{` and seamlessly take its theme.`}</p>\n    <h1 {...{\n      \"id\": \"inspiration\"\n    }}>{`Inspiration`}</h1>\n    <p>{`The three main sources of inspiration for `}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` are `}<a parentName=\"p\" {...{\n        \"href\": \"https://processing.org/\"\n      }}>{`Processing`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://observablehq.com/\"\n      }}>{`Observable`}</a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"http://ccl.northwestern.edu/netlogo/\"\n      }}>{`NetLogo`}</a>{`.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://processing.org/\"\n      }}>{`Processing`}</a>{` sketches are similar to react-sim simulations in that they have a one-off setup function, followed by a draw function called continuously.\nProcessing also has a very expressive and concise language focused on building sketches.\n`}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` goes further than processing in separating initial setup and iterations by also separating data and rendering, however, it uses standard JavaScript syntax.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://observablehq.com/\"\n      }}>{`Observable`}</a>{` also create visual representations of data and makes it easy to add interactive controls. Observable lets the user create visual explanations by combining and arranging visual elements, text and controls. Observable is also a platform where authors can publish their notebooks and fork the work of others.\n`}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` doesn't have such a platform or the notebook format, but also lets developers style their work freely and integrate it whereever they want seamlessly.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://netlogoweb.org/\"\n      }}>{`NetLogo`}</a>{` is a dedicated programmable modeling environment and its syntax is narrowly focused on building multi-agent models. As a result, even more so than processing, it has a very concise and expressive way to do so. `}<inlineCode parentName=\"p\">{`react-sim`}</inlineCode>{` uses JavaScript/React syntax which is more verbose, but more flexible.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}