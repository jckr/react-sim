{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-repeat.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es7.string.pad-start.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-pad.js","webpack:///./src/components/examples/mazes/helpers.js","webpack:///./src/components/examples/mazes/square.js","webpack:///./src/components/examples/mazes/hex.js","webpack:///./src/components/examples/mazes/triangle.js","webpack:///./src/components/constants.js","webpack:///./src/components/examples/mazes.js","webpack:///./src/components/examples/mazes/circle.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.link.js"],"names":["toInteger","defined","module","exports","count","str","String","this","res","n","Infinity","RangeError","$export","$pad","userAgent","WEBKIT_BUG","test","P","F","padStart","maxLength","arguments","length","undefined","toLength","repeat","that","fillString","left","S","stringLength","fillStr","intMaxLength","fillLen","stringFiller","call","Math","ceil","slice","HALF_SQRT3","sqrt","PI","P2","getColRow","id","cols","col","row","norm","a","average","a0","a1","min","max","getRadius","layer","cellSize","acuteArc","ctx","x","y","r","angle0","angle1","startAngle","endAngle","isClockwise","arc","isBetween","angle","start","end","drawLink","getCoords","cells","circle","link","pathColor","pathSize","wallSize","startCell","endCell","cell","strokeStyle","fillStyle","fill","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","getNeighborsSquare","rows","neighbors","push","getCoordsSquare","drawLinkSquare","getNeighborsHex","getCoordsHex","drawLinkHex","getNeighborsTriangle","drawLinkTriangle","arrayToHex","split","map","Number","c","toString","join","grids","params","drawItem","useColor","width","height","grid","wallColor","maxTime","ticksPerAnimation","initData","random","layers","floor","midangle","nbSegmentsPreviousLayer","l","circumference","nbSegments","runningAngle","previousLayerSegmentIdx","previousLayerSegmentId","s","midAngle","startAngleDeg","endAngleDeg","links","visited","Set","currentCell","stack","initDataCircle","Array","keys","reduce","prev","initDataSquare","initDataHex","initDataTriangle","updateData","data","otherData","complete","options","size","Object","values","pop","filter","d","has","nextMove","add","draw","otherParams","tick","clearRect","forEach","drawCell","fillRect","i","other","wallAngleDelta","drawItemCircle","center","drawItemHex","strokeRect","drawItemSquare","isPointingDown","drawItemTriangle","drawLinkCircle","save","lineCap","startMidAngle","x0","cos","y0","sin","restore","endMidAngle","x1","y1","firstEnd","secondEnd","r0","r1","Frame","props","Maze","initialParams","extraParams","controls","type","vertical","param","resetOnChange","fails","quot","createHTML","string","tag","attribute","value","p1","replace","NAME","exec","O","toLowerCase","url"],"mappings":"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","file":"d32906a91c4fcaafffb152b4287be1c98e033d35-3d0b8e895bd4cbcefb5c.js","sourcesContent":["'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","export const HALF_SQRT3 = Math.sqrt(3) / 2;\nexport const P = Math.PI;\nexport const P2 = Math.PI * 2;\nexport const getColRow = (id, cols) => {\n  const col = id % cols;\n  const row = (id - col) / cols;\n  return { col, row };\n};\n\nexport const norm = a => (a + P2) % P2;\n\nexport const average = (a0, a1) => {\n  let min = Math.min(norm(a0), norm(a1));\n  let max = Math.max(norm(a0), norm(a1));\n\n  if (max - min > P) {\n    return norm(min + (max - min) / 2 + P);\n  }\n  return norm(min + (max - min) / 2);\n};\n\nexport const getRadius = (layer, cellSize) => {\n  return (layer + 0.5) * cellSize;\n};\n\nexport const acuteArc = ({ ctx, x, y, r, a0, a1 }) => {\n  // draws the smallest arc between angles a0 and a1;\n  const angle0 = norm(a0);\n  const angle1 = norm(a1);\n\n  const startAngle = Math.min(angle0, angle1);\n  const endAngle = Math.max(angle0, angle1);\n\n  const isClockwise = norm(endAngle - startAngle) > P;\n\n  ctx.arc(x, y, r, startAngle, endAngle, isClockwise);\n};\n\nexport const isBetween = (angle, start, end) => {\n  if (norm(start) === norm(end)) {\n    return true;\n  }\n  let a = norm(angle - start);\n  let e = norm(end - start);\n  return a < e;\n};\n\nexport const drawLink = getCoords => ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  link,\n  pathColor,\n  pathSize,\n  wallSize,\n}) => {\n  const startCell = cells[link[0]];\n  const endCell = cells[link[1]];\n\n  const start = getCoords({ cell: startCell, cellSize, wallSize });\n  const end = getCoords({ cell: endCell, cellSize, wallSize });\n\n  ctx.strokeStyle = pathColor;\n  ctx.fillStyle = pathColor;\n\n  circle({ x: start[0], y: start[1], r: pathSize / 2 });\n  ctx.fill();\n  circle({ x: end[0], y: end[1], r: pathSize / 2 });\n  ctx.fill();\n\n  ctx.lineWidth = pathSize;\n\n  ctx.beginPath();\n  ctx.moveTo(...start);\n  ctx.lineTo(...end);\n  ctx.closePath();\n  ctx.stroke();\n};\n","import { getColRow, drawLink } from './helpers';\n\nexport const getNeighborsSquare = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if (row) {\n    neighbors.push(id - cols);\n  }\n  if (row < rows - 1) {\n    neighbors.push(id + cols);\n  }\n  return neighbors;\n};\n\nexport const initDataSquare = (\n  { height, width, grid }\n) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.8 * cellSize;\n  const wallSize = 0.2 * cellSize;\n\n  const rows = Math.floor(height / cellSize);\n  const cols = Math.floor(width / cellSize);\n  const nbCells = rows * cols;\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsSquare(id, cols, rows),\n    };\n    return prev;\n  }, {});\n  return {\n    cellSize,\n    wallSize,\n    pathSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsSquare = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + (col + 0.5) * cellSize,\n    wallSize / 2 + (row + 0.5) * cellSize,\n  ];\n};\n\nexport const drawItemSquare = ({\n  cell,\n  ctx,\n  cellSize,\n  wallColor,\n  wallSize,\n}) => {\n  const center = getCoordsSquare({ cell, cellSize, wallSize });\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n  ctx.strokeRect(\n    center[0] - 0.5 * cellSize,\n    center[1] - 0.5 * cellSize,\n    cellSize,\n    cellSize\n  );\n};\n\nexport const drawLinkSquare = drawLink(getCoordsSquare);\n","import { HALF_SQRT3, drawLink, getColRow } from './helpers';\n\nexport const getNeighborsHex = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if (row) {\n    neighbors.push(id - cols);\n    if (row % 2) {\n      if (col < cols - 1) {\n        neighbors.push(id - cols + 1);\n      }\n    } else {\n      if (col > 0) {\n        neighbors.push(id - cols - 1);\n      }\n    }\n  }\n  if (row < rows - 1) {\n    neighbors.push(id + cols);\n    if (row % 2) {\n      if (col < cols - 1) {\n        neighbors.push(id + cols + 1);\n      }\n    } else {\n      if (col > 0) {\n        neighbors.push(id + cols - 1);\n      }\n    }\n  }\n  return neighbors;\n};\n\nexport const initDataHex = ({ height, width }) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.8 * cellSize;\n  const wallSize = 0.1 * cellSize;\n  const rows = Math.floor((4 * height) / (6 * cellSize) - 0.5);\n  const cols = Math.floor(width / (2 * cellSize * HALF_SQRT3) - 0.5);\n  const nbCells = rows * cols;\n\n  // same as for squares:\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsHex(id, cols, rows),\n    };\n    return prev;\n  }, {});\n\n  return {\n    cellSize,\n    pathSize,\n    wallSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsHex = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + ((row % 2 ? 1 : 0.5) + col) * HALF_SQRT3 * cellSize * 2,\n    wallSize / 2 + (1 + 1.5 * row) * cellSize,\n  ];\n};\n\nexport const drawItemHex = ({ cell, ctx, cellSize, wallColor, wallSize }) => {\n  const center = getCoordsHex({ cell, cellSize, wallSize });\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n\n  ctx.beginPath();\n  ctx.moveTo(center[0], center[1] - cellSize);\n  ctx.lineTo(center[0] - HALF_SQRT3 * cellSize, center[1] - 0.5 * cellSize);\n  ctx.lineTo(center[0] - HALF_SQRT3 * cellSize, center[1] + 0.5 * cellSize);\n  ctx.lineTo(center[0], center[1] + cellSize);\n  ctx.lineTo(center[0] + HALF_SQRT3 * cellSize, center[1] + 0.5 * cellSize);\n  ctx.lineTo(center[0] + HALF_SQRT3 * cellSize, center[1] - 0.5 * cellSize);\n  ctx.closePath();\n  ctx.stroke();\n  return;\n};\n\nexport const drawLinkHex = drawLink(getCoordsHex);\n","import { HALF_SQRT3, drawLink, getColRow } from './helpers';\n\nexport const getNeighborsTriangle = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if ((col + row) % 2) {\n    // triangle pointing down\n    if (row) {\n      neighbors.push(id - cols);\n    }\n  } else {\n    if (row < rows - 1) {\n      neighbors.push(id + cols);\n    }\n  }\n  return neighbors;\n};\n\nexport const initDataTriangle = ({ height, width }) => {\n  const cellSize = Math.max(10, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.5 * cellSize;\n  const wallSize = 0.2 * cellSize;\n  const rows = Math.floor(height / (cellSize * HALF_SQRT3));\n  const cols = Math.floor((2 * width) / cellSize) - 1;\n  const nbCells = rows * cols;\n\n  // same as for squares:\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsTriangle(id, cols, rows),\n    };\n    return prev;\n  }, {});\n\n  return {\n    cellSize,\n    pathSize,\n    wallSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsTriangle = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + ((col + 1) * cellSize) / 2,\n    wallSize / 2 +\n      (row + ((row + col) % 2 ? 1 / 3 : 2 / 3)) * HALF_SQRT3 * cellSize,\n  ];\n};\n\nexport const drawItemTriangle = ({\n  cell,\n  ctx,\n  cellSize,\n  wallColor,\n  wallSize,\n}) => {\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n  const { col, row } = cell;\n  const isPointingDown = (col + row) % 2;\n\n  ctx.beginPath();\n  if (isPointingDown) {\n    ctx.moveTo(\n      wallSize / 2 + (col * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 2) * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 1) * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n  } else {\n    ctx.moveTo(\n      wallSize / 2 + (col * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 2) * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 1) * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n  }\n  ctx.closePath();\n  ctx.stroke();\n  return;\n};\n\nexport const drawLinkTriangle = drawLink(getCoordsTriangle);\n","export const reactsimGrid = `0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000\n0011110011111001110001110011111000000111001110100000100\n0010001010000010001010001000100000001000100100110001100\n0010001010000010001010001000100000001000100100101010100\n0010001010000010001010000000100000001000000100100100100\n0011110011110010001010000000100011100111000100100000100\n0010001010000011111010000000100000000000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001011111010001001110000100000000111001110100000100\n0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000`\n  .split('\\n')\n  .map(row => row.split('').map(Number));\n\nexport const stringToHex = a => arrayToHex(a.split(',').map(Number));\nexport const arrayToHex = a =>\n  `#${a.map(c => c.toString(16).padStart(2, '0')).join('')}`;\n\nexport const CETR2 = `0,52,245\n0,55,243\n0,58,240\n0,60,237\n0,63,234\n0,65,231\n0,68,229\n0,70,226\n0,72,223\n0,74,220\n0,77,217\n0,79,214\n0,81,212\n0,83,209\n0,85,206\n0,87,203\n0,89,201\n0,90,198\n0,92,195\n0,94,192\n0,96,189\n0,98,187\n0,99,184\n0,101,181\n0,103,178\n0,104,176\n0,106,173\n0,108,170\n0,109,167\n0,111,165\n0,112,162\n0,113,160\n0,115,157\n0,116,154\n0,117,152\n1,118,149\n8,119,147\n14,120,145\n20,122,142\n24,123,140\n28,124,137\n32,125,135\n35,126,133\n38,127,130\n41,128,128\n43,129,126\n45,130,123\n47,131,121\n49,132,118\n51,133,116\n52,134,114\n53,135,111\n55,136,109\n56,137,106\n57,138,104\n58,139,101\n59,140,99\n59,141,96\n60,142,94\n61,143,91\n61,144,88\n62,145,86\n62,146,83\n62,147,80\n63,148,78\n63,149,75\n63,150,72\n63,152,69\n63,153,66\n63,154,63\n63,155,60\n63,156,57\n63,157,53\n63,158,50\n63,159,47\n63,160,43\n63,161,40\n64,162,36\n64,163,33\n65,164,30\n66,165,27\n68,166,24\n70,166,22\n72,167,20\n74,168,18\n77,169,16\n79,169,16\n82,170,15\n85,171,15\n87,171,15\n90,172,15\n93,172,15\n96,173,16\n98,174,16\n101,174,17\n104,175,17\n106,175,18\n109,176,18\n111,177,18\n114,177,19\n116,178,19\n119,178,20\n121,179,20\n124,180,21\n126,180,21\n129,181,22\n131,181,22\n133,182,23\n136,182,23\n138,183,24\n140,183,24\n143,184,25\n145,185,25\n147,185,26\n150,186,26\n152,186,26\n154,187,27\n156,187,27\n159,188,28\n161,188,28\n163,189,29\n165,190,29\n168,190,30\n170,191,30\n172,191,31\n174,192,31\n176,192,31\n179,193,32\n181,193,32\n183,194,33\n185,194,33\n187,195,34\n190,195,34\n192,196,35\n194,196,35\n196,197,35\n198,197,36\n200,198,36\n203,198,37\n205,199,37\n207,199,38\n209,200,38\n211,200,39\n213,201,39\n215,201,39\n218,202,40\n220,202,40\n222,203,41\n224,203,41\n226,203,42\n228,204,42\n230,204,43\n232,205,43\n234,205,43\n236,205,44\n238,205,44\n240,205,44\n242,205,44\n244,205,44\n245,205,44\n246,204,44\n248,204,44\n249,203,44\n249,202,44\n250,201,43\n251,200,43\n251,199,42\n252,197,42\n252,196,41\n252,195,41\n252,194,40\n253,192,40\n253,191,39\n253,190,39\n253,188,38\n253,187,38\n253,186,37\n254,184,37\n254,183,36\n254,181,35\n254,180,35\n254,179,34\n254,177,34\n254,176,33\n254,175,33\n255,173,32\n255,172,31\n255,170,31\n255,169,30\n255,168,30\n255,166,29\n255,165,29\n255,163,28\n255,162,28\n255,161,27\n255,159,26\n255,158,26\n255,156,25\n255,155,25\n255,153,24\n255,152,24\n255,150,23\n255,149,22\n255,147,22\n255,146,21\n255,145,21\n255,143,20\n255,142,20\n255,140,19\n255,139,18\n255,137,18\n255,136,17\n255,134,17\n255,132,16\n255,131,16\n255,129,15\n255,128,14\n255,126,14\n255,125,13\n255,123,13\n255,121,12\n255,120,11\n255,118,11\n255,116,10\n255,115,10\n255,113,9\n255,111,8\n255,110,8\n255,108,7\n255,106,7\n255,105,6\n255,103,6\n255,101,5\n255,99,5\n255,97,4\n255,95,4\n255,94,3\n255,92,3\n255,90,3\n255,88,2\n254,86,2\n254,84,2\n254,82,1\n254,79,1\n254,77,1\n254,75,0\n254,73,0\n254,70,0\n254,68,0\n253,65,0\n253,63,0\n253,60,0\n253,57,0\n253,54,0\n253,51,0\n253,48,0`\n  .split('\\n')\n  .map(stringToHex);\n","import React from 'react';\nimport { CanvasFrame, Model } from 'react-sim';\n\n// import Model from './framed-model';\n\nimport { drawItemSquare, drawLinkSquare, initDataSquare } from './mazes/square';\nimport { drawItemHex, drawLinkHex, initDataHex } from './mazes/hex';\nimport {\n  drawItemTriangle,\n  drawLinkTriangle,\n  initDataTriangle,\n} from './mazes/triangle';\nimport {\n  drawItemCircle,\n  drawLinkCircle,\n  // drawStraightLinkCircle as drawLinkCircle,\n  initDataCircle,\n} from './mazes/circle';\n\nexport const grids = ['square', 'hexagonal', 'triangular', 'circle'];\n\nexport const params = {\n  drawItem: true,\n  useColor: false,\n  width: 332,\n  height: 332,\n  grid: 'square',\n  cellSize: 10,\n  wallColor: '#000',\n  pathColor: '#fff',\n  maxTime: Infinity,\n  ticksPerAnimation: 20,\n};\n\nexport const initData = (\n  { cellSize, height, width, grid },\n  random = Math.random\n) => {\n  // the way the dataset is initialized depends on the\n  // grid mode.\n\n  if (grid === 'circle') {\n    return initDataCircle({ cellSize, height, width }, random);\n  }\n  if (grid === 'square') {\n    return initDataSquare({ cellSize, height, width });\n  }\n  if (grid === 'hexagonal') {\n    return initDataHex({ cellSize, height, width });\n  }\n  if (grid === 'triangular') {\n    return initDataTriangle({ cellSize, height, width });\n  }\n};\nexport const updateData = (\n  { data: { cells, links, stack, visited, ...otherData }, params, complete },\n  random = Math.random\n) => {\n  // the algorithm to parse the graph is the same\n  // regardless of disposition of the grid\n  let options = [];\n  let currentCell;\n\n  if (visited.size === Object.values(cells).length || stack.length === 0) {\n    complete();\n  } else {\n    while (options.length === 0 && stack.length) {\n      currentCell = stack.pop();\n      options = cells[currentCell].neighbors.filter(d => !visited.has(d));\n    }\n    const option = Math.floor(random() * options.length);\n    const nextMove = options[option];\n    visited.add(nextMove);\n    links.push([currentCell, nextMove]);\n    stack.push(currentCell);\n    stack.push(nextMove);\n  }\n  return {\n    ...otherData,\n    cells,\n    links,\n    stack,\n    visited,\n  };\n};\n\nexport const draw = ({\n  params: { drawItem, height, width, grid, ticksPerAnimation, ...otherParams },\n  data: { cells, links, ...otherData },\n  tick,\n  circle,\n  ctx,\n}) => {\n  // likewise, the overall idea to draw the maze is the same\n  // regardless of its layout\n\n  const wallColor = otherParams.wallColor || otherData.wallColor;\n\n  if (tick === 0) {\n    if (drawItem) {\n      ctx.clearRect(0, 0, height, width);\n      Object.values(cells).forEach(cell =>\n        drawCell({\n          cell,\n          circle,\n          ctx,\n          grid,\n          height,\n          width,\n          ...otherParams,\n          ...otherData,\n        })\n      );\n    } else {\n      ctx.fillStyle = wallColor;\n      ctx.fillRect(0, 0, width, height);\n    }\n  } else {\n    for (let i = tick - ticksPerAnimation; i < tick; i++) {\n      drawLink({\n        cells,\n        circle,\n        ctx,\n        grid,\n        height,\n        width,\n        tick: i,\n        link: links[i],\n        ...otherParams,\n        ...otherData,\n      });\n    }\n  }\n};\n\nexport const drawCell = ({ cell, ctx, grid, ...other }) => {\n  // but how each cell is drawn depends on the layout\n  if (grid === 'circle') {\n    drawItemCircle({ cell, ctx, ...other });\n  }\n  if (grid === 'hexagonal') {\n    drawItemHex({ cell, ctx, ...other });\n  }\n  if (grid === 'square') {\n    drawItemSquare({ cell, ctx, ...other });\n  }\n  if (grid === 'triangular') {\n    drawItemTriangle({ cell, ctx, ...other });\n  }\n  return null;\n};\n\nexport const drawLink = ({ cells, ctx, circle, grid, link, ...other }) => {\n  // and how each link between 2 cells is drawn depends on layout, too.\n  if (link === undefined) {\n    return;\n  }\n  if (grid === 'square') {\n    drawLinkSquare({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'hexagonal') {\n    drawLinkHex({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'triangular') {\n    drawLinkTriangle({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'circle') {\n    drawLinkCircle({ cells, ctx, circle, link, ...other });\n  }\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Maze = props => {\n  return (\n    <Model\n      initialParams={{...params, ...props.extraParams}}\n      initData={initData}\n      updateData={updateData}\n      controls={{\n        type: 'radio',\n        vertical: true,\n        options: grids,\n        param: 'grid',\n        resetOnChange: true,\n      }}\n      {...props}\n    >\n      <Frame />\n    </Model>\n  );\n};\n\nexport default Maze;\n","import { P, P2, acuteArc, isBetween, average, getRadius } from './helpers';\nimport { CETR2 } from '../../constants';\n\nconst segmentRatio = 3;\n\nexport const initDataCircle = ({ height, width }, random = Math.random) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.6 * cellSize;\n  const wallSize = 0.4 * cellSize;\n\n  const layers = Math.floor(Math.min(height, width) / 2 / cellSize);\n  const cells = {\n    '0-0': {\n      id: '0-0',\n      layer: 0,\n      cell: 0,\n      startAngle: 0,\n      midangle: P,\n      endAngle: P2,\n      neighbors: [],\n    },\n  };\n  let nbSegmentsPreviousLayer = 1;\n  for (let l = 1; l < layers; l++) {\n    const circumference = P2 * getRadius(l, cellSize);\n    const nbSegments = Math.floor(circumference / (segmentRatio * cellSize));\n    let runningAngle = (P2 * random()) / nbSegments;\n    let previousLayerSegmentIdx = 0;\n    let previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n\n    // in order to determine the neighbors of cells of this layer with\n    // the cells in the previous layers, we start by looking for the\n    // first cell in the previous layer which angles are across our\n    // starting angle.\n\n    // this cell will be a neighbor with the first cell of our new layer.\n    let skippedSegments = 0;\n    while (\n      !isBetween(\n        runningAngle,\n        cells[previousLayerSegmentId].startAngle,\n        cells[previousLayerSegmentId].endAngle\n      )\n    ) {\n      previousLayerSegmentIdx =\n        (previousLayerSegmentIdx + 1) % nbSegmentsPreviousLayer;\n      previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n    }\n\n    for (let s = 0; s < nbSegments; s++) {\n      const endAngle = runningAngle + P2 / nbSegments;\n      const midAngle = runningAngle + P2 / (nbSegments * segmentRatio);\n      const id = `${l}-${s}`;\n      // siblings are cells on the same layer of the current segment.\n      // they are always neighbors to the current cell.\n\n      const siblings =\n        nbSegments === 2\n          ? [`${l}-${(s + 1) % nbSegments}`]\n          : [\n              `${l}-${(nbSegments + s - 1) % nbSegments}`,\n              `${l}-${(s + 1) % nbSegments}`,\n            ];\n      const cell = {\n        id,\n        layer: l,\n        cell: s,\n        startAngle: runningAngle,\n        midAngle,\n        endAngle,\n        startAngleDeg: (runningAngle * 180) / P,\n        endAngleDeg: (endAngle * 180) / P,\n        neighbors: [...siblings],\n      };\n\n      // there are 3 possible scenarios.\n      // 1 - we add a link between previousLayerSegment and current segment.\n      // we would do that if there's enough space to draw a path.\n      // PLS.endAngle would have to be between current midangle and endangle.\n\n      // 2 - we increment previousLayerSegment.\n      // we would do that if PLS.endAngle is less than current endAngle.\n      // ie - if PLS.endangle is between current running angle and current endangle.\n\n      // 3 - we add a link between this new PLS and the current cell.\n      // new PLS.midangle has to be less than endangle.\n      // so between current running and current endangle.\n\n      if (\n        isBetween(cells[previousLayerSegmentId].endAngle, midAngle, endAngle)\n      ) {\n        // scenario 1 - we add a link between current cell and PL\n        cell.neighbors.push(previousLayerSegmentId);\n        cells[previousLayerSegmentId].neighbors.push(id);\n      }\n\n      if (\n        isBetween(\n          cells[previousLayerSegmentId].endAngle,\n          runningAngle,\n          endAngle\n        )\n      ) {\n        previousLayerSegmentIdx =\n          (previousLayerSegmentIdx + 1) % nbSegmentsPreviousLayer;\n        previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n        if (\n          isBetween(\n            cells[previousLayerSegmentId].endAngle,\n            runningAngle,\n            endAngle\n          )\n        ) {\n          cell.neighbors.push(previousLayerSegmentId);\n          cells[previousLayerSegmentId].neighbors.push(id);\n        }\n      }\n\n      cells[id] = cell;\n      runningAngle = endAngle;\n    }\n    nbSegmentsPreviousLayer = nbSegments;\n  }\n  return {\n    cells,\n    cellSize,\n    pathSize,\n    wallSize,\n    links: [],\n    visited: new Set(['0-0']),\n    currentCell: '0-0',\n    stack: ['0-0'],\n  };\n};\n\nexport const drawItemCircle = ({\n  cell,\n  circle,\n  ctx,\n  cellSize,\n  pathColor,\n  pathSize,\n  wallColor,\n  wallSize,\n  height,\n  width,\n}) => {\n  if (cell.layer === undefined) {\n    return;\n  }\n  const [x, y] = [width / 2, height / 2];\n  if (cell.id === '0-0') {\n    // inner circle\n    ctx.fillStyle = pathColor;\n    ctx.strokeStyle = wallColor;\n    ctx.lineWidth = wallSize;\n    circle({ x, y, r: cellSize });\n    ctx.fill();\n    ctx.stroke();\n    return;\n  }\n  const { layer } = cell;\n  const circumference = P * getRadius(layer, cellSize);\n  const wallAngleDelta = (P * wallSize) / 2 / circumference;\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = cellSize;\n  ctx.beginPath();\n  acuteArc({\n    ctx,\n    x,\n    y,\n    r: getRadius(layer, cellSize),\n    a0: cell.startAngle,\n    a1: cell.endAngle,\n  });\n  ctx.stroke();\n\n  ctx.strokeStyle = pathColor;\n  ctx.lineWidth = pathSize;\n  ctx.beginPath();\n  acuteArc({\n    ctx,\n    x,\n    y,\n    r: getRadius(layer, cellSize),\n    a0: cell.startAngle + wallAngleDelta,\n    a1: cell.endAngle - wallAngleDelta,\n  });\n  ctx.stroke();\n};\nexport const drawStraightLinkCircle = ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  height,\n  width,\n  link,\n  pathColor,\n  pathSize,\n  wallColor,\n  tick,\n}) => {\n  const start = cells[link[0]];\n  const end = cells[link[1]];\n  const [x, y] = [width / 2, height / 2];\n  ctx.strokeStyle = wallColor;\n  ctx.fillStyle = wallColor;\n\n  ctx.strokeStyle = CETR2[tick % 256];\n  ctx.fillStyle = CETR2[tick % 256];\n  ctx.lineWidth = 4;\n  ctx.globalAlpha = 0.5;\n\n  const startMidAngle = (start.startAngle + start.endAngle) / 2;\n  const endMidAngle = (end.startAngle + end.endAngle) / 2;\n\n  const x0 = x + Math.cos(startMidAngle) * getRadius(start.layer, cellSize);\n  const y0 = y + Math.sin(startMidAngle) * getRadius(start.layer, cellSize);\n\n  const x1 = x + Math.cos(endMidAngle) * getRadius(end.layer, cellSize);\n  const y1 = y + Math.sin(endMidAngle) * getRadius(end.layer, cellSize);\n\n  circle({ x: x0, y: y0, r: 2 });\n  ctx.fill();\n  circle({ x: x1, y: y1, r: 2 });\n  ctx.fill();\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.stroke();\n  ctx.globalAlpha = 1;\n};\n\nexport const drawLinkCircle = ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  height,\n  width,\n  link,\n  pathColor,\n  pathSize,\n}) => {\n  const start = cells[link[0]];\n  if (start.layer === 0) {\n    // link from center\n    return drawLinkCircle({\n      cells,\n      cellSize,\n      ctx,\n      circle,\n      height,\n      width,\n      link: [link[1], link[0]],\n      pathColor,\n      pathSize,\n    });\n  }\n  ctx.save();\n  const end = cells[link[1]];\n  const [x, y] = [width / 2, height / 2];\n  ctx.strokeStyle = pathColor;\n  ctx.fillStyle = pathColor;\n  ctx.lineCap = 'round';\n  ctx.lineWidth = pathSize;\n\n  const startMidAngle = (start.startAngle + start.endAngle) / 2;\n\n  if (end.layer === 0) {\n    // link to center\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    const x0 = x + Math.cos(startMidAngle) * getRadius(start.layer, cellSize);\n    const y0 = y + Math.sin(startMidAngle) * getRadius(start.layer, cellSize);\n    ctx.lineTo(x0, y0);\n    ctx.stroke();\n    ctx.beginPath();\n    circle({ x, y, r: pathSize / 2 });\n    ctx.fill();\n    circle({ x: x0, y: y0, r: pathSize / 2 });\n    ctx.fill();\n    ctx.restore();\n    return;\n  }\n\n  const endMidAngle = (end.startAngle + end.endAngle) / 2;\n\n  if (start.layer === end.layer) {\n    // link on same layer\n    ctx.beginPath();\n    const r = getRadius(start.layer, cellSize);\n    acuteArc({\n      ctx,\n      x,\n      y,\n      r,\n      a0: startMidAngle,\n      a1: endMidAngle,\n    });\n    ctx.stroke();\n    const x0 = x + Math.cos(startMidAngle) * r;\n    const y0 = y + Math.sin(startMidAngle) * r;\n\n    const x1 = x + Math.cos(endMidAngle) * r;\n    const y1 = y + Math.sin(endMidAngle) * r;\n    ctx.beginPath();\n\n    circle({ x: x0, y: y0, r: pathSize / 2 });\n    ctx.fill();\n    circle({ x: x1, y: y1, r: pathSize / 2 });\n    ctx.fill();\n    ctx.restore();\n    return;\n  }\n\n  // general case - link on different layers\n  const firstEnd =\n    startMidAngle < endMidAngle\n      ? { ...start, midAngle: startMidAngle }\n      : { ...end, midAngle: endMidAngle };\n  const secondEnd =\n    startMidAngle < endMidAngle\n      ? { ...end, midAngle: endMidAngle }\n      : { ...start, midAngle: startMidAngle };\n  const r0 = getRadius(firstEnd.layer, cellSize);\n  const r1 = getRadius(secondEnd.layer, cellSize);\n\n  const midAngle = isBetween(\n    secondEnd.midAngle,\n    firstEnd.midAngle,\n    firstEnd.endAngle\n  )\n    ? average(firstEnd.midAngle, secondEnd.midAngle)\n    : average(secondEnd.startAngle, firstEnd.endAngle);\n\n  ctx.beginPath();\n  acuteArc({ ctx, x, y, r: r0, a0: firstEnd.midAngle, a1: midAngle });\n  ctx.stroke();\n  ctx.beginPath();\n\n  ctx.moveTo(x + Math.cos(midAngle) * r0, y + Math.sin(midAngle) * r0);\n  ctx.lineTo(x + Math.cos(midAngle) * r1, y + Math.sin(midAngle) * r1);\n  ctx.stroke();\n  ctx.beginPath();\n\n  acuteArc({ ctx, x, y, r: r1, a0: midAngle, a1: secondEnd.midAngle });\n  ctx.stroke();\n\n  const x0 = x + Math.cos(firstEnd.midAngle) * r0;\n  const y0 = y + Math.sin(firstEnd.midAngle) * r0;\n\n  const x1 = x + Math.cos(secondEnd.midAngle) * r1;\n  const y1 = y + Math.sin(secondEnd.midAngle) * r1;\n\n  circle({ x: x0, y: y0, r: pathSize / 2 });\n  ctx.fill();\n  circle({ x: x1, y: y1, r: pathSize / 2 });\n  ctx.fill();\n  ctx.restore();\n  return;\n};\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}