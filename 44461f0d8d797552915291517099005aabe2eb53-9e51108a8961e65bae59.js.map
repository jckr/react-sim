{"version":3,"sources":["webpack:///./src/images/gifs/automata.gif","webpack:///./src/components/examples/dice.js","webpack:///./src/images/gifs/dice.gif","webpack:///./src/images/gifs/simple-model.gif","webpack:///./src/images/gifs/segregation.gif","webpack:///./src/components/examples/boids.js","webpack:///./src/images/gifs/fibonacci.gif","webpack:///./src/images/gifs/epidemic.gif","webpack:///./src/images/gifs/percolation.gif","webpack:///./src/components/examples/automata.js","webpack:///./src/components/examples/activators.js","webpack:///./src/components/examples/chaos-game.js","webpack:///./src/components/examples/epidemic.js","webpack:///./src/components/examples/mazes/helpers.js","webpack:///./src/components/examples/mazes/square.js","webpack:///./src/components/examples/mazes/hex.js","webpack:///./src/components/examples/mazes/triangle.js","webpack:///./src/components/constants.js","webpack:///./src/components/examples/mazes/circle.js","webpack:///./src/components/examples/mazes.js","webpack:///./src/components/examples/percolation.js","webpack:///./src/components/examples/segregation.js","webpack:///./src/components/examples/simple-model.js","webpack:///./src/components/examples/snake/helpers.js","webpack:///./src/components/examples/snake/canvas.js","webpack:///./src/components/examples/snake/data.js","webpack:///./src/components/examples/snake.js","webpack:///./src/components/examples/index.js","webpack:///./src/images/gifs/chaos-game.gif","webpack:///./src/images/gifs/maze.gif","webpack:///./src/images/gifs/game-of-life.gif","webpack:///./src/components/examples/game-of-life.js","webpack:///./src/images/gifs/activators.gif","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es.math.hypot.js","webpack:///./src/images/gifs/snake.gif","webpack:///./src/components/examples/fibonacci.js","webpack:///./src/images/gifs/boids.gif"],"names":["module","exports","roll","random","Math","ceil","updateDice","data","tick","nbDice","params","lastTotals","totals","total","rolls","i","push","updatedTotals","average","initDice","Die","value","dotStyle","background","width","height","borderRadius","position","top","bottom","right","left","mid","style","marginRight","border","Bar","label","max","nbRolls","nbValues","theme","color","colors","primary","flexDirection","sx","justifyContent","alignItems","backgroundColor","fontSize","min","DiceFrame","render","this","props","minValue","Number","bars","Array","fill","map","d","index","key","bar","React","Component","Dice","useThemeUI","auto","controls","param","maxValue","resetOnChange","updateData","maxTime","initData","initialParams","alignmentCoefficient","alignmentDistance","cohesionCoefficient","cohesionDistance","maxforce","maxspeed","nbBoids","r","separationCoefficient","separationDistance","showCircles","normalize","v","l","hypot","div","mult","k","add","v0","v1","sub","limit","force","limitedForce","angle","PI","velocity","cos","sin","acceleration","separation","alignment","cohesion","forEach","boid","countSeparation","countAlignment","countCohesion","j","length","otherBoid","positionDifference","distanceBetweenBoids","diff","seek","atan2","target","desired","steer","draw","ctx","circle","fillStyle","fillRect","x","y","strokeStyle","globalAlpha","beginPath","moveTo","lineTo","closePath","stroke","Frame","Boids","Infinity","nocache","step","type","ChillBoids","isPlaying","noControls","rule","cols","rows","firstLine","floor","cell","withFrame","cachedData","nbRows","overflow","margin","direction","keys","rowIndex","ts","size","Square","bg","m","BitControl","withControls","bit","setParams","increment","set","onClick","mr","cursor","Automata","options","vertical","my","getTotalValue","grid","listOfCells","reduce","update","complete","JSON","parse","stringify","changes","w","row","col","innerNeighbors","outerNeighbors","mutation","density","innerRadius","outerRadius","cells","x0","x1","y0","y1","dist","ActivatorFrame","accessor","Activators","updateAttractors","angleOffset","nbAttractors","center","radius","init","undefined","attractors","o","points","prevDirection","rules","split","prev","curr","lastPoint","attractor","newPoint","globalCompositeOperation","point","BasicChaosGame","ticksPerAnimation","loop","Controls","nbToggles","toggle","a","flex","checked","charAt","setValue","updatedRules","slice","toggles","repeat","ChaosGame","COLORS","sick","recovered","healthy","dead","updateEpidemic","updatedData","agents","nbSick","nbHealthy","nbDead","nbRecovered","contaminationRisk","deathRisk","recoveryTicks","agent","status","recovery","otherAgent","dx","dy","distance","ax","ay","vx","vy","chooseMamongN","n","N","results","Set","Object","findOverlaps","filter","nbAgents","maxSpeed","nbDistancing","distancing","has","isDistancing","speed","isBouncing","EpidemicFrame","myRef","createRef","componentDidUpdate","current","getContext","lineWidth","clearRect","arc","ref","ConnectedFrame","series","Epidemic","hideSeries","stacked","HALF_SQRT3","sqrt","P","P2","getColRow","id","norm","a0","a1","getRadius","layer","cellSize","acuteArc","angle0","angle1","startAngle","endAngle","isClockwise","isBetween","start","end","drawLink","getCoords","link","pathColor","pathSize","wallSize","startCell","endCell","getNeighborsSquare","neighbors","getCoordsSquare","drawLinkSquare","getNeighborsHex","getCoordsHex","drawLinkHex","getNeighborsTriangle","drawLinkTriangle","arrayToHex","c","toString","padStart","join","grids","drawItem","useColor","wallColor","layers","midangle","nbSegmentsPreviousLayer","circumference","nbSegments","runningAngle","previousLayerSegmentIdx","previousLayerSegmentId","s","midAngle","startAngleDeg","endAngleDeg","links","visited","currentCell","stack","initDataCircle","nbCells","initDataSquare","initDataHex","initDataTriangle","otherData","values","pop","nextMove","otherParams","drawCell","other","wallAngleDelta","drawItemCircle","drawItemHex","strokeRect","drawItemSquare","isPointingDown","drawItemTriangle","drawLinkCircle","save","lineCap","startMidAngle","restore","endMidAngle","firstEnd","secondEnd","r0","r1","Maze","extraParams","queue","updatedStatus","nextQueue","shift","shouldComplete","updateDataGrid","nbPending","updatedCell","result","porosity","roundRectangle","colIndex","PercolationFrame","boxSizing","PercolationFrameGrid","ch","cw","display","textAlign","fontWeight","p","toFixed","initDataGrid","minP","stepP","ck","PercolationGrid","Percolation","proportion","tolerance","community","citizen","isHappy","happy","totalHappiness","rowHappiness","countHappiness","happiness","totalMoves","potentialNeighbors","onYBorder","getPotentialNeighbors","neighborsOfSameCommunity","offset","neighborX","neighborY","isInBounds","countNeighbors","threshold","movers","updatedTotalMoves","updatedGrid","prevX","prevY","firstUnhappyCitizen","randomUnhappyCitizenNumber","secondUnhappyCitizen","temp","concat","showmoves","sy","counterSeries","Segregation","delay","SimpleModel","DIRECTIONS","opposite","getDir","getRandomInBounds","isValid","initVisited","path","rowResults","getShortestPath","paths","next","found","node","getLongestPath","longestPath","updatedPath","extendPath","lastInLongestPath","nextInStack","rightPoints","leftPoints","unshift","considered","getActionGrid","totalPath","actionGrid","positionFruit","eligiblePositions","resultRow","displayGrid","displayHead","displayCircuit","accent","muted","secondary","gray","bestPath","snakePath","fruit","drawActionGrid","coords","c0","c1","horizontal","topLeft","topRight","bottomLeft","bottomRight","action","withTheme","initSnake","directionRandom","directionText","initialLength","snakePosRandom","xHead","yHead","up","down","minX","maxX","minY","maxY","head","tail","behindTail","frontOfSnake","initSnakeGrid","initSnakeGame","updateSnake","updatedActionGrid","updatedBestPath","fruitGrowth","safeMode","updatedHead","every","updatedLength","updatedFruit","pathToFruit","tailToFruit","backToTail","addToGrid","updatedDirection","updateSnakeGrid","Snake","noCache","normal","fast","SnakeGrid","gifs","activators","automata","boids","chaosGame","dice","epidemic","fibonacci","gameOfLife","mazes","maze","percolation","segregation","simpleModel","snake","examples","stale","xOffset","yOffset","updateGameOfLifeGrid","updateGridNoComplete","initGrid","Step2","Step3","Step4","Step5","showTimeSlider","GameOfLife","$","$hypot","abs","stat","arity","forced","NaN","value1","value2","arg","sum","aLen","arguments","larg","phi","D","0","1","2","3","lastNumber","side","FibonacciSpiralFrame","FibonacciSpiral","NumberFrame","flexWrap","FibonacciNumbers"],"mappings":"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","file":"44461f0d8d797552915291517099005aabe2eb53-9e51108a8961e65bae59.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/automata-b39fb918fe98750c08d0c7739c8e4c37.gif\";","import React from 'react';\nimport { useThemeUI } from 'theme-ui';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\n// helpers\n\nconst roll = random => Math.ceil(random() * 6);\n\nexport function updateDice(\n  { data, tick, params: { nbDice } },\n  random = Math.random\n) {\n  const lastTotals = data.totals;\n\n  // we roll the dice...\n  let total = 0;\n  const rolls = [];\n  for (let i = 0; i < nbDice; i++) {\n    rolls.push(roll(random));\n    total += rolls[i];\n  }\n\n  // and update the totals\n  const updatedTotals = {\n    ...lastTotals,\n    [total]: (lastTotals[total] || 0) + 1,\n  };\n\n  const average = (data.average * (tick - 1) + data.total) / tick;\n\n  return { rolls, average, total, totals: updatedTotals };\n}\n\nexport function initDice({ nbDice }) {\n  return {\n    rolls: [],\n    average: 3.5 * nbDice,\n    total: 0,\n    totals: {},\n  };\n}\n\nexport const Die = ({ value }) => {\n  const dotStyle = {\n    background: '#000',\n    width: 3,\n    height: 3,\n    borderRadius: '100%',\n    position: 'absolute',\n  };\n  const top = { top: 3 };\n  const bottom = { bottom: 3 };\n  const right = { right: 3 };\n  const left = { left: 3 };\n  const mid = { top: 8 };\n  const center = { left: 8 };\n  return (\n    <div\n      style={{\n        width: 21,\n        height: 21,\n        marginRight: 10,\n        position: 'relative',\n        border: '1px solid #000',\n        borderRadius: '3px',\n      }}\n    >\n      {value !== 1 && <div style={{ ...dotStyle, ...top, ...left }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...top, ...right }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...left }} />}\n      {value % 2 === 1 && <div style={{ ...dotStyle, ...mid, ...center }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...right }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...bottom, ...left }} />}\n      {value !== 1 && <div style={{ ...dotStyle, ...bottom, ...right }} />}\n    </div>\n  );\n};\n\nconst Bar = ({ label, max, nbRolls, nbValues, theme }) => {\n  const height = max ? (50 * nbRolls) / max : 0;\n  const width = 350 / nbValues;\n  const color = theme?.colors?.primary || '#33f';\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex\n        flexDirection=\"row\"\n        sx={{\n          justifyContent: 'center',\n          alignItems: 'flex-end',\n          width,\n          height: '50px',\n        }}\n      >\n        <div style={{ width: width * 0.8, height, backgroundColor: color }} />\n      </Flex>\n      <Flex\n        flexDirection=\"row\"\n        sx={{\n          justifyContent: 'center',\n          fontSize: `${Math.min(350 / (1.5 * nbValues), 12)}px`,\n        }}\n      >\n        {label}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport class DiceFrame extends React.Component {\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const {\n      data,\n      params: { nbDice },\n      theme,\n    } = this.props;\n\n    const minValue = Number(nbDice);\n    const maxValue = minValue * 6;\n    const nbValues = maxValue - minValue + 1;\n\n    const { rolls, totals } = data;\n    let max = 0;\n    const bars = Array(nbValues)\n      .fill(0)\n      .map((d, i) => {\n        const label = minValue + i;\n        const nbRolls = totals[label] || 0;\n        max = Math.max(max, nbRolls);\n        return { label, nbRolls };\n      });\n\n    return (\n      <Flex\n        flexDirection=\"column\"\n        sx={{ justifyContent: 'space-between', height: '140px' }}\n      >\n        <Flex flexDirection=\"row\">\n          {rolls.map((value, index) => (\n            <Die value={value} key={`k-${index}`} />\n          ))}\n        </Flex>\n        <Flex\n          flexDirection=\"row\"\n          sx={{ alignItems: 'flex-end', height: '80px' }}\n        >\n          {bars.map(bar => (\n            <Bar\n              {...bar}\n              key={bar.label}\n              max={max}\n              nbValues={nbValues}\n              theme={theme}\n            />\n          ))}\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nconst Dice = props => {\n  const context = useThemeUI();\n  const { theme } = context;\n  return (\n    <>\n      <Model\n        theme={theme}\n        auto={false}\n        controls={{\n          param: 'nbDice',\n          minValue: 1,\n          maxValue: 6,\n          resetOnChange: true,\n          label: 'Number of dice per roll',\n        }}\n        updateData={updateDice}\n        maxTime={1000}\n        initData={initDice}\n        initialParams={{\n          nbDice: 5,\n        }}\n        {...props}\n      >\n        <DiceFrame theme={theme} />\n      </Model>\n    </>\n  );\n};\n\nexport default Dice;\n","module.exports = __webpack_public_path__ + \"static/dice-2b10984d56dc4b5ad0213dc04be04471.gif\";","module.exports = __webpack_public_path__ + \"static/simple-model-112606a10d9be89ab56aa18ef510ac30.gif\";","module.exports = __webpack_public_path__ + \"static/segregation-4f3bc9a55501dca30a0df916012a0995.gif\";","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const params = {\n  alignmentCoefficient: 1,\n  alignmentDistance: 50,\n  cohesionCoefficient: 1,\n  cohesionDistance: 40,\n  height: 332,\n  maxforce: 0.03,\n  maxspeed: 2,\n  nbBoids: 50,\n  r: 5,\n  separationCoefficient: 1.5,\n  separationDistance: 25,\n  showCircles: true,\n  width: 332,\n};\n\n// helpers\n\nexport const normalize = v => {\n  const l = Math.hypot(...v);\n  if (l === 0) {\n    return v;\n  }\n  return div(v, l);\n};\n\nexport const mult = (v, k) => v.map(d => d * k);\nexport const div = (v, k) => v.map(d => d / k);\n\nexport const add = (v0, v1) => v0.map((d, i) => d + v1[i]);\nexport const sub = (v0, v1) => v0.map((d, i) => d - v1[i]);\n\nexport const limit = (v, k) => {\n  const force = Math.hypot(...v);\n  const limitedForce = Math.min(force, k);\n  return div(v, force / limitedForce);\n};\n\nexport const initData = ({ height, nbBoids, width }, random = Math.random) => {\n  const boids = Array(nbBoids)\n    .fill(0)\n    .map(d => {\n      const angle = random() * 2 * Math.PI;\n      const velocity = [Math.cos(angle), Math.sin(angle)];\n      const boid = {\n        angle,\n        acceleration: [0, 0],\n        position: [random() * width, random() * height],\n        velocity,\n      };\n      return boid;\n    });\n  return boids;\n};\n\nexport const updateData = ({ data, params }) => {\n  const {\n    alignmentDistance,\n    cohesionDistance,\n    separationCoefficient,\n    alignmentCoefficient,\n    cohesionCoefficient,\n    separationDistance,\n    maxspeed,\n    maxforce,\n    r,\n    height,\n    width,\n  } = params;\n\n  const separation = data.map(d => [0, 0]);\n  const alignment = data.map(d => [0, 0]);\n  const cohesion = data.map(d => [0, 0]);\n\n  data.forEach((boid, i) => {\n    let countSeparation = 0;\n    let countAlignment = 0;\n    let countCohesion = 0;\n\n    for (let j = 0; j < data.length; j++) {\n      if (j !== i) {\n        const otherBoid = data[j];\n        const positionDifference = sub(boid.position, otherBoid.position);\n        const distanceBetweenBoids = Math.hypot(...positionDifference);\n\n        // separation\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < separationDistance\n        ) {\n          const diff = div(normalize(positionDifference), distanceBetweenBoids);\n          separation[i] = add(separation[i], diff);\n          countSeparation++;\n        }\n\n        // alignment\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < alignmentDistance\n        ) {\n          alignment[i] = add(alignment[i], otherBoid.velocity);\n          countAlignment++;\n        }\n\n        // cohesion\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < cohesionDistance\n        ) {\n          cohesion[i] = add(cohesion[i], otherBoid.position);\n          countCohesion++;\n        }\n      }\n    }\n\n    // separation\n\n    if (countSeparation > 0) {\n      separation[i] = div(separation[i], countSeparation);\n      separation[i] = normalize(separation[i]);\n      separation[i] = mult(separation[i], maxspeed);\n      separation[i] = sub(separation[i], boid.velocity);\n      separation[i] = limit(separation[i], maxforce);\n      separation[i] = mult(separation[i], separationCoefficient);\n    }\n\n    // alignment\n    if (countAlignment > 0) {\n      alignment[i] = div(alignment[i], countAlignment);\n      alignment[i] = normalize(alignment[i]);\n      alignment[i] = mult(alignment[i], maxspeed);\n      alignment[i] = sub(alignment[i], boid.velocity);\n      alignment[i] = limit(alignment[i], maxforce);\n      alignment[i] = mult(alignment[i], alignmentCoefficient);\n    }\n\n    // cohesion\n    if (countCohesion > 0) {\n      cohesion[i] = div(cohesion[i], countCohesion);\n      cohesion[i] = seek(\n        boid.position,\n        cohesion[i],\n        boid.velocity,\n        maxspeed,\n        maxforce\n      );\n      cohesion[i] = mult(cohesion[i], cohesionCoefficient);\n    }\n  });\n\n  return data.map((boid, i) => {\n    // applying all three forces\n    const acceleration = add(add(alignment[i], cohesion[i]), separation[i]);\n    const velocity = limit(add(boid.velocity, acceleration), maxspeed);\n    const position = add(boid.position, velocity);\n    const angle = Math.atan2(boid.velocity[1], boid.velocity[0]);\n    // wraparound\n\n    if (position[0] < -r) {\n      position[0] = width + r;\n    }\n    if (position[0] > width + r) {\n      position[0] = -r;\n    }\n    if (position[1] < -r) {\n      position[1] = height + r;\n    }\n    if (position[1] > height + r) {\n      position[1] = -r;\n    }\n    return {\n      ...boid,\n      angle,\n      position,\n      velocity,\n    };\n  });\n};\n\nexport const seek = (position, target, velocity, maxspeed, maxforce) => {\n  const desired = mult(normalize(sub(target, position)), maxspeed);\n  const steer = sub(desired, velocity);\n  return limit(steer, maxforce);\n};\n\nexport const draw = ({\n  ctx,\n  circle,\n  data,\n  params: {\n    alignmentDistance,\n    cohesionDistance,\n    separationDistance,\n    height,\n    showCircles,\n    width,\n    r,\n  },\n}) => {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, width, height);\n  data.forEach(({ position: [x, y], angle }) => {\n    ctx.strokeStyle = '#000';\n    ctx.globalAlpha = 1;\n    ctx.beginPath();\n    ctx.moveTo(x + Math.cos(angle) * r, y + Math.sin(angle) * r);\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 2) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 2) / 3) * r * 2) / 3\n    );\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 4) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 4) / 3) * r * 2) / 3\n    );\n    ctx.closePath();\n    ctx.stroke();\n    if (showCircles) {\n      ctx.globalAlpha = 0.2;\n      ctx.strokeStyle = '#f00';\n      circle({ x, y, r: separationDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#0f0';\n      circle({ x, y, r: alignmentDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#00f';\n      circle({ x, y, r: cohesionDistance });\n      ctx.closePath();\n      ctx.stroke();\n    }\n  });\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Boids = props => (\n  <Model\n    initialParams={params}\n    maxTime={Infinity}\n    nocache\n    initData={initData}\n    updateData={updateData}\n    controls={[\n      [\n        {\n          param: 'alignmentCoefficient',\n          label: 'Alignment',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'alignmentDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'cohesionCoefficient',\n          label: 'Cohesion',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'cohesionDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'separationCoefficient',\n          label: 'Separation',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'separationDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      {\n        param: 'showCircles',\n        label: 'Show circles:',\n        type: 'toggle',\n      },\n    ]}\n    {...props}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const ChillBoids = props => (\n  <Boids isPlaying noControls {...props} />\n);\nexport default Boids;\n","module.exports = __webpack_public_path__ + \"static/fibonacci-2f933d66dfe433d4547e4bfb8218779f.gif\";","module.exports = __webpack_public_path__ + \"static/epidemic-543248eea98f59d4a14736f5d2271fbf.gif\";","module.exports = __webpack_public_path__ + \"static/percolation-bc66acc47a89ba3b5505739c37d87f08.gif\";","import React from 'react';\nimport { withControls, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nimport { Flex, Box } from 'rebass';\n\nexport const params = {\n  rule: 110,\n  cols: 33,\n  rows: 24,\n  firstLine: 'blank',\n};\nexport const initData = ({ cols, firstLine }, random = Math.random) => {\n  const data = Array(cols).fill(0);\n\n  data[Math.floor(data.length / 2)] = 1;\n  if (firstLine === 'blank') {\n    return data;\n  }\n  if (firstLine === 'full') {\n    return data.map(d => 1);\n  }\n  return data.map(d => (random() > 0.5 ? 1 : 0));\n};\nexport const updateData = ({ data, cols, params }) => {\n  const { rule } = params;\n  return data.map((cell, i) => {\n    const left = data[i - 1];\n    const mid = data[i];\n    const right = data[i + 1];\n\n    const bit = (left ? 4 : 0) + (mid ? 2 : 0) + (right ? 1 : 0);\n    const output = rule & (1 << bit);\n    // console.log(left, mid, right, bit, output})\n    return output;\n  });\n};\n\nexport const FrameComponent = ({ data, cachedData, tick, params }) => {\n  const { rows, cols } = params;\n  const nbRows = Math.min(tick, params.rows);\n  return (\n    <div\n      style={{\n        overflow: 'hidden',\n        position: 'relative',\n        height: rows * 10,\n        width: cols * 10,\n        margin: '0 auto',\n      }}\n    >\n      <Flex direction=\"column\" sx={{ position: 'absolute', top: 0 }}>\n        {[...Array(nbRows).keys()].map(rowIndex => {\n          const ts = tick - nbRows + rowIndex;\n          return (\n            <Flex\n              direction=\"row\"\n              key={`row-${ts}`}\n              sx={{ position: 'absolute', top: 10 * rowIndex }}\n            >\n              {cachedData[ts].map((cell, x) => (\n                <Square\n                  size={8}\n                  color={cell ? '#000' : 'none'}\n                  key={`cell-${x}`}\n                />\n              ))}\n            </Flex>\n          );\n        })}\n      </Flex>\n    </div>\n  );\n};\nconst Frame = withFrame(FrameComponent);\n\nconst Square = ({ color, size = 12 }) => (\n  <Box\n    sx={{\n      height: `${size}px`,\n      width: `${size}px`,\n      bg: color,\n      m: '1px',\n      border: '2px solid #000',\n    }}\n  />\n);\n\nconst BitControlComponent = ({ bit, params, setParams }) => {\n  const { rule } = params;\n  const increment = 1 << bit;\n  const set = increment & rule;\n  const left = 4 & bit;\n  const mid = 2 & bit;\n  const right = 1 & bit;\n  const action = () => {\n    const updatedRule = set ? rule - increment : rule + increment;\n    setParams({ rule: updatedRule });\n  };\n  return (\n    <Flex\n      flexDirection=\"column\"\n      onClick={action}\n      alignItems=\"center\"\n      sx={{ mr: 2, cursor: 'pointer' }}\n    >\n      <Flex flexDirection=\"row\">\n        <Square color={left ? '#000' : 'none'} />\n        <Square color={mid ? '#000' : 'none'} />\n        <Square color={right ? '#000' : 'none'} />\n      </Flex>\n      <Square color={set ? '#000' : 'none'} />\n    </Flex>\n  );\n};\n\nconst BitControl = withControls(BitControlComponent);\n\nconst Automata = props => (\n  <Model\n    initialParams={params}\n    initData={initData}\n    updateData={updateData}\n    controls={\n      ({ param: 'rule', maxValue: 255, label: 'Rule' },\n      {\n        param: 'firstLine',\n        label: 'First line:',\n        type: 'radio',\n        options: ['blank', 'full', 'random'],\n        resetOnChange: true,\n        vertical: true,\n      })\n    }\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      {props.noControls ? null : <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[0, 1, 2, 3].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>}\n      {props.noControls ? null : <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[4, 5, 6, 7].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>}\n    </Flex>\n  </Model>\n);\n\nexport default Automata;\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\n// helpers\n\nfunction getTotalValue(grid, listOfCells) {\n  return listOfCells.reduce((total, [x, y]) => total + grid[y][x].value, 0);\n}\n\nexport function update({ data, tick, params, complete }) {\n  let grid = JSON.parse(JSON.stringify(data));\n  let changes = 0;\n  const { height, width, w } = params;\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const { innerNeighbors, outerNeighbors } = data[row][col];\n\n      const activators = getTotalValue(data, innerNeighbors);\n      const inhibitors = getTotalValue(data, outerNeighbors);\n\n      const mutation = activators - w * inhibitors;\n\n      if (mutation > 0) {\n        grid[row][col].value = 1;\n      }\n      if (mutation < 0) {\n        grid[row][col].value = 0;\n      }\n      if (grid[row][col] !== data[row][col]) {\n        changes++;\n      }\n\n      // if mutation = 0, leave cell unchanged\n    }\n  }\n  if (changes < 0.01 * height * width) {\n    complete();\n  }\n  return grid;\n}\n\nexport function initData(\n  { height, width, density, innerRadius, outerRadius },\n  random = Math.random\n) {\n  const data = [];\n  for (let row = 0; row < height; row++) {\n    const cells = [];\n    for (let col = 0; col < width; col++) {\n      const innerNeighbors = [];\n      const outerNeighbors = [];\n\n      const x0 = Math.max(col - outerRadius, 0);\n      const x1 = Math.min(col + outerRadius, width - 1);\n      const y0 = Math.max(row - outerRadius, 0);\n      const y1 = Math.min(row + outerRadius, height - 1);\n\n      for (let x = x0; x < x1; x++) {\n        for (let y = y0; y < y1; y++) {\n          const dist = Math.hypot(col - x, row - y);\n          if (dist > innerRadius && dist <= outerRadius) {\n            outerNeighbors.push([x, y]);\n          } else {\n            if (dist > 0 && dist <= innerRadius) {\n              innerNeighbors.push([x, y]);\n            }\n          }\n        }\n      }\n\n      const value = random() < density;\n\n      cells.push({ value, innerNeighbors, outerNeighbors });\n    }\n    data.push(cells);\n  }\n  return data;\n}\n\nexport const ActivatorFrame = props => (\n  <Grid size={10} accessor={d => (d.value ? '#000' : 'none')} {...props} />\n);\nconst Activators = props => (\n  <Model\n    auto=\"false\"\n    controls={[\n      [\n        {\n          param: 'innerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Inner Radius',\n        },\n        {\n          param: 'outerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Outer Radius',\n        },\n      ],\n      [\n        { param: 'w', minValue: 0, maxValue: 1, label: 'weight', step: 0.01 },\n        { param: 'density', minValue: 0, maxValue: 1, step: 0.1 },\n      ],\n    ]}\n    initData={initData}\n    initialParams={{\n      height: 35,\n      width: 35,\n      density: 0.5,\n      innerRadius: 3,\n      outerRadius: 6,\n      w: 0.35,\n    }}\n    updateData={update}\n    maxTime={200}\n    {...props}\n  >\n    <ActivatorFrame />\n  </Model>\n);\n\nexport default Activators;\n","import React from 'react';\nimport {\n  withControls,\n  Range,\n  Toggle,\n  CanvasFrame,\n} from 'react-sim';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\nexport const updateAttractors = ({ angleOffset, nbAttractors, height, width }) => {\n  const center = { x: width / 2, y: height / 2 };\n  const radius = (0.95 * Math.min(height, width)) / 2;\n  return [...Array(nbAttractors).keys()].map(i => {\n    const angle = angleOffset + (0.5 * (nbAttractors + 4 * i)) / nbAttractors;\n    return {\n      x: center.x + radius * Math.cos(angle * Math.PI),\n      y: center.y - radius * Math.sin(angle * Math.PI),\n    };\n  });\n};\n\nexport function init({ angle, nbAttractors, height, width }, random = Math.random) {\n  const angleOffset = angle === undefined ? random() * 2 * Math.PI : angle;\n  const attractors = updateAttractors({\n    angleOffset,\n    nbAttractors,\n    height,\n    width,\n  });\n  const o = {\n    x: random() * width,\n    y: random() * height,\n  };\n  const background = `hsla(${Math.floor(random() * 360)}, 30%, 7%, 1)`;\n  const color = `hsla(${Math.floor(random() * 360)}, 77%, 45%, 1)`;\n  return {\n    attractors,\n    background,\n    color,\n    points: [o],\n    prevDirection: 0,\n  };\n}\n\nexport function updateData({ data, params, tick }, random = Math.random) {\n  const { nbAttractors } = params;\n  if (data.attractors.length !== nbAttractors) {\n    data.attractors = updateAttractors(params);\n  }\n  const rules = params.rules\n    ? params.rules.split('').reduce((prev, curr, i) => {\n        if (curr === '1') {\n          prev.push(i);\n        }\n        return prev;\n      }, [])\n    : [...Array(nbAttractors).keys()];\n  const direction =\n    (data.prevDirection + rules[Math.floor(random() * rules.length)]) %\n    nbAttractors;\n  data.prevDirection = direction;\n  const lastPoint = data.points[data.points.length - 1];\n  const attractor = data.attractors[direction];\n  const newPoint = {\n    x: (lastPoint.x + attractor.x) / 2,\n    y: (lastPoint.y + attractor.y) / 2,\n  };\n  data.points.push(newPoint);\n  return data;\n}\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nfunction draw({ ctx, data, params, tick, circle }) {\n  const { height, width } = params;\n  ctx.globalAlpha = 1;\n  ctx.fillStyle = data.background;\n  ctx.globalCompositeOperation = 'source-over';\n  ctx.fillRect(0, 0, width, height);\n\n  ctx.globalCompositeOperation = 'lighter';\n  ctx.fillStyle = data.color;\n  ctx.globalAlpha = 0.8;\n\n  for (let i = 0; i < tick; i++) {\n    const point = data.points[i];\n    const { x, y } = point;\n    const { r } = params;\n    circle({ x, y, r });\n    ctx.fill();\n  }\n}\n\nexport const BasicChaosGame = props => (\n  <Model\n    ticksPerAnimation={100}\n    maxTime={10000}\n    initData={init}\n    isPlaying\n    loop\n    updateData={updateData}\n    initialParams={{\n      height: 332,\n      width: 332,\n      nbAttractors: 3,\n      r: 1,\n    }}\n    {...props}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const CustomControls = ({ params, setParams }) => {\n  const nbToggles = params.nbAttractors;\n  const nbRows = Math.ceil(nbToggles / 5);\n  const toggle = a =>\n    a < nbToggles ? (\n      <Toggle\n        key={`toggle-${a}`}\n        sx={{ flex: '1 1 0' }}\n        checked={params.rules.charAt(a) === '1'}\n        label={`${a + 1}${a === 0 ? 'st' : a === 1 ? 'nd' : 'th'} vertex`}\n        setValue={checked => {\n          const bit = params.rules.charAt(a) === '1' ? '0' : '1';\n          const updatedRules =\n            params.rules.slice(0, a) + bit + params.rules.slice(a + 1);\n          setParams({ rules: updatedRules });\n        }}\n      />\n    ) : null;\n\n  const toggles = [...Array(nbRows).keys()].map(r => (\n    <Flex\n      flexDirection=\"row\"\n      key={`tr-${r}`}\n      sx={{ justifyContent: 'space-between' }}\n    >\n      {[r * 5, r * 5 + 1, r * 5 + 2, r * 5 + 3, r * 5 + 4].map(toggle)}\n    </Flex>\n  ));\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Range\n        key=\"range\"\n        minValue={3}\n        maxValue={20}\n        label=\"Vertices\"\n        value={params.nbAttractors}\n        setValue={v =>\n          setParams({ nbAttractors: v, rules: '1'.repeat(v) }, true)\n        }\n      />\n      <Flex flexDirection=\"column\">{toggles}</Flex>\n    </Flex>\n  );\n};\n\nconst Controls = withControls(CustomControls);\nexport const ChaosGame = props => (\n  <Model\n    ticksPerAnimation={100}\n    maxTime={20000}\n    initData={init}\n    updateData={updateData}\n    initialParams={{\n      height: 332,\n      width: 332,\n      nbAttractors: 7,\n      angle: 0,\n      r: 1,\n      rules: '1001100',\n    }}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <Controls />\n    </Flex>\n  </Model>\n);\nexport default ChaosGame;\n","import React from 'react';\nimport { Flex } from 'rebass';\nimport { TimeSeries, Counter, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst COLORS = {\n  sick: '#4f8c9d',\n  recovered: '#add51f',\n  healthy: '#997cfb',\n  dead: '#6a9012',\n};\n\nexport function updateEpidemic(\n  { data, tick, params, complete },\n  random = Math.random\n) {\n  let updatedData = JSON.parse(JSON.stringify(data.agents));\n  let nbSick = 0,\n    nbHealthy = 0,\n    nbDead = 0,\n    nbRecovered = 0;\n\n  const {\n    contaminationRisk,\n    deathRisk,\n    r,\n    recoveryTicks,\n    height,\n    width,\n  } = params;\n\n  updatedData.forEach((agent, i) => {\n    // update status\n\n    if (agent.status === 'sick') {\n      if (tick >= agent.recovery) {\n        agent.status = 'recovered';\n      } else {\n        if (random() < deathRisk) {\n          agent.status = 'dead';\n        }\n      }\n    }\n    if (agent.status !== 'dead') {\n      // checking for collisions\n\n      for (let j = i + 1; j < updatedData.length; j++) {\n        let otherAgent = updatedData[j];\n        const dx = otherAgent.x - agent.x;\n        const dy = otherAgent.y - agent.y;\n        const distance = Math.hypot(dx, dy);\n        if (distance < 2 * r) {\n          // collision\n\n          const ax = dx / distance;\n          const ay = dy / distance;\n\n          agent.vx = agent.vx - ax;\n          agent.vy = agent.vy - ay;\n          otherAgent.vx = ax;\n          otherAgent.vy = ay;\n\n          // test for contagion\n\n          if (agent.status === 'sick' && otherAgent.status === 'healthy') {\n            if (random() <= contaminationRisk) {\n              otherAgent.status = 'sick';\n              otherAgent.recovery = tick + recoveryTicks;\n            }\n          }\n          if (agent.status === 'healthy' && otherAgent.status === 'sick') {\n            if (random() <= contaminationRisk) {\n              agent.status = 'sick';\n              agent.recovery = tick + recoveryTicks;\n            }\n          }\n        }\n      }\n\n      // now move\n\n      agent.x = agent.x + agent.vx;\n      agent.y = agent.y + agent.vy;\n\n      // bouncing on walls\n      if (\n        (agent.vy < 0 && agent.y < r) ||\n        (agent.vy > 0 && agent.y > height - r)\n      ) {\n        agent.vy = -agent.vy;\n      }\n\n      if (\n        (agent.vx < 0 && agent.x < r) ||\n        (agent.vx > 0 && agent.x > width - r)\n      ) {\n        agent.vx = -agent.vx;\n      }\n    }\n    // counting agents\n    switch (agent.status) {\n      case 'sick':\n        nbSick++;\n        break;\n      case 'healthy':\n        nbHealthy++;\n        break;\n      case 'recovered':\n        nbRecovered++;\n        break;\n      case 'dead':\n        nbDead++;\n        break;\n      default:\n    }\n  });\n  if (nbSick === 0) {\n    complete();\n  }\n\n  return {\n    agents: updatedData,\n    sick: nbSick,\n    recovered: nbRecovered,\n    dead: nbDead,\n    healthy: nbHealthy,\n  };\n}\n\nfunction chooseMamongN(n, m, random) {\n  const N = [...Array(n).keys()].reduce((prev, curr) => {\n    prev[curr] = true;\n    return prev;\n  }, {});\n  const results = new Set();\n\n  for (let i = 0; i < m; i++) {\n    const k = Math.floor(random() * Object.keys(N).length);\n    results.add(k);\n    delete N[k];\n  }\n\n  return results;\n}\n\nfunction findOverlaps(agents, i, r, point) {\n  const { x: x0, y: y0 } = point;\n  const domain = agents.slice(i);\n  return domain.filter(({ x, y }) => Math.hypot(x - x0, y - y0) < r);\n}\n\nexport function initData(\n  {\n    nbAgents = 200,\n    nbSick = 5,\n    maxSpeed = 30,\n    contaminationRisk = 1,\n    deathRisk = 0.005,\n    recoveryTicks = 20,\n    nbDistancing = 50,\n    r = 3,\n    height = 300,\n    width = 400,\n  },\n  random = Math.random\n) {\n  const sick = chooseMamongN(nbAgents, nbSick, random);\n  const distancing = chooseMamongN(nbAgents, nbDistancing, random);\n  const agents = [];\n\n  for (let i = 0; i < nbAgents; i++) {\n    let x, y;\n\n    do {\n      y = r / 2 + random() * (height - r);\n      x = r / 2 + random() * (width - r);\n    } while (findOverlaps(agents, 0, r, { x, y }).length);\n\n    const status = sick.has(i) ? 'sick' : 'healthy';\n\n    const recovery = sick.has(i) ? recoveryTicks : null;\n    const isDistancing = distancing.has(i);\n    const speed = isDistancing ? 0 : maxSpeed;\n    const vx = speed * (random() * 2 - 1);\n    const vy = speed * (random() * 2 - 1);\n    const isBouncing = false;\n\n    agents.push({\n      x,\n      y,\n      status,\n      isBouncing,\n      isDistancing,\n      vx,\n      vy,\n      recovery,\n      speed,\n    });\n  }\n  return {\n    agents,\n    sick: nbSick,\n    healthy: nbAgents - nbSick,\n    dead: 0,\n    recovered: 0,\n  };\n}\n\nexport class EpidemicFrame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  componentDidUpdate() {\n    const {\n      data,\n      params: { width, height, r },\n    } = this.props;\n    const canvas = this.myRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#fff';\n    ctx.lineWidth = '5px';\n    ctx.clearRect(0, 0, width, height);\n    data.agents.forEach(({ status, isBouncing, x, y }) => {\n      ctx.beginPath();\n      ctx.fillStyle = COLORS[status];\n      ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n      ctx.closePath();\n      ctx.fill();\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas\n          width={this.props.params.width}\n          height={this.props.params.height}\n          ref={this.myRef}\n        />\n      </div>\n    );\n  }\n}\n\nconst ConnectedFrame = withFrame(EpidemicFrame);\n\nconst series = [\n  {\n    color: COLORS['healthy'],\n    label: 'Healthy',\n    accessor: d => d.healthy,\n  },\n  {\n    color: COLORS['sick'],\n    label: 'Sick',\n    accessor: d => d.sick,\n  },\n  {\n    color: COLORS['recovered'],\n    label: 'Recovered',\n    accessor: d => d.recovered,\n  },\n  {\n    color: COLORS['dead'],\n    label: 'Dead',\n    accessor: d => d.dead,\n  },\n];\n\nconst Epidemic = props => (\n  <Model\n    initData={initData}\n    initialParams={{\n      nbAgents: 500,\n      nbSick: 20,\n      contaminationRisk: 1,\n      deathRisk: 0.001,\n      maxSpeed: 2,\n      recoveryTicks: 200,\n      nbDistancing: 0,\n      r: 2,\n      height: 332,\n      width: 332,\n    }}\n    updateData={updateEpidemic}\n    maxTime={500}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <ConnectedFrame />\n      {props.hideSeries ? null : <TimeSeries series={series} stacked={true} />}\n      {props.hideSeries ? null : <Counter series={series} />}\n    </Flex>\n  </Model>\n);\n\nexport default Epidemic;\n","export const HALF_SQRT3 = Math.sqrt(3) / 2;\nexport const P = Math.PI;\nexport const P2 = Math.PI * 2;\nexport const getColRow = (id, cols) => {\n  const col = id % cols;\n  const row = (id - col) / cols;\n  return { col, row };\n};\n\nexport const norm = a => (a + P2) % P2;\n\nexport const average = (a0, a1) => {\n  let min = Math.min(norm(a0), norm(a1));\n  let max = Math.max(norm(a0), norm(a1));\n\n  if (max - min > P) {\n    return norm(min + (max - min) / 2 + P);\n  }\n  return norm(min + (max - min) / 2);\n};\n\nexport const getRadius = (layer, cellSize) => {\n  return (layer + 0.5) * cellSize;\n};\n\nexport const acuteArc = ({ ctx, x, y, r, a0, a1 }) => {\n  // draws the smallest arc between angles a0 and a1;\n  const angle0 = norm(a0);\n  const angle1 = norm(a1);\n\n  const startAngle = Math.min(angle0, angle1);\n  const endAngle = Math.max(angle0, angle1);\n\n  const isClockwise = norm(endAngle - startAngle) > P;\n\n  ctx.arc(x, y, r, startAngle, endAngle, isClockwise);\n};\n\nexport const isBetween = (angle, start, end) => {\n  if (norm(start) === norm(end)) {\n    return true;\n  }\n  let a = norm(angle - start);\n  let e = norm(end - start);\n  return a < e;\n};\n\nexport const drawLink = getCoords => ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  link,\n  pathColor,\n  pathSize,\n  wallSize,\n}) => {\n  const startCell = cells[link[0]];\n  const endCell = cells[link[1]];\n\n  const start = getCoords({ cell: startCell, cellSize, wallSize });\n  const end = getCoords({ cell: endCell, cellSize, wallSize });\n\n  ctx.strokeStyle = pathColor;\n  ctx.fillStyle = pathColor;\n\n  circle({ x: start[0], y: start[1], r: pathSize / 2 });\n  ctx.fill();\n  circle({ x: end[0], y: end[1], r: pathSize / 2 });\n  ctx.fill();\n\n  ctx.lineWidth = pathSize;\n\n  ctx.beginPath();\n  ctx.moveTo(...start);\n  ctx.lineTo(...end);\n  ctx.closePath();\n  ctx.stroke();\n};\n","import { getColRow, drawLink } from './helpers';\n\nexport const getNeighborsSquare = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if (row) {\n    neighbors.push(id - cols);\n  }\n  if (row < rows - 1) {\n    neighbors.push(id + cols);\n  }\n  return neighbors;\n};\n\nexport const initDataSquare = (\n  { height, width, grid }\n) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.8 * cellSize;\n  const wallSize = 0.2 * cellSize;\n\n  const rows = Math.floor(height / cellSize);\n  const cols = Math.floor(width / cellSize);\n  const nbCells = rows * cols;\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsSquare(id, cols, rows),\n    };\n    return prev;\n  }, {});\n  return {\n    cellSize,\n    wallSize,\n    pathSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsSquare = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + (col + 0.5) * cellSize,\n    wallSize / 2 + (row + 0.5) * cellSize,\n  ];\n};\n\nexport const drawItemSquare = ({\n  cell,\n  ctx,\n  cellSize,\n  wallColor,\n  wallSize,\n}) => {\n  const center = getCoordsSquare({ cell, cellSize, wallSize });\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n  ctx.strokeRect(\n    center[0] - 0.5 * cellSize,\n    center[1] - 0.5 * cellSize,\n    cellSize,\n    cellSize\n  );\n};\n\nexport const drawLinkSquare = drawLink(getCoordsSquare);\n","import { HALF_SQRT3, drawLink, getColRow } from './helpers';\n\nexport const getNeighborsHex = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if (row) {\n    neighbors.push(id - cols);\n    if (row % 2) {\n      if (col < cols - 1) {\n        neighbors.push(id - cols + 1);\n      }\n    } else {\n      if (col > 0) {\n        neighbors.push(id - cols - 1);\n      }\n    }\n  }\n  if (row < rows - 1) {\n    neighbors.push(id + cols);\n    if (row % 2) {\n      if (col < cols - 1) {\n        neighbors.push(id + cols + 1);\n      }\n    } else {\n      if (col > 0) {\n        neighbors.push(id + cols - 1);\n      }\n    }\n  }\n  return neighbors;\n};\n\nexport const initDataHex = ({ height, width }) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.8 * cellSize;\n  const wallSize = 0.1 * cellSize;\n  const rows = Math.floor((4 * height) / (6 * cellSize) - 0.5);\n  const cols = Math.floor(width / (2 * cellSize * HALF_SQRT3) - 0.5);\n  const nbCells = rows * cols;\n\n  // same as for squares:\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsHex(id, cols, rows),\n    };\n    return prev;\n  }, {});\n\n  return {\n    cellSize,\n    pathSize,\n    wallSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsHex = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + ((row % 2 ? 1 : 0.5) + col) * HALF_SQRT3 * cellSize * 2,\n    wallSize / 2 + (1 + 1.5 * row) * cellSize,\n  ];\n};\n\nexport const drawItemHex = ({ cell, ctx, cellSize, wallColor, wallSize }) => {\n  const center = getCoordsHex({ cell, cellSize, wallSize });\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n\n  ctx.beginPath();\n  ctx.moveTo(center[0], center[1] - cellSize);\n  ctx.lineTo(center[0] - HALF_SQRT3 * cellSize, center[1] - 0.5 * cellSize);\n  ctx.lineTo(center[0] - HALF_SQRT3 * cellSize, center[1] + 0.5 * cellSize);\n  ctx.lineTo(center[0], center[1] + cellSize);\n  ctx.lineTo(center[0] + HALF_SQRT3 * cellSize, center[1] + 0.5 * cellSize);\n  ctx.lineTo(center[0] + HALF_SQRT3 * cellSize, center[1] - 0.5 * cellSize);\n  ctx.closePath();\n  ctx.stroke();\n  return;\n};\n\nexport const drawLinkHex = drawLink(getCoordsHex);\n","import { HALF_SQRT3, drawLink, getColRow } from './helpers';\n\nexport const getNeighborsTriangle = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if ((col + row) % 2) {\n    // triangle pointing down\n    if (row) {\n      neighbors.push(id - cols);\n    }\n  } else {\n    if (row < rows - 1) {\n      neighbors.push(id + cols);\n    }\n  }\n  return neighbors;\n};\n\nexport const initDataTriangle = ({ height, width }) => {\n  const cellSize = Math.max(10, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.5 * cellSize;\n  const wallSize = 0.2 * cellSize;\n  const rows = Math.floor(height / (cellSize * HALF_SQRT3));\n  const cols = Math.floor((2 * width) / cellSize) - 1;\n  const nbCells = rows * cols;\n\n  // same as for squares:\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsTriangle(id, cols, rows),\n    };\n    return prev;\n  }, {});\n\n  return {\n    cellSize,\n    pathSize,\n    wallSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsTriangle = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + ((col + 1) * cellSize) / 2,\n    wallSize / 2 +\n      (row + ((row + col) % 2 ? 1 / 3 : 2 / 3)) * HALF_SQRT3 * cellSize,\n  ];\n};\n\nexport const drawItemTriangle = ({\n  cell,\n  ctx,\n  cellSize,\n  wallColor,\n  wallSize,\n}) => {\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n  const { col, row } = cell;\n  const isPointingDown = (col + row) % 2;\n\n  ctx.beginPath();\n  if (isPointingDown) {\n    ctx.moveTo(\n      wallSize / 2 + (col * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 2) * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 1) * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n  } else {\n    ctx.moveTo(\n      wallSize / 2 + (col * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 2) * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 1) * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n  }\n  ctx.closePath();\n  ctx.stroke();\n  return;\n};\n\nexport const drawLinkTriangle = drawLink(getCoordsTriangle);\n","export const reactsimGrid = `0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000\n0011110011111001110001110011111000000111001110100000100\n0010001010000010001010001000100000001000100100110001100\n0010001010000010001010001000100000001000100100101010100\n0010001010000010001010000000100000001000000100100100100\n0011110011110010001010000000100011100111000100100000100\n0010001010000011111010000000100000000000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001011111010001001110000100000000111001110100000100\n0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000`\n  .split('\\n')\n  .map(row => row.split('').map(Number));\n\nexport const stringToHex = a => arrayToHex(a.split(',').map(Number));\nexport const arrayToHex = a =>\n  `#${a.map(c => c.toString(16).padStart(2, '0')).join('')}`;\n\nexport const CETR2 = `0,52,245\n0,55,243\n0,58,240\n0,60,237\n0,63,234\n0,65,231\n0,68,229\n0,70,226\n0,72,223\n0,74,220\n0,77,217\n0,79,214\n0,81,212\n0,83,209\n0,85,206\n0,87,203\n0,89,201\n0,90,198\n0,92,195\n0,94,192\n0,96,189\n0,98,187\n0,99,184\n0,101,181\n0,103,178\n0,104,176\n0,106,173\n0,108,170\n0,109,167\n0,111,165\n0,112,162\n0,113,160\n0,115,157\n0,116,154\n0,117,152\n1,118,149\n8,119,147\n14,120,145\n20,122,142\n24,123,140\n28,124,137\n32,125,135\n35,126,133\n38,127,130\n41,128,128\n43,129,126\n45,130,123\n47,131,121\n49,132,118\n51,133,116\n52,134,114\n53,135,111\n55,136,109\n56,137,106\n57,138,104\n58,139,101\n59,140,99\n59,141,96\n60,142,94\n61,143,91\n61,144,88\n62,145,86\n62,146,83\n62,147,80\n63,148,78\n63,149,75\n63,150,72\n63,152,69\n63,153,66\n63,154,63\n63,155,60\n63,156,57\n63,157,53\n63,158,50\n63,159,47\n63,160,43\n63,161,40\n64,162,36\n64,163,33\n65,164,30\n66,165,27\n68,166,24\n70,166,22\n72,167,20\n74,168,18\n77,169,16\n79,169,16\n82,170,15\n85,171,15\n87,171,15\n90,172,15\n93,172,15\n96,173,16\n98,174,16\n101,174,17\n104,175,17\n106,175,18\n109,176,18\n111,177,18\n114,177,19\n116,178,19\n119,178,20\n121,179,20\n124,180,21\n126,180,21\n129,181,22\n131,181,22\n133,182,23\n136,182,23\n138,183,24\n140,183,24\n143,184,25\n145,185,25\n147,185,26\n150,186,26\n152,186,26\n154,187,27\n156,187,27\n159,188,28\n161,188,28\n163,189,29\n165,190,29\n168,190,30\n170,191,30\n172,191,31\n174,192,31\n176,192,31\n179,193,32\n181,193,32\n183,194,33\n185,194,33\n187,195,34\n190,195,34\n192,196,35\n194,196,35\n196,197,35\n198,197,36\n200,198,36\n203,198,37\n205,199,37\n207,199,38\n209,200,38\n211,200,39\n213,201,39\n215,201,39\n218,202,40\n220,202,40\n222,203,41\n224,203,41\n226,203,42\n228,204,42\n230,204,43\n232,205,43\n234,205,43\n236,205,44\n238,205,44\n240,205,44\n242,205,44\n244,205,44\n245,205,44\n246,204,44\n248,204,44\n249,203,44\n249,202,44\n250,201,43\n251,200,43\n251,199,42\n252,197,42\n252,196,41\n252,195,41\n252,194,40\n253,192,40\n253,191,39\n253,190,39\n253,188,38\n253,187,38\n253,186,37\n254,184,37\n254,183,36\n254,181,35\n254,180,35\n254,179,34\n254,177,34\n254,176,33\n254,175,33\n255,173,32\n255,172,31\n255,170,31\n255,169,30\n255,168,30\n255,166,29\n255,165,29\n255,163,28\n255,162,28\n255,161,27\n255,159,26\n255,158,26\n255,156,25\n255,155,25\n255,153,24\n255,152,24\n255,150,23\n255,149,22\n255,147,22\n255,146,21\n255,145,21\n255,143,20\n255,142,20\n255,140,19\n255,139,18\n255,137,18\n255,136,17\n255,134,17\n255,132,16\n255,131,16\n255,129,15\n255,128,14\n255,126,14\n255,125,13\n255,123,13\n255,121,12\n255,120,11\n255,118,11\n255,116,10\n255,115,10\n255,113,9\n255,111,8\n255,110,8\n255,108,7\n255,106,7\n255,105,6\n255,103,6\n255,101,5\n255,99,5\n255,97,4\n255,95,4\n255,94,3\n255,92,3\n255,90,3\n255,88,2\n254,86,2\n254,84,2\n254,82,1\n254,79,1\n254,77,1\n254,75,0\n254,73,0\n254,70,0\n254,68,0\n253,65,0\n253,63,0\n253,60,0\n253,57,0\n253,54,0\n253,51,0\n253,48,0`\n  .split('\\n')\n  .map(stringToHex);\n","import { P, P2, acuteArc, isBetween, average, getRadius } from './helpers';\nimport { CETR2 } from '../../constants';\n\nconst segmentRatio = 3;\n\nexport const initDataCircle = ({ height, width }, random = Math.random) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.6 * cellSize;\n  const wallSize = 0.4 * cellSize;\n\n  const layers = Math.floor(Math.min(height, width) / 2 / cellSize);\n  const cells = {\n    '0-0': {\n      id: '0-0',\n      layer: 0,\n      cell: 0,\n      startAngle: 0,\n      midangle: P,\n      endAngle: P2,\n      neighbors: [],\n    },\n  };\n  let nbSegmentsPreviousLayer = 1;\n  for (let l = 1; l < layers; l++) {\n    const circumference = P2 * getRadius(l, cellSize);\n    const nbSegments = Math.floor(circumference / (segmentRatio * cellSize));\n    let runningAngle = (P2 * random()) / nbSegments;\n    let previousLayerSegmentIdx = 0;\n    let previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n\n    // in order to determine the neighbors of cells of this layer with\n    // the cells in the previous layers, we start by looking for the\n    // first cell in the previous layer which angles are across our\n    // starting angle.\n\n    // this cell will be a neighbor with the first cell of our new layer.\n    let skippedSegments = 0;\n    while (\n      !isBetween(\n        runningAngle,\n        cells[previousLayerSegmentId].startAngle,\n        cells[previousLayerSegmentId].endAngle\n      )\n    ) {\n      previousLayerSegmentIdx =\n        (previousLayerSegmentIdx + 1) % nbSegmentsPreviousLayer;\n      previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n    }\n\n    for (let s = 0; s < nbSegments; s++) {\n      const endAngle = runningAngle + P2 / nbSegments;\n      const midAngle = runningAngle + P2 / (nbSegments * segmentRatio);\n      const id = `${l}-${s}`;\n      // siblings are cells on the same layer of the current segment.\n      // they are always neighbors to the current cell.\n\n      const siblings =\n        nbSegments === 2\n          ? [`${l}-${(s + 1) % nbSegments}`]\n          : [\n              `${l}-${(nbSegments + s - 1) % nbSegments}`,\n              `${l}-${(s + 1) % nbSegments}`,\n            ];\n      const cell = {\n        id,\n        layer: l,\n        cell: s,\n        startAngle: runningAngle,\n        midAngle,\n        endAngle,\n        startAngleDeg: (runningAngle * 180) / P,\n        endAngleDeg: (endAngle * 180) / P,\n        neighbors: [...siblings],\n      };\n\n      // there are 3 possible scenarios.\n      // 1 - we add a link between previousLayerSegment and current segment.\n      // we would do that if there's enough space to draw a path.\n      // PLS.endAngle would have to be between current midangle and endangle.\n\n      // 2 - we increment previousLayerSegment.\n      // we would do that if PLS.endAngle is less than current endAngle.\n      // ie - if PLS.endangle is between current running angle and current endangle.\n\n      // 3 - we add a link between this new PLS and the current cell.\n      // new PLS.midangle has to be less than endangle.\n      // so between current running and current endangle.\n\n      if (\n        isBetween(cells[previousLayerSegmentId].endAngle, midAngle, endAngle)\n      ) {\n        // scenario 1 - we add a link between current cell and PL\n        cell.neighbors.push(previousLayerSegmentId);\n        cells[previousLayerSegmentId].neighbors.push(id);\n      }\n\n      if (\n        isBetween(\n          cells[previousLayerSegmentId].endAngle,\n          runningAngle,\n          endAngle\n        )\n      ) {\n        previousLayerSegmentIdx =\n          (previousLayerSegmentIdx + 1) % nbSegmentsPreviousLayer;\n        previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n        if (\n          isBetween(\n            cells[previousLayerSegmentId].endAngle,\n            runningAngle,\n            endAngle\n          )\n        ) {\n          cell.neighbors.push(previousLayerSegmentId);\n          cells[previousLayerSegmentId].neighbors.push(id);\n        }\n      }\n\n      cells[id] = cell;\n      runningAngle = endAngle;\n    }\n    nbSegmentsPreviousLayer = nbSegments;\n  }\n  return {\n    cells,\n    cellSize,\n    pathSize,\n    wallSize,\n    links: [],\n    visited: new Set(['0-0']),\n    currentCell: '0-0',\n    stack: ['0-0'],\n  };\n};\n\nexport const drawItemCircle = ({\n  cell,\n  circle,\n  ctx,\n  cellSize,\n  pathColor,\n  pathSize,\n  wallColor,\n  wallSize,\n  height,\n  width,\n}) => {\n  if (cell.layer === undefined) {\n    return;\n  }\n  const [x, y] = [width / 2, height / 2];\n  if (cell.id === '0-0') {\n    // inner circle\n    ctx.fillStyle = pathColor;\n    ctx.strokeStyle = wallColor;\n    ctx.lineWidth = wallSize;\n    circle({ x, y, r: cellSize });\n    ctx.fill();\n    ctx.stroke();\n    return;\n  }\n  const { layer } = cell;\n  const circumference = P * getRadius(layer, cellSize);\n  const wallAngleDelta = (P * wallSize) / 2 / circumference;\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = cellSize;\n  ctx.beginPath();\n  acuteArc({\n    ctx,\n    x,\n    y,\n    r: getRadius(layer, cellSize),\n    a0: cell.startAngle,\n    a1: cell.endAngle,\n  });\n  ctx.stroke();\n\n  ctx.strokeStyle = pathColor;\n  ctx.lineWidth = pathSize;\n  ctx.beginPath();\n  acuteArc({\n    ctx,\n    x,\n    y,\n    r: getRadius(layer, cellSize),\n    a0: cell.startAngle + wallAngleDelta,\n    a1: cell.endAngle - wallAngleDelta,\n  });\n  ctx.stroke();\n};\nexport const drawStraightLinkCircle = ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  height,\n  width,\n  link,\n  pathColor,\n  pathSize,\n  wallColor,\n  tick,\n}) => {\n  const start = cells[link[0]];\n  const end = cells[link[1]];\n  const [x, y] = [width / 2, height / 2];\n  ctx.strokeStyle = wallColor;\n  ctx.fillStyle = wallColor;\n\n  ctx.strokeStyle = CETR2[tick % 256];\n  ctx.fillStyle = CETR2[tick % 256];\n  ctx.lineWidth = 4;\n  ctx.globalAlpha = 0.5;\n\n  const startMidAngle = (start.startAngle + start.endAngle) / 2;\n  const endMidAngle = (end.startAngle + end.endAngle) / 2;\n\n  const x0 = x + Math.cos(startMidAngle) * getRadius(start.layer, cellSize);\n  const y0 = y + Math.sin(startMidAngle) * getRadius(start.layer, cellSize);\n\n  const x1 = x + Math.cos(endMidAngle) * getRadius(end.layer, cellSize);\n  const y1 = y + Math.sin(endMidAngle) * getRadius(end.layer, cellSize);\n\n  circle({ x: x0, y: y0, r: 2 });\n  ctx.fill();\n  circle({ x: x1, y: y1, r: 2 });\n  ctx.fill();\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.stroke();\n  ctx.globalAlpha = 1;\n};\n\nexport const drawLinkCircle = ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  height,\n  width,\n  link,\n  pathColor,\n  pathSize,\n}) => {\n  const start = cells[link[0]];\n  if (start.layer === 0) {\n    // link from center\n    return drawLinkCircle({\n      cells,\n      cellSize,\n      ctx,\n      circle,\n      height,\n      width,\n      link: [link[1], link[0]],\n      pathColor,\n      pathSize,\n    });\n  }\n  ctx.save();\n  const end = cells[link[1]];\n  const [x, y] = [width / 2, height / 2];\n  ctx.strokeStyle = pathColor;\n  ctx.fillStyle = pathColor;\n  ctx.lineCap = 'round';\n  ctx.lineWidth = pathSize;\n\n  const startMidAngle = (start.startAngle + start.endAngle) / 2;\n\n  if (end.layer === 0) {\n    // link to center\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    const x0 = x + Math.cos(startMidAngle) * getRadius(start.layer, cellSize);\n    const y0 = y + Math.sin(startMidAngle) * getRadius(start.layer, cellSize);\n    ctx.lineTo(x0, y0);\n    ctx.stroke();\n    ctx.beginPath();\n    circle({ x, y, r: pathSize / 2 });\n    ctx.fill();\n    circle({ x: x0, y: y0, r: pathSize / 2 });\n    ctx.fill();\n    ctx.restore();\n    return;\n  }\n\n  const endMidAngle = (end.startAngle + end.endAngle) / 2;\n\n  if (start.layer === end.layer) {\n    // link on same layer\n    ctx.beginPath();\n    const r = getRadius(start.layer, cellSize);\n    acuteArc({\n      ctx,\n      x,\n      y,\n      r,\n      a0: startMidAngle,\n      a1: endMidAngle,\n    });\n    ctx.stroke();\n    const x0 = x + Math.cos(startMidAngle) * r;\n    const y0 = y + Math.sin(startMidAngle) * r;\n\n    const x1 = x + Math.cos(endMidAngle) * r;\n    const y1 = y + Math.sin(endMidAngle) * r;\n    ctx.beginPath();\n\n    circle({ x: x0, y: y0, r: pathSize / 2 });\n    ctx.fill();\n    circle({ x: x1, y: y1, r: pathSize / 2 });\n    ctx.fill();\n    ctx.restore();\n    return;\n  }\n\n  // general case - link on different layers\n  const firstEnd =\n    startMidAngle < endMidAngle\n      ? { ...start, midAngle: startMidAngle }\n      : { ...end, midAngle: endMidAngle };\n  const secondEnd =\n    startMidAngle < endMidAngle\n      ? { ...end, midAngle: endMidAngle }\n      : { ...start, midAngle: startMidAngle };\n  const r0 = getRadius(firstEnd.layer, cellSize);\n  const r1 = getRadius(secondEnd.layer, cellSize);\n\n  const midAngle = isBetween(\n    secondEnd.midAngle,\n    firstEnd.midAngle,\n    firstEnd.endAngle\n  )\n    ? average(firstEnd.midAngle, secondEnd.midAngle)\n    : average(secondEnd.startAngle, firstEnd.endAngle);\n\n  ctx.beginPath();\n  acuteArc({ ctx, x, y, r: r0, a0: firstEnd.midAngle, a1: midAngle });\n  ctx.stroke();\n  ctx.beginPath();\n\n  ctx.moveTo(x + Math.cos(midAngle) * r0, y + Math.sin(midAngle) * r0);\n  ctx.lineTo(x + Math.cos(midAngle) * r1, y + Math.sin(midAngle) * r1);\n  ctx.stroke();\n  ctx.beginPath();\n\n  acuteArc({ ctx, x, y, r: r1, a0: midAngle, a1: secondEnd.midAngle });\n  ctx.stroke();\n\n  const x0 = x + Math.cos(firstEnd.midAngle) * r0;\n  const y0 = y + Math.sin(firstEnd.midAngle) * r0;\n\n  const x1 = x + Math.cos(secondEnd.midAngle) * r1;\n  const y1 = y + Math.sin(secondEnd.midAngle) * r1;\n\n  circle({ x: x0, y: y0, r: pathSize / 2 });\n  ctx.fill();\n  circle({ x: x1, y: y1, r: pathSize / 2 });\n  ctx.fill();\n  ctx.restore();\n  return;\n};\n","import React from 'react';\nimport { CanvasFrame, Model } from 'react-sim';\n\n// import Model from './framed-model';\n\nimport { drawItemSquare, drawLinkSquare, initDataSquare } from './mazes/square';\nimport { drawItemHex, drawLinkHex, initDataHex } from './mazes/hex';\nimport {\n  drawItemTriangle,\n  drawLinkTriangle,\n  initDataTriangle,\n} from './mazes/triangle';\nimport {\n  drawItemCircle,\n  drawLinkCircle,\n  // drawStraightLinkCircle as drawLinkCircle,\n  initDataCircle,\n} from './mazes/circle';\n\nexport const grids = ['square', 'hexagonal', 'triangular', 'circle'];\n\nexport const params = {\n  drawItem: true,\n  useColor: false,\n  width: 332,\n  height: 332,\n  grid: 'square',\n  cellSize: 10,\n  wallColor: '#000',\n  pathColor: '#fff',\n  maxTime: Infinity,\n  ticksPerAnimation: 20,\n};\n\nexport const initData = (\n  { cellSize, height, width, grid },\n  random = Math.random\n) => {\n  // the way the dataset is initialized depends on the\n  // grid mode.\n\n  if (grid === 'circle') {\n    return initDataCircle({ cellSize, height, width }, random);\n  }\n  if (grid === 'square') {\n    return initDataSquare({ cellSize, height, width });\n  }\n  if (grid === 'hexagonal') {\n    return initDataHex({ cellSize, height, width });\n  }\n  if (grid === 'triangular') {\n    return initDataTriangle({ cellSize, height, width });\n  }\n};\nexport const updateData = (\n  { data: { cells, links, stack, visited, ...otherData }, params, complete },\n  random = Math.random\n) => {\n  // the algorithm to parse the graph is the same\n  // regardless of disposition of the grid\n  let options = [];\n  let currentCell;\n\n  if (visited.size === Object.values(cells).length || stack.length === 0) {\n    complete();\n  } else {\n    while (options.length === 0 && stack.length) {\n      currentCell = stack.pop();\n      options = cells[currentCell].neighbors.filter(d => !visited.has(d));\n    }\n    const option = Math.floor(random() * options.length);\n    const nextMove = options[option];\n    visited.add(nextMove);\n    links.push([currentCell, nextMove]);\n    stack.push(currentCell);\n    stack.push(nextMove);\n  }\n  return {\n    ...otherData,\n    cells,\n    links,\n    stack,\n    visited,\n  };\n};\n\nexport const draw = ({\n  params: { drawItem, height, width, grid, ticksPerAnimation, ...otherParams },\n  data: { cells, links, ...otherData },\n  tick,\n  circle,\n  ctx,\n}) => {\n  // likewise, the overall idea to draw the maze is the same\n  // regardless of its layout\n\n  const wallColor = otherParams.wallColor || otherData.wallColor;\n\n  if (tick === 0) {\n    if (drawItem) {\n      ctx.clearRect(0, 0, height, width);\n      Object.values(cells).forEach(cell =>\n        drawCell({\n          cell,\n          circle,\n          ctx,\n          grid,\n          height,\n          width,\n          ...otherParams,\n          ...otherData,\n        })\n      );\n    } else {\n      ctx.fillStyle = wallColor;\n      ctx.fillRect(0, 0, width, height);\n    }\n  } else {\n    for (let i = tick - ticksPerAnimation; i < tick; i++) {\n      drawLink({\n        cells,\n        circle,\n        ctx,\n        grid,\n        height,\n        width,\n        tick: i,\n        link: links[i],\n        ...otherParams,\n        ...otherData,\n      });\n    }\n  }\n};\n\nexport const drawCell = ({ cell, ctx, grid, ...other }) => {\n  // but how each cell is drawn depends on the layout\n  if (grid === 'circle') {\n    drawItemCircle({ cell, ctx, ...other });\n  }\n  if (grid === 'hexagonal') {\n    drawItemHex({ cell, ctx, ...other });\n  }\n  if (grid === 'square') {\n    drawItemSquare({ cell, ctx, ...other });\n  }\n  if (grid === 'triangular') {\n    drawItemTriangle({ cell, ctx, ...other });\n  }\n  return null;\n};\n\nexport const drawLink = ({ cells, ctx, circle, grid, link, ...other }) => {\n  // and how each link between 2 cells is drawn depends on layout, too.\n  if (link === undefined) {\n    return;\n  }\n  if (grid === 'square') {\n    drawLinkSquare({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'hexagonal') {\n    drawLinkHex({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'triangular') {\n    drawLinkTriangle({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'circle') {\n    drawLinkCircle({ cells, ctx, circle, link, ...other });\n  }\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Maze = props => {\n  return (\n    <Model\n      initialParams={{...params, ...props.extraParams}}\n      initData={initData}\n      updateData={updateData}\n      controls={{\n        type: 'radio',\n        vertical: true,\n        options: grids,\n        param: 'grid',\n        resetOnChange: true,\n      }}\n      {...props}\n    >\n      <Frame />\n    </Model>\n  );\n};\n\nexport default Maze;\n","import React from 'react';\nimport { Flex, Box } from 'rebass';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst EMPTY = 0;\nconst ROCK = 1;\nconst ROCK_WITH_ROCK_ON_RIGHT = 2;\nconst ROCK_WITH_ROCK_BELOW = 3;\nconst ROCK_WITH_ROCK_RIGHT_AND_BELOW = 4;\nconst ROCK_WITH_ROCKS_ALL_AROUND = 5;\nconst WATER_FROM_TOP = 6;\nconst WATER_FROM_RIGHT = 7;\nconst WATER_FROM_LEFT = 8;\n\nconst status = {\n  pending: 'PENDING',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n};\n\nexport function updateData({ data, params, complete }) {\n  const { queue, grid } = data;\n  const { height } = params;\n  let updatedStatus = data.status;\n  if (queue.length === 0) {\n    updatedStatus = status.failure;\n  }\n  const nextQueue = [];\n  while (queue.length > 0 && updatedStatus === status.pending) {\n    const cell = queue.shift();\n    const { x, y } = cell;\n    if (y === height - 1) {\n      updatedStatus = status.success;\n    } else if (grid[y + 1][x] === EMPTY) {\n      grid[y + 1][x] = WATER_FROM_TOP;\n      nextQueue.push({ x, y: y + 1 });\n    }\n    // note - grid[y][x - 1] and grid[y][x + 1] can be undefined,\n    // but that doesn't make any difference.\n    if (grid[y][x - 1] === EMPTY) {\n      grid[y][x - 1] = WATER_FROM_RIGHT;\n      nextQueue.push({ x: x - 1, y });\n    }\n    if (grid[y][x + 1] === EMPTY) {\n      grid[y][x + 1] = WATER_FROM_LEFT;\n      nextQueue.push({ x: x + 1, y });\n    }\n  }\n  if (updatedStatus !== status.pending && params.shouldComplete) {\n    complete(updatedStatus);\n  }\n  return {\n    grid,\n    queue: nextQueue,\n    status: updatedStatus,\n  };\n}\n\nexport function updateDataGrid({ data, params, complete }) {\n  let nbPending = 0;\n  data.grids.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      if (cell.status === status.pending) {\n        const updatedCell = updateData({\n          data: cell,\n          params: { height: params.height, shouldComplete: false },\n        });\n        data.grids[y][x] = updatedCell;\n        if (updatedCell.status === status.pending) {\n          nbPending++;\n        }\n        if (updatedCell.status === status.success) {\n          data.cols[x].result++;\n        }\n      }\n    })\n  );\n  if (nbPending === 0) {\n    complete();\n  }\n  return data;\n}\n\nexport function initData({ porosity, height, width }, random = Math.random) {\n  const grid = [];\n  const queue = [];\n  let x, y;\n  for (y = 0; y < height; y++) {\n    const row = [];\n    for (x = 0; x < width; x++) {\n      row.push(random() > Number(porosity) ? ROCK : EMPTY);\n    }\n    grid.push(row);\n  }\n\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      if (grid[y][x]) {\n        if (grid[y + 1] && grid[y + 1][x]) {\n          // rock below\n          grid[y][x] = grid[y][x] + 2;\n        }\n        if (grid[y][x + 1]) {\n          // rock to the right\n          grid[y][x] = grid[y][x] + 1;\n        }\n        if (\n          grid[y][x] === ROCK_WITH_ROCK_RIGHT_AND_BELOW &&\n          grid[y + 1][x + 1]\n        ) {\n          grid[y][x] = ROCK_WITH_ROCKS_ALL_AROUND;\n        }\n      } else {\n        if (y === 0) {\n          grid[y][x] = WATER_FROM_TOP;\n          queue.push({ x, y });\n        }\n      }\n    }\n  }\n  return { grid, queue, status: status.pending };\n}\n\nexport function draw({\n  ctx,\n  params: { cellSize, margin, height, width },\n  data,\n  roundRectangle,\n}) {\n  ctx.fillStyle = 'beige';\n  ctx.fillRect(0, 0, width * cellSize, height * cellSize);\n\n  data.grid.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const x = colIndex * cellSize;\n      const y = rowIndex * cellSize;\n      if (cell >= ROCK && cell <= ROCK_WITH_ROCKS_ALL_AROUND) {\n        // rock\n        ctx.fillStyle = '#777';\n\n        roundRectangle({\n          ctx,\n          x: x + margin,\n          y: y + margin,\n          r: margin,\n          height: cellSize - 2 * margin,\n          width: cellSize - 2 * margin,\n        });\n        ctx.fill();\n        if (\n          cell === ROCK_WITH_ROCK_ON_RIGHT ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + margin,\n            4 * margin,\n            cellSize - 2 * margin\n          );\n        }\n        if (\n          cell === ROCK_WITH_ROCK_BELOW ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + margin,\n            y + cellSize - 2 * margin,\n            cellSize - 2 * margin,\n            4 * margin\n          );\n        }\n        if (cell === ROCK_WITH_ROCKS_ALL_AROUND) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + cellSize - 2 * margin,\n            4 * margin,\n            4 * margin\n          );\n        }\n      }\n      if (cell >= WATER_FROM_TOP) {\n        ctx.lineWidth = cellSize - 2 * margin;\n        ctx.strokeStyle = 'cyan';\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(x + cellSize / 2, y + cellSize / 2);\n        if (cell === WATER_FROM_TOP) {\n          ctx.lineTo(x + cellSize / 2, Math.max(y - cellSize / 2, 0));\n        }\n        if (cell === WATER_FROM_LEFT) {\n          ctx.lineTo(x - cellSize / 2, y + cellSize / 2);\n        }\n        if (cell === WATER_FROM_RIGHT) {\n          ctx.lineTo(x + (3 * cellSize) / 2, y + cellSize / 2);\n        }\n        ctx.stroke();\n      }\n    });\n  });\n}\n\nexport const PercolationFrame = ({ data, params }) => {\n  const { cellSize, height, width } = params;\n\n  return (\n    <div\n      style={{\n        boxSizing: 'content-box',\n        height: cellSize * height,\n        width: cellSize * width,\n        border: `3px solid ${\n          data.status === status.pending\n            ? 'transparent'\n            : data.status === status.success\n            ? '#33e'\n            : '#777'\n        }`,\n      }}\n    >\n      <CanvasFrame\n        data={data}\n        width={width * cellSize}\n        height={height * cellSize}\n        draw={draw}\n      />\n    </div>\n  );\n};\n\nexport const PercolationFrameGrid = ({ data, params }) => {\n  const ch = params.height * params.cellSize;\n  const cw = params.width * params.cellSize;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        margin: '0 auto',\n        flexDirection: 'column',\n        height: (ch + 10) * params.rows + 60,\n        width: (cw + 10) * params.cols + 10,\n      }}\n    >\n      <Flex\n        flexDirection=\"row\"\n        sx={{ justifyContent: 'space-around', width: '100%' }}\n      >\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n              fontWeight: 2,\n            }}\n          >\n            {c.p.toFixed(2)}\n          </Box>\n        ))}\n      </Flex>\n      <Flex\n        sx={{\n          flexDirection: 'column',\n          justifyContent: 'space-around',\n          height: (ch + 10) * params.rows,\n        }}\n      >\n        {data.grids.map((row, y) => (\n          <Flex\n            sx={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n            }}\n            key={`row-${y}`}\n          >\n            {row.map((cell, x) => (\n              <Flex\n                sx={{\n                  height: params.height * params.cellSize,\n                  width: params.width * params.cellSize,\n                }}\n              >\n                <PercolationFrame\n                  key={`cell-${x}-${y}`}\n                  data={cell}\n                  params={params}\n                />\n              </Flex>\n            ))}\n          </Flex>\n        ))}\n      </Flex>\n\n      <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-around' }}>\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n            }}\n          >\n            {`${c.result}/${c.total}`}\n          </Box>\n        ))}\n      </Flex>\n    </div>\n  );\n};\n\nexport const Percolation = props => {\n  return (\n    <>\n      <Model\n        auto={false}\n        controls={{\n          param: 'porosity',\n          label: 'Porosity',\n          minValue: 0,\n          maxValue: 1,\n          step: 0.01,\n        }}\n        updateData={updateData}\n        maxTime={Infinity}\n        initData={initData}\n        initialParams={{\n          width: 66,\n          height: 66,\n          cellSize: 5,\n          margin: 0,\n          porosity: 0.6,\n          shouldComplete: true,\n        }}\n        {...props}\n      >\n        <PercolationFrame />\n      </Model>\n    </>\n  );\n};\n\nexport function initDataGrid(\n  { width, height, cellSize, margin, rows, cols, minP, stepP },\n  random = Math.random\n) {\n  const ck = [...Array(cols).keys()];\n  return {\n    cols: ck.map(c => ({ p: minP + c * stepP, result: 0, total: rows })),\n    grids: [...Array(rows).keys()].map(r =>\n      ck.map(c =>\n        initData(\n          {\n            height,\n            width,\n            porosity: minP + c * stepP,\n          },\n          random\n        )\n      )\n    ),\n  };\n}\n\nexport const PercolationGrid = props => {\n  return (\n    <>\n      <Model\n        auto={false}\n        updateData={updateDataGrid}\n        maxTime={Infinity}\n        initData={initDataGrid}\n        initialParams={{\n          width: 20,\n          height: 20,\n          cellSize: 1.5,\n          margin: 0,\n          rows: 10,\n          cols: 8,\n          minP: 0.54,\n          stepP: 0.02,\n        }}\n        {...props}\n      >\n        <PercolationFrameGrid />\n      </Model>\n    </>\n  );\n};\n\nexport default Percolation;\n","import React from 'react';\nimport { CanvasFrame, Counter, TimeSeries } from 'react-sim';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\nexport const initData = (params, random = Math.random) => {\n  const { cols, rows, proportion, tolerance } = params;\n  const grid = Array(rows)\n    .fill(0)\n    .map(row =>\n      Array(cols)\n        .fill(0)\n        .map(col => ({ community: 100 * random() > proportion ? 1 : 0 }))\n    );\n  grid.forEach((row, y) =>\n    row.forEach((citizen, x) => {\n      citizen.isHappy = isHappy(grid, x, y, tolerance);\n    })\n  );\n  const happy = countHappiness(grid, tolerance);\n  const happiness = happy / (cols * rows);\n  return { grid, happy, happiness, totalMoves: 0 };\n};\n\nexport function countNeighbors(grid, x, y) {\n  const { community } = grid[y][x];\n  return [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ].reduce((neighborsOfSameCommunity, offset) => {\n    const neighborX = x + offset[0];\n    const neighborY = y + offset[1];\n    if (isInBounds(grid, neighborX, neighborY)) {\n      const neighbor = grid[neighborY][neighborX];\n      if (neighbor.community === community) {\n        neighborsOfSameCommunity = neighborsOfSameCommunity + 1;\n      }\n    }\n    return neighborsOfSameCommunity;\n  }, 0);\n}\n\nexport function isInBounds(grid, x, y) {\n  if (!grid) {\n    return false;\n  }\n  const height = grid.length;\n  if (y < 0 || y >= height) {\n    return false;\n  }\n  const width = grid[0].length;\n  if (x < 0 || x >= width) {\n    return false;\n  }\n  return true;\n}\n\nexport function getPotentialNeighbors(grid, x, y) {\n  const height = grid.length;\n  const width = grid[0].length;\n  const onXBorder = x === 0 || x === width - 1;\n  const onYBorder = y === 0 || y === height - 1;\n\n  return onXBorder ? (onYBorder ? 3 : 5) : onYBorder ? 5 : 8;\n}\n\nexport function isHappy(grid, x, y, tolerance) {\n  const potentialNeighbors = getPotentialNeighbors(grid, x, y);\n  const differentNeighbors = potentialNeighbors - countNeighbors(grid, x, y);\n  return differentNeighbors / potentialNeighbors < tolerance / 100;\n}\n\nexport function countHappiness(grid, tolerance) {\n  return grid.reduce(\n    (totalHappiness, row, y) =>\n      row.reduce((rowHappiness, cell, x) => {\n        return rowHappiness + isHappy(grid, x, y, tolerance);\n      }, totalHappiness),\n    0\n  );\n}\n\nexport const updateData = (\n  { data, params, complete },\n  random = Math.random\n) => {\n  const { cols, rows, threshold, tolerance } = params;\n  let movers = [];\n  let happy = 0;\n  let updatedTotalMoves = data.totalMoves;\n  let updatedGrid = JSON.parse(JSON.stringify(data.grid));\n  updatedGrid.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      cell.prevX = x;\n      cell.prevY = y;\n      if (isHappy(updatedGrid, x, y, tolerance)) {\n        happy = happy + 1;\n        cell.isHappy = 1;\n      } else {\n        cell.isHappy = 0;\n        movers.push([x, y]);\n      }\n    })\n  );\n  if (happy > (cols * rows * threshold) / 100) {\n    complete();\n  }\n  // we only swap citizens if there are more than 2 willing to swap\n  while (movers.length > 1) {\n    // first to move is head of the queue\n    const firstUnhappyCitizen = movers.shift();\n    // second to move is randomly chosen in the queue\n    const randomUnhappyCitizenNumber = Math.floor(random() * movers.length);\n\n    const secondUnhappyCitizen = movers[randomUnhappyCitizenNumber];\n\n    // we swap them in grid\n\n    const temp = {\n      ...updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]],\n    };\n    updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]] = {\n      ...updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]],\n    };\n    updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]] = temp;\n\n    updatedTotalMoves = updatedTotalMoves + 2;\n\n    // we remove the second citizen from movers\n\n    movers = movers\n      .slice(0, randomUnhappyCitizenNumber)\n      .concat(movers.slice(randomUnhappyCitizenNumber + 1));\n  }\n  return {\n    grid: updatedGrid,\n    totalMoves: updatedTotalMoves,\n    happy,\n    happiness: happy / (cols * rows),\n  };\n};\nexport const draw = ({ ctx, data, params, circle }) => {\n  const { height, width, rows, cols, showmoves } = params;\n  const sx = height / rows;\n  const sy = width / cols;\n  const size = 0.8 * Math.min(sx, sy);\n  ctx.clearRect(0, 0, width, height);\n  ctx.strokeStyle = '#000';\n  ctx.lineWidth = 2;\n  ctx.globalAlpha = 1;\n  data.grid.forEach((row, r) =>\n    row.forEach((citizen, c) => {\n      if (citizen.community === 0) {\n        ctx.fillStyle = '#33e';\n        circle({ x: (c + 0.5) * sx, y: (r + 0.5) * sy, r: size / 2 });\n        if (citizen.isHappy) {\n          ctx.fill();\n        } else {\n          ctx.stroke();\n        }\n      } else {\n        ctx.fillStyle = '#a0c';\n        const x = (c + 0.5) * sx - size / 2;\n        const y = (r + 0.5) * sy - size / 2;\n        if (citizen.isHappy) {\n          ctx.fillRect(x, y, size, size);\n        } else {\n          ctx.strokeRect(x, y, size, size);\n        }\n      }\n    })\n  );\n  if (showmoves) {\n    ctx.strokeStyle = '#222';\n    ctx.fillStyle = '#222';\n    ctx.globalAlpha = 0.5;\n    ctx.lineWidth = 1;\n    data.grid.forEach((row, r) => {\n      row.forEach((citizen, c) => {\n        if (citizen.prevX !== undefined) {\n          const { prevX, prevY } = citizen;\n          if (prevX !== c || prevY !== r) {\n            // citizen has moved\n\n            const x0 = sx * (prevX + 0.5);\n            const x1 = sx * (c + 0.5);\n\n            const y0 = sy * (prevY + 0.5);\n            const y1 = sy * (r + 0.5);\n\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            circle({ x: x0, y: y0, r: size / 4 });\n            ctx.fill();\n            circle({ x: x1, y: y1, r: size / 4 });\n            ctx.fill();\n          }\n        }\n      });\n    });\n  }\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst series = {\n  label: 'Happiness',\n  accessor: d => d.happy,\n};\n\nconst counterSeries = [\n  {\n    label: 'Happiness',\n    accessor: d => `${Math.floor(1000 * Number(d.happiness.toFixed(3))) / 10}%`,\n  },\n  { label: 'Total moves', accessor: d => d.totalMoves },\n];\n\nexport const params = {\n  cols: 20,\n  rows: 20,\n  height: 330,\n  width: 330,\n  tolerance: 60,\n  proportion: 50,\n  showmoves: true,\n  threshold: 99,\n};\n\nconst Segregation = props => (\n  <Model\n    initialParams={{ ...params, ...props.extraParams }}\n    initData={initData}\n    updateData={updateData}\n    maxTime={50}\n    delay={100}\n    controls={[\n      { param: 'tolerance', label: 'Tolerance' },\n      { param: 'proportion', label: 'Proportion' },\n      { param: 'threshold', label: 'Threshold' },\n      { param: 'showmoves', label: 'Show moves', type: 'toggle' },\n    ]}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <TimeSeries series={series} />\n      <Counter series={counterSeries} />\n    </Flex>\n  </Model>\n);\n\nexport default Segregation;\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const Frame = ({ tick }) => {\n  const data = Array(10)\n    .fill(0)\n    .map((r, y) =>\n      Array(10)\n        .fill(0)\n        .map((c, x) => (10 * y + x > tick ? 0 : 1))\n    );\n  return <Grid data={data} size={36} />;\n};\n\nconst SimpleModel = props => (\n  <Model {...props}>\n    <Frame />\n  </Model>\n);\n\nexport default SimpleModel;\n","// constants\n\nexport const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\n\nexport const DIRECTIONS = [UP, RIGHT, DOWN, LEFT];\n\nexport const opposite = [DOWN, LEFT, UP, RIGHT];\nexport const IS_VERTICAL = [true, false, true, false];\nexport const IS_HORIZONTAL = [false, true, false, true];\n\nexport const v = [\n  [0, -1],\n  [1, 0],\n  [0, 1],\n  [-1, 0],\n];\n\nexport const getDir = v.reduce((prev, curr, i) => {\n  prev[curr] = i;\n  return prev;\n}, {});\n\n// helpers\n\nexport function getRandomInBounds(min, max, random = Math.random) {\n  // returns a random integer within [min, max]\n  // (bounds are included)\n  return min + Math.floor(random() * (max + 1 - min));\n}\n\nexport function isValid(x, y, visited, height, width) {\n  // returns whether one of the pathfinding functions can consider a cell\n  if (x < 0 || x > width - 1 || y < 0 || y > height - 1) {\n    return false;\n  }\n  if (visited[[x, y]]) {\n    return false;\n  }\n  return true;\n}\n\nexport function initVisited(grid = [[]], path = []) {\n  // refreshes the \"visited\" object\n  // every snake cell in the grid is marked as visited,\n  // every cell in the path as well.\n  // both are optional.\n\n  // because this is an object, it can be inadvertantly mutated\n  // so it's safer to reinitialize it after each use\n  const visited = grid.reduce(\n    (results, row, r) =>\n      row.reduce((rowResults, cell, c) => {\n        if (cell > 0) {\n          rowResults[[c, r]] = true;\n        }\n        return rowResults;\n      }, results),\n    {}\n  );\n  path.forEach(([r, c]) => (visited[[r, c]] = true));\n  return visited;\n}\n\nexport function getShortestPath({ grid, start, end }) {\n  // finds shortest path between start and end given status of a grid\n  // where visited cells can't be crossed\n\n  const height = grid.length;\n  if (height === 0) {\n    return [];\n  }\n  const width = grid[0].length;\n\n  const visited = initVisited(grid);\n  delete visited[end];\n  // paths - for each node, shortest path to reach that node from start\n  const paths = {};\n  const next = [start];\n  paths[start] = [start];\n  let found = false;\n  while (next.length && !found) {\n    const node = next.shift();\n    /* eslint-disable no-loop-func */\n    DIRECTIONS.forEach(d => {\n      // step is next node in that direction, from node\n      const step = [node[0] + v[d][0], node[1] + v[d][1]];\n      const [x, y] = step;\n      if (!isValid(x, y, visited, height, width)) {\n        return;\n      }\n      visited[step] = true;\n      paths[step] = paths[node].concat([step]);\n      if (x === end[0] && y === end[1]) {\n        found = true;\n      }\n      // we add each step to our queue. it's important to do BFS here\n      next.push(step);\n    });\n  }\n  // out shortest path\n  return paths[end];\n}\n\nexport function getLongestPath({ grid, start, end }) {\n  const height = grid.length;\n  if (height === 0) {\n    return [];\n  }\n  const width = grid[0].length;\n\n  let stack = getShortestPath({\n    grid,\n    start,\n    end,\n  }) || [start];\n\n  let visited = initVisited(grid, stack);\n  let longestPath = [stack.shift()];\n\n  // the general idea is that we start from the shortest path from start\n  // to end.\n\n  // then, for each segment in that path, we try to see if we can extend\n  // it by adding a pair of adjacent points.\n  // we continue until we run out of pair of points we can add to that path.\n\n  while (stack.length) {\n    const updatedPath = extendPath({\n      height,\n      longestPath,\n      stack,\n      visited,\n      width,\n    });\n    stack = updatedPath.stack;\n    visited = updatedPath.visited;\n    longestPath = updatedPath.longestPath;\n  }\n\n  return longestPath;\n}\n\nexport function extendPath({ height, longestPath, stack, visited, width }) {\n  const lastInLongestPath = longestPath[longestPath.length - 1];\n  visited[lastInLongestPath] = true;\n  const nextInStack = stack.shift();\n\n  // last in path to next in stack form a segment.\n  // we are trying to see if the 2 points to the right, or 2 points to the left are\n  // valid. if so, we'll add them to the stack.\n\n  // ie - last in path = l, next in stack = n, valid = ., invalid = x\n  // xxxxxx xxxxxxx xxxxxxx xxxxxxx\n  // x.n..x x.....x x.....x x.x...x\n  // x.lx.x x..ln.x xxl...x x.nl..x\n  // x....x x..x..x x.n...x x.....x\n  // xxxxxx xxxxxxx xxxxxxx xxxxxxx\n  //\n  // in each of these 4 examples, 2 points to the left of ln are both valid.\n  // so we can push them to the stack\n  // only one of the 2 points to the right of ln are valid. so we can't push them to the stack\n  // not 100% sure of that, but i think with how we build the path, having 2 points to right\n  // valid and 2 points to left valid is exclusive.\n  // valid points = not visited, not off bounds\n\n  const dx = nextInStack[0] - lastInLongestPath[0];\n  const dy = nextInStack[1] - lastInLongestPath[1];\n\n  const rightPoints = [\n    [lastInLongestPath[0] - dy, lastInLongestPath[1] - dx],\n    [nextInStack[0] - dy, nextInStack[1] - dx],\n  ];\n  const leftPoints = [\n    [lastInLongestPath[0] + dy, lastInLongestPath[1] + dx],\n    [nextInStack[0] + dy, nextInStack[1] + dx],\n  ];\n\n  if (\n    isValid(...rightPoints[0], visited, height, width) &&\n    isValid(...rightPoints[1], visited, height, width)\n  ) {\n    stack.unshift(nextInStack);\n    stack.unshift(rightPoints[1]);\n    stack.unshift(rightPoints[0]);\n    visited[rightPoints[0]] = true;\n    visited[rightPoints[1]] = true;\n  } else {\n    if (\n      isValid(...leftPoints[0], visited, height, width) &&\n      isValid(...leftPoints[1], visited, height, width)\n    ) {\n      stack.unshift(nextInStack);\n      stack.unshift(leftPoints[1]);\n      stack.unshift(leftPoints[0]);\n      visited[leftPoints[0]] = true;\n      visited[leftPoints[1]] = true;\n    } else {\n      // we can't add either both right points or both left points to stack.\n      // Great! we add nextInStack to the path, and continue.\n      longestPath.push(nextInStack);\n    }\n  }\n  return {\n    stack,\n    visited,\n    longestPath,\n    considered: [lastInLongestPath, nextInStack],\n  };\n}\n\nexport function getActionGrid({ grid, path = [], direction, stack = [] }) {\n  // we have on one hand, grid which is the position of the snake,\n  // and on the other, path which is the longest path from the cell\n  // which is in front of the snake to the one behind its tail.\n\n  // what we want is a lookup table that, for every coordinate that the\n  // head could find itself on, suggest the corresponding, safe action.\n\n  const totalPath = [...path, ...stack];\n  const actionGrid = grid.map(row =>\n    row.map(cell => (cell ? direction : undefined))\n  );\n  if (totalPath.length < 2) {\n    return actionGrid;\n  }\n  let node;\n\n  for (let i = 1; i < totalPath.length; i++) {\n    const prev = totalPath[i - 1];\n    node = totalPath[i];\n    const dx = node[0] - prev[0];\n    const dy = node[1] - prev[1];\n    const [c, r] = prev;\n    actionGrid[r][c] = getDir[[dx, dy]];\n  }\n\n  // we should have a complete actionGrid except for the very last node\n  // of path\n\n  // it goes towards the tail of the snake. in our case it's direction\n  if (direction) {\n    const [c, r] = node;\n\n    actionGrid[r][c] = direction;\n  }\n  return actionGrid;\n}\n\nexport function isFullGrid(actionGrid) {\n  return actionGrid.every(row => row.every(cell => cell !== undefined));\n}\n\nexport function positionFruit(grid, random = Math.random) {\n  const eligiblePositions = grid.reduce(\n    (results, row, r) =>\n      row.reduce((resultRow, cell, c) => {\n        if (cell === 0) {\n          resultRow.push([c, r]);\n        }\n        return resultRow;\n      }, results),\n    []\n  );\n  if (eligiblePositions.length === 0) {\n    return null;\n  }\n  const randomPosition = Math.floor(random() * eligiblePositions.length);\n  return eligiblePositions[randomPosition];\n}\n\nexport function addToGrid(grid, path) {\n  const updatedGrid = grid.map(row => row.map(cell => cell));\n  path.forEach(([c, r]) => (updatedGrid[r][c] = 1));\n  return updatedGrid;\n}\n","import React from 'react';\nimport { CanvasFrame, withTheme } from 'react-sim';\n\nimport { IS_VERTICAL, UP, RIGHT, DOWN, LEFT, opposite } from './helpers';\n\nconst snakeToCellRatio = 0.8;\n\nexport const draw = ({\n  ctx,\n  circle,\n  data,\n  params: {\n    cellSize,\n    displayGrid,\n    displayHead,\n    displayCircuit,\n    width: cols,\n    height: rows,\n  },\n  height,\n  width,\n  roundRectangle,\n  theme,\n  tick,\n}) => {\n  const { accent, muted, primary, secondary, gray } = theme.colors;\n  const {\n    bestPath,\n    considered,\n    snakePath = [],\n    actionGrid,\n    direction = 0,\n    fruit,\n  } = data;\n  ctx.clearRect(0, 0, width, height);\n  // grid\n\n  if (displayGrid) {\n    ctx.strokeStyle = gray;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        ctx.strokeRect(j * cellSize, i * cellSize, cellSize, cellSize);\n      }\n    }\n  }\n  // actionGrid\n  if (displayCircuit) {\n    ctx.strokeStyle = bestPath ? accent : secondary;\n    drawActionGrid({ actionGrid, cellSize, circle, considered, ctx });\n  }\n  // fruit\n  if (fruit) {\n    ctx.fillStyle = secondary;\n    ctx.fillRect(\n      (fruit[0] + 0.2) * cellSize,\n      (fruit[1] + 0.2) * cellSize,\n      0.6 * cellSize,\n      0.6 * cellSize\n    );\n  }\n  snakePath.forEach((coords, i) => {\n    const next = snakePath[i + 1];\n    const [c0, r0] = coords;\n    ctx.fillStyle = primary;\n    if (next) {\n      // not head\n\n      const [c1, r1] = next;\n      const x = cellSize * (Math.min(c1, c0) + (1 - snakeToCellRatio) / 2);\n      const y = cellSize * (Math.min(r1, r0) + (1 - snakeToCellRatio) / 2);\n\n      const width =\n        cellSize * (c0 === c1 ? snakeToCellRatio : 2 - (1 - snakeToCellRatio));\n      const height =\n        cellSize * (r0 === r1 ? snakeToCellRatio : 2 - (1 - snakeToCellRatio));\n\n      const r = (snakeToCellRatio * cellSize) / 2;\n      roundRectangle({ x, y, width, height, r: cellSize / 2 });\n      ctx.fill();\n    } else {\n      if (displayHead) {\n        // head\n        const x = (c0 + 0.5) * cellSize;\n        const y = (r0 + 0.5) * cellSize;\n        const r = (cellSize * snakeToCellRatio) / 2;\n        circle({ x, y, r });\n        ctx.fill();\n        ctx.fillStyle = '#fff';\n        const prev = snakePath[i - 1];\n        // eyes\n        switch (direction) {\n          case UP:\n            circle({ x: x - 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x + 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n          case DOWN:\n            circle({ x: x - 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x + 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n          case LEFT:\n            circle({ x: x - 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x - 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n          case RIGHT:\n            circle({ x: x + 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x + 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n        }\n      }\n    }\n  });\n};\n\nexport const drawActionGrid = ({\n  actionGrid,\n  cellSize,\n  circle,\n  considered,\n  ctx,\n}) => {\n  function horizontal(r, c) {\n    ctx.beginPath();\n    ctx.moveTo(c * cellSize, (r + 0.5) * cellSize);\n    ctx.lineTo((c + 1) * cellSize, (r + 0.5) * cellSize);\n    ctx.stroke();\n  }\n  function vertical(r, c) {\n    ctx.beginPath();\n    ctx.moveTo((c + 0.5) * cellSize, r * cellSize);\n    ctx.lineTo((c + 0.5) * cellSize, (r + 1) * cellSize);\n    ctx.stroke();\n  }\n  function topLeft(r, c) {\n    ctx.beginPath();\n    ctx.arc(c * cellSize, r * cellSize, cellSize / 2, 0, Math.PI / 2, false);\n    ctx.stroke();\n  }\n  function topRight(r, c) {\n    ctx.beginPath();\n    ctx.arc(\n      (c + 1) * cellSize,\n      r * cellSize,\n      cellSize / 2,\n      Math.PI / 2,\n      Math.PI,\n      false\n    );\n    ctx.stroke();\n  }\n  function bottomLeft(r, c) {\n    ctx.beginPath();\n    ctx.arc(\n      c * cellSize,\n      (r + 1) * cellSize,\n      cellSize / 2,\n      -Math.PI / 2,\n      0,\n      false\n    );\n    ctx.stroke();\n  }\n  function bottomRight(r, c) {\n    ctx.beginPath();\n    ctx.arc(\n      (c + 1) * cellSize,\n      (r + 1) * cellSize,\n      cellSize / 2,\n      Math.PI,\n      -Math.PI / 2,\n      false\n    );\n    ctx.stroke();\n  }\n  if (considered) {\n    considered.forEach(([x, y]) => {\n      circle({\n        x: (x + 0.5) * cellSize,\n        y: (y + 0.5) * cellSize,\n        r: cellSize / 4,\n      });\n      ctx.stroke();\n    });\n  }\n  actionGrid.forEach((row, r) => {\n    row.forEach((action, c) => {\n      switch (action) {\n        case UP:\n          if (c > 0 && actionGrid[r][c - 1] === RIGHT) {\n            topLeft(r, c);\n          } else {\n            if (actionGrid[r][c + 1] === LEFT) {\n              topRight(r, c);\n            } else {\n              vertical(r, c);\n            }\n          }\n          break;\n        case DOWN:\n          if (c > 0 && actionGrid[r][c - 1] === RIGHT) {\n            bottomLeft(r, c);\n          } else {\n            if (actionGrid[r][c + 1] === LEFT) {\n              bottomRight(r, c);\n            } else {\n              vertical(r, c);\n            }\n          }\n          break;\n        case RIGHT:\n          if (r > 0 && actionGrid[r - 1][c] === DOWN) {\n            topRight(r, c);\n          } else {\n            if (actionGrid[r + 1] && actionGrid[r + 1][c] === UP) {\n              bottomRight(r, c);\n            } else {\n              horizontal(r, c);\n            }\n          }\n          break;\n        case LEFT:\n          if (r > 0 && actionGrid[r - 1][c] === DOWN) {\n            topLeft(r, c);\n          } else {\n            if (actionGrid[r + 1] && actionGrid[r + 1][c] === UP) {\n              bottomLeft(r, c);\n            } else {\n              horizontal(r, c);\n            }\n          }\n          break;\n      }\n    });\n  });\n};\n\nconst CanvasSnakeFrame = props => {\n  const {\n    params: { height, width, cellSize },\n  } = props;\n  return (\n    <CanvasFrame\n      draw={draw}\n      {...props}\n      height={height * cellSize}\n      width={width * cellSize}\n    />\n  );\n};\n\nexport default withTheme(CanvasSnakeFrame);\n","import {\n  UP,\n  RIGHT,\n  DOWN,\n  LEFT,\n  addToGrid,\n  extendPath,\n  getActionGrid,\n  getLongestPath,\n  getRandomInBounds,\n  getShortestPath,\n  initVisited,\n  opposite,\n  positionFruit,\n  v,\n} from './helpers';\n\n// init\n\nexport function initSnake(\n  {\n    directionRandom,\n    directionText,\n    height,\n    width,\n    initialLength,\n    snakePosRandom,\n    xHead,\n    yHead,\n  },\n  random = Math.random\n) {\n  const direction = directionRandom\n    ? Math.floor(random() * 4)\n    : { up: 0, right: 1, down: 2, left: 3 }[directionText];\n\n  // position of snake head\n\n  const minX = direction === RIGHT ? initialLength + 2 : 2;\n  const maxX = width - 1 - (direction === LEFT ? initialLength + 2 : 2);\n  const minY = direction === DOWN ? initialLength + 2 : 2;\n  const maxY = height - 1 - (direction === UP ? initialLength + 2 : 2);\n\n  if (snakePosRandom) {\n    // bounding box where the snake head can be\n\n    xHead = getRandomInBounds(minX, maxX, random);\n    yHead = getRandomInBounds(minY, maxY, random);\n  } else {\n    xHead = Math.min(maxX, Math.max(minX, xHead));\n    yHead = Math.min(maxY, Math.max(minY, yHead));\n  }\n\n  // initial empty grid\n\n  const grid = [];\n  for (let i = 0; i < height; i++) {\n    const row = [];\n    for (let j = 0; j < width; j++) {\n      row.push(0);\n    }\n    grid.push(row);\n  }\n\n  const head = [xHead, yHead];\n  let tail = [];\n  let snakePath = [];\n  // positioning snake\n\n  for (let s = 0; s < initialLength; s++) {\n    // opposite[direction] - if direction is right, we\n    // want to draw snake left of its head\n\n    // v - x,y vector of movement for a direction\n\n    const x = xHead + s * v[opposite[direction]][0];\n    const y = yHead + s * v[opposite[direction]][1];\n\n    // grid - 1 = head, 2 ... n = body of snake, 0 = empty cells\n    grid[y][x] = s + 1;\n\n    snakePath.unshift([x, y]);\n    // tail will be overwritten until the actual tail isn't\n    tail = [x, y];\n  }\n\n  const behindTail = [\n    tail[0] + v[opposite[direction]][0],\n    tail[1] + v[opposite[direction]][1],\n  ];\n\n  const frontOfSnake = [xHead + v[direction][0], yHead + v[direction][1]];\n\n  return {\n    behindTail,\n    direction,\n    frontOfSnake,\n    grid,\n    length: initialLength,\n    head,\n    snakePath,\n    tail,\n  };\n}\n\nexport function initSnakeGrid(params, random = Math.random) {\n  const { grid, head, tail, direction, snakePath } = initSnake(params, random);\n\n  const stack = getShortestPath({ grid, start: head, end: tail, direction });\n  const visited = initVisited(grid, stack);\n  const longestPath = [...snakePath, stack.shift()];\n\n  const actionGrid = getActionGrid({\n    grid,\n    path: longestPath,\n    stack,\n    direction,\n  });\n  return {\n    actionGrid,\n    direction,\n    grid,\n    stack,\n    visited,\n    longestPath,\n  };\n}\n\nexport function initSnakeGame(params, random = Math.random) {\n  const { grid, head, tail, direction, length, snakePath } = initSnake(\n    params,\n    random\n  );\n\n  const fruit = positionFruit(grid, random);\n\n  const longestPath = getLongestPath({\n    grid,\n    start: head,\n    end: tail,\n  });\n\n  const actionGrid = getActionGrid({ grid, path: longestPath, direction });\n\n  return {\n    head,\n    grid,\n    direction,\n    actionGrid,\n    fruit,\n    length,\n    snakePath,\n    bestPath: false,\n  };\n}\n\n// update\n\nexport function updateSnake({ data, params, complete }, random = Math.random) {\n  const { actionGrid, bestPath, grid, direction, head, fruit, length } = data;\n  let updatedActionGrid = actionGrid;\n  let updatedBestPath = bestPath;\n  const { fruitGrowth, height, width, safeMode } = params;\n  let snakePath = [];\n  const updatedGrid = grid.map((row, r) =>\n    row.map((cell, c) => {\n      if (cell === 0 || cell + 1 > length) {\n        return 0;\n      }\n      snakePath[length - cell - 1] = [c, r];\n      return cell + 1;\n    })\n  );\n  while (snakePath[0] === undefined) {\n    snakePath.shift();\n  }\n  const tail = snakePath[0];\n\n  // new position of head, based on previous direction\n  const updatedHead = [head[0] + v[direction][0], head[1] + v[direction][1]];\n\n  if (\n    // collision with snake\n    updatedGrid[updatedHead[1]][updatedHead[0]] !== 0 ||\n    // collision with walls\n    updatedHead[0] >= width ||\n    updatedHead[0] < 0 ||\n    updatedHead[1] >= height ||\n    updatedHead[1] < 0\n  ) {\n    // ouch\n    complete();\n  }\n\n  // updating grid\n  updatedGrid[updatedHead[1]][updatedHead[0]] = 1;\n\n  if (updatedGrid.every(row => row.every(cell => cell))) {\n    // full grid\n    complete();\n  }\n\n  // checking if fruit is eaten, if so, increasing length - repositioning fruit\n  let updatedLength = length;\n  let updatedFruit = fruit ? [fruit[0], fruit[1]] : [-1, -1];\n  if (\n    updatedHead[0] === updatedFruit[0] &&\n    updatedHead[1] === updatedFruit[1]\n  ) {\n    updatedLength = Math.min(height * width, updatedLength + fruitGrowth);\n    if (!safeMode) {\n      // in safe mode, once we find a path that covers the grid, we stick\n      // to it until the end. in unsafe mode, we try to improve it with\n      // each fruit.\n      updatedBestPath = false;\n    }\n    updatedFruit = positionFruit(updatedGrid, random);\n  }\n\n  // figuring out if action grid should be updated\n\n  if (updatedBestPath === false) {\n    const pathToFruit = getShortestPath({\n      grid,\n      start: updatedHead,\n      end: updatedFruit,\n      direction,\n    });\n    if (pathToFruit) {\n      const tailToFruit = [...snakePath, ...pathToFruit];\n      const candidateGrid = addToGrid(updatedGrid, tailToFruit);\n      const backToTail = getLongestPath({\n        grid: candidateGrid,\n        start: updatedFruit,\n        end: tail,\n      });\n\n      // cicruit from tail to head to fruit back to tail, removing all dupe\n      // coords\n      const circuitLength = new Set(\n        [...tailToFruit, ...backToTail].map(d => d.join())\n      ).size;\n\n      if (circuitLength === height * width) {\n        // we found a way to go quickly but safely to the next fruit!\n        updatedActionGrid = getActionGrid({\n          grid,\n          path: tailToFruit,\n          stack: backToTail,\n        });\n        // no need to reevaluate it until next fruit\n        updatedBestPath = true;\n      }\n    }\n  }\n  // computing next direction, thanks to the action grid\n  const updatedDirection =\n    updatedActionGrid[updatedHead[1]][updatedHead[0]] ?? direction;\n\n  snakePath.push(updatedHead);\n\n  return {\n    actionGrid: updatedActionGrid,\n    bestPath: updatedBestPath,\n\n    direction: updatedDirection,\n    fruit: updatedFruit,\n    grid: updatedGrid,\n    head: updatedHead,\n    length: updatedLength,\n    snakePath,\n  };\n}\n\nexport function updateSnakeGrid({ data, params, complete }) {\n  const { direction, grid, longestPath, stack, visited } = data;\n  const { height, width } = params;\n  const updatedData = extendPath({\n    height,\n    longestPath,\n    stack,\n    visited,\n    width,\n  });\n  const actionGrid = getActionGrid({\n    grid,\n    path: longestPath,\n    stack,\n    direction,\n  });\n  if (stack.length === 0) {\n    complete();\n  }\n  return {\n    actionGrid,\n    considered: updatedData.considered,\n    direction,\n    grid,\n    longestPath: updatedData.longestPath,\n    stack: updatedData.stack,\n    visited: updatedData.visited,\n  };\n}\n","import React from 'react';\nimport Model from './framed-model';\nimport SnakeFrame from './snake/canvas';\nimport {\n  initSnakeGame,\n  initSnakeGrid,\n  updateSnake,\n  updateSnakeGrid,\n} from './snake/data';\n\n// update\n\nconst Snake = props => (\n  <Model\n    auto={false}\n    maxTime={Infinity}\n    noCache\n    controls={[\n      {\n        type: 'radio',\n        label: 'speed',\n        options: ['normal', 'fast', 'very fast'],\n        param: 'speed',\n        setParams: value =>\n          ({\n            normal: { delay: 100, ticksPerAnimation: 1, speed: 'normal' },\n            fast: { delay: 0, ticksPerAnimation: 1, speed: 'fast' },\n            'very fast': {\n              delay: 0,\n              ticksPerAnimation: 20,\n              speed: 'very fast',\n            },\n          }[value]),\n      },\n      [\n        {\n          type: 'toggle',\n          label: 'Display grid',\n          param: 'displayGrid',\n        },\n        {\n          type: 'toggle',\n          label: 'Display circuit',\n          param: 'displayCircuit',\n        },\n      ],\n    ]}\n    initData={initSnakeGame}\n    initialParams={{\n      cellSize: 16,\n      delay: 100,\n      displayCircuit: true,\n      displayGrid: false,\n      fruitGrowth: 4,\n      height: 20,\n      width: 20,\n      initialLength: 2,\n      safeMode: false,\n      speed: 'normal',\n      snakePosRandom: true,\n      directionRandom: true,\n      ...props.extraParams,\n    }}\n    updateData={updateSnake}\n    {...props}\n  >\n    <SnakeFrame />\n  </Model>\n);\n\nexport default Snake;\n\nexport const SnakeGrid = props => (\n  <Model\n    auto={false}\n    maxTime={Infinity}\n    initData={initSnakeGrid}\n    initialParams={{\n      cellSize: 16,\n      displayCircuit: true,\n      displayGrid: true,\n      fruitGrowth: 4,\n      height: 20,\n      width: 20,\n      initialLength: 2,\n      snakePosRandom: true,\n      directionRandom: true,\n    }}\n    updateData={updateSnakeGrid}\n    {...props}\n  >\n    <SnakeFrame />\n  </Model>\n);\n\nexport const SnakeGridDebugger = () => (\n  <Model\n    auto={false}\n    maxTime={Infinity}\n    initData={initSnakeGrid}\n    initialParams={{\n      cellSize: 25,\n      fruitGrowth: 4,\n      height: 10,\n      width: 10,\n      initialLength: 4,\n      xHead: 8,\n      yHead: 2,\n      directionText: 'right',\n      snakePosRandom: false,\n      directionRandom: false,\n      ticksPerAnimation: 1000,\n    }}\n    controls={[\n      {\n        type: 'range',\n        param: 'xHead',\n        minValue: 2,\n        maxValue: 18,\n        resetOnChange: true,\n      },\n      {\n        type: 'range',\n        param: 'yHead',\n        minValue: 2,\n        maxValue: 18,\n        resetOnChange: true,\n      },\n      {\n        type: 'radio',\n        param: 'directionText',\n        options: ['up', 'right', 'down', 'left'],\n        resetOnChange: true,\n      },\n    ]}\n    updateData={updateSnakeGrid}\n  >\n    <SnakeFrame />\n  </Model>\n);\n","import activators from '../../images/gifs/activators.gif';\nimport automata from '../../images/gifs/automata.gif';\nimport boids from '../../images/gifs/boids.gif';\nimport chaosGame from '../../images/gifs/chaos-game.gif';\nimport dice from '../../images/gifs/dice.gif';\nimport epidemic from '../../images/gifs/epidemic.gif';\nimport fibonacci from '../../images/gifs/fibonacci.gif';\nimport gameOfLife from '../../images/gifs/game-of-life.gif';\nimport maze from '../../images/gifs/maze.gif';\nimport percolation from '../../images/gifs/percolation.gif';\nimport segregation from '../../images/gifs/segregation.gif';\nimport simpleModel from '../../images/gifs/simple-model.gif';\nimport snake from '../../images/gifs/snake.gif';\n\nexport { default as Automata } from './automata';\nexport { default as Activators } from './activators';\nexport { default as Boids, ChillBoids } from './boids';\nexport { default as ChaosGame, BasicChaosGame } from './chaos-game';\nexport { default as Dice } from './dice';\nexport { default as Epidemic } from './epidemic';\nexport { default as Fibonacci, FibonacciNumbers } from './fibonacci';\nexport { default as GameOfLife } from './game-of-life';\nexport { default as Maze } from './mazes';\nexport { default as Percolation, PercolationGrid } from './percolation';\nexport { default as Segregation } from './segregation';\nexport { default as SimpleModel } from './simple-model';\nexport { default as Snake, SnakeGrid } from './snake';\n\nexport const gifs = {\n  activators,\n  automata,\n  boids,\n  'chaos-game': chaosGame,\n  dice,\n  epidemic,\n  fibonacci,\n  'game-of-life': gameOfLife,\n  mazes: maze,\n  percolation,\n  segregation,\n  'simple-model': simpleModel,\n  snake,\n};\n\nconst examples = {\n  automata: '1D automata',\n  activators: 'Activators/Inhibitors',\n  boids: 'Boids',\n  'chaos-game': 'Chaos Game',\n  dice: 'Dice Simulator',\n  epidemic: 'Epidemic Simulator',\n  fibonacci: 'Fibonacci Spiral',\n  'game-of-life': 'Game of Life',\n  mazes: 'Maze generation',\n  percolation: 'Percolation',\n  segregation: 'Segregation',\n  'simple-model': 'Simple Model',\n  snake: 'Snake Game',\n};\n\nexport default examples;\n","module.exports = __webpack_public_path__ + \"static/chaos-game-20c4833eb95ad08554ab0b5617f6907d.gif\";","module.exports = __webpack_public_path__ + \"static/maze-ffb52917c0e359f5c80d9a15aadf195f.gif\";","module.exports = __webpack_public_path__ + \"static/game-of-life-1ffe67497127dd5fad4ddf470e0f2fbb.gif\";","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst stale = `0000010000000000010000000000\n0000000100010010000000000000\n1110001000000000000000000001\n1010000000000000000000000000\n0000000000100000000010110000\n0100000101010100000000000001\n0000000000010100000001000001\n0000000011100100000000100001\n0000010000000000000000010000\n0000000000010100000000000100`\n  .split('\\n')\n  .map(d => d.split('').map(Number));\n\n// helpers\n\nfunction countNeighbors(x, y, grid) {\n  const height = grid.length;\n  if (!height) {\n    return 0;\n  }\n  const width = grid[0].length;\n\n  let n = 0;\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n      const x1 = x + xOffset;\n      const y1 = y + yOffset;\n      if (\n        x1 < width &&\n        x1 > 0 &&\n        y1 < height &&\n        y1 > 0 &&\n        (x1 !== x || y1 !== y)\n      ) {\n        n += grid[y1][x1];\n      }\n    }\n  }\n  return n;\n}\n\nexport function updateGameOfLifeGrid({ data, complete }) {\n  let changes = 0;\n  const updatedGrid = data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        changes++;\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        changes++;\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n  if (changes === 0) {\n    complete();\n  }\n  return updatedGrid;\n}\n\nexport function updateGridNoComplete({ data }) {\n  return data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n}\n\nexport function initGrid({ height, width, density }, random = Math.random) {\n  return Array(height)\n    .fill(0)\n    .map(row =>\n      Array(width)\n        .fill(0)\n        .map(() => Number(random() < density))\n    );\n}\n\nconst GameOfLife = props => (\n  <Model\n    auto={false}\n    controls={{\n      param: 'density',\n      maxValue: 1,\n      step: 0.01,\n      resetOnChange: true,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    updateData={updateGameOfLifeGrid}\n    delay={100}\n    initData={initGrid}\n    initialParams={{\n      height: 28,\n      width: 28,\n      density: 0.15,\n    }}\n    {...props}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step2 = () => (\n  <Model\n    initData={initGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step3 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGridNoComplete}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step4 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step5 = () => (\n  <Model\n    controls={{\n      param: 'density',\n      resetOnChange: true,\n      maxValue: 1,\n      step: 0.01,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport default GameOfLife;\n","module.exports = __webpack_public_path__ + \"static/activators-be81b3b3a90aa3408fd6b27ad5066309.gif\";","var $ = require('../internals/export');\n\n// eslint-disable-next-line es-x/no-math-hypot -- required for testing\nvar $hypot = Math.hypot;\nvar abs = Math.abs;\nvar sqrt = Math.sqrt;\n\n// Chrome 77 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=9546\nvar BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;\n\n// `Math.hypot` method\n// https://tc39.es/ecma262/#sec-math.hypot\n$({ target: 'Math', stat: true, arity: 2, forced: BUGGY }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  hypot: function hypot(value1, value2) {\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * sqrt(sum);\n  }\n});\n","module.exports = __webpack_public_path__ + \"static/snake-8dd775e142dc168a12a3bf2d53835d48.gif\";","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\nimport { Flex, Box } from 'rebass';\nimport Model from './framed-model';\n\nconst phi = 0.5 + Math.sqrt(5) / 2;\n\nconst D = {\n  0: 'right',\n  1: 'down',\n  2: 'left',\n  3: 'up',\n};\n\nconst colors = {\n  right: '#b6b6e2',\n  down: '#a6d3d9',\n  left: '#ffeb3b',\n  up: '#95d392',\n};\n\nexport function initData() {\n  return [0];\n}\n\nexport function updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n\nexport function draw({ ctx, params: { size }, tick }) {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, size, size);\n  let x = 0,\n    y = 0,\n    side = size;\n  for (let i = 0; i < tick; i++) {\n    const d = D[i % 4];\n    side = side / phi;\n    ctx.strokeStyle = '#ddd';\n    ctx.strokeRect(x, y, side, side);\n    ctx.strokeStyle = '#222';\n\n    const radius = Math.max(0, side - 1);\n    switch (d) {\n      case 'right':\n        ctx.beginPath();\n        ctx.arc(x + side, y + side, radius, Math.PI, -Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + side;\n        break;\n      case 'down':\n        ctx.beginPath();\n        ctx.arc(x, y + side, radius, -Math.PI / 2, 0);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + (1 - 1 / phi) * side;\n        y = y + side;\n        break;\n      case 'left':\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x - side / phi;\n        y = y + (1 - 1 / phi) * side;\n        break;\n      case 'up':\n        ctx.beginPath();\n        ctx.arc(x + side, y, radius, Math.PI / 2, Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        y = y - side / phi;\n        break;\n      default:\n    }\n  }\n}\n\nexport const FibonacciSpiralFrame = ({ tick, params }) => {\n  const { size } = params;\n  const width = size;\n  const height = size / phi;\n\n  return <CanvasFrame height={height} width={width} draw={draw} />;\n};\n\nconst FibonacciSpiral = props => (\n  <Model initialParams={{ size: 332 }} delay={100} maxTime={15} {...props}>\n    <FibonacciSpiralFrame />\n  </Model>\n);\n\nexport const FibonacciSquaresFrame = ({ data, tick, params }) => {\n  let maxX = 0,\n    minX = 0,\n    maxY = 0,\n    minY = 0,\n    x = 0,\n    y = 0;\n  function renderSquares(sequence) {\n    return sequence.map((d, i) => {\n      const n = d * 10;\n      const direction = D[i % 4];\n      switch (direction) {\n        case 'right':\n          y = y - n;\n          break;\n        case 'left':\n          x = x - n;\n          break;\n        case 'up':\n          x = x - n;\n          y = y - n;\n          break;\n        default:\n      }\n      const borderWidth = Math.max(\n        0.1,\n        i < 2 ? 1 / params.size : 1 / (n + 10 * sequence[i - 1])\n      );\n\n      const fontSize = n / (1.5 * String(d).length);\n\n      const square = (\n        <div\n          key={`rect-${i}`}\n          style={{\n            position: 'absolute',\n            border: `#{borderWidth}px solid #777`,\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: colors[direction],\n            top: y,\n            left: x,\n            width: n,\n            height: n,\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            style={{\n              fontSize,\n            }}\n          >\n            {d}\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              width: 2 * n,\n              height: 2 * n,\n              border: `${borderWidth}px solid black`,\n              borderRadius: n,\n              boxSizing: 'border-box',\n              top: 0,\n              left: 0,\n              transform: {\n                right: undefined,\n                down: 'translate(-50%)',\n                left: 'translate(-50%,-50%)',\n                up: 'translate(0,-50%)',\n              }[direction],\n            }}\n          />\n        </div>\n      );\n      switch (direction) {\n        case 'right':\n          x = x + n;\n          break;\n        case 'down':\n          x = x + n;\n          y = y + n;\n          break;\n        case 'left':\n          y = y + n;\n          break;\n        default:\n      }\n      maxX = Math.max(maxX, x);\n      minX = Math.min(minX, x);\n      maxY = Math.max(maxY, y);\n      minY = Math.min(minY, y);\n      return square;\n    });\n  }\n\n  const squares = renderSquares(data.slice(1));\n  const maxSide = Math.max(maxX - minX, maxY - minY);\n  const scale = params.size / maxSide;\n\n  return (\n    <div\n      style={{\n        width: params.size,\n        height: params.size,\n        position: 'relative',\n        pointerEvents: 'none',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          transformOrigin: 'top left',\n          transform: `scale(${scale}) translate(${-minX}px,${-minY}px)`,\n          width: `${maxX - minX}px`,\n          height: `${maxY - minY}px`,\n          transition: 'transform 0.2s',\n        }}\n      >\n        {squares}\n      </div>\n    </div>\n  );\n};\n\nconst NumberFrame = ({ data }) => (\n  <Flex sx={{ flexDirection: 'row', flexWrap: 'wrap' }}>\n    {data.map((d, i) => (\n      <Box sx={{ m: 1, p: 2, bg: 'muted', fontSize: 1 }} key={i}>\n        {d}\n      </Box>\n    ))}\n  </Flex>\n);\nconst FibonacciNumbers = props => (\n  <Model initData={initData} updateData={updateData} maxTime={20} {...props}>\n    <NumberFrame />\n  </Model>\n);\n\nconst FibonacciSquares = props => (\n  <Model\n    initialParams={{ size: 332 }}\n    initData={initData}\n    updateData={updateData}\n    delay={400}\n    maxTime={12}\n    {...props}\n  >\n    <FibonacciSquaresFrame />\n  </Model>\n);\n\nexport { FibonacciSpiral, FibonacciSquares, FibonacciNumbers };\nexport default FibonacciSpiral;\n\n","module.exports = __webpack_public_path__ + \"static/boids-3faa93ffce35ab682f64305d2f1ddf82.gif\";"],"sourceRoot":""}