{"version":3,"sources":["webpack:///./src/pages/examples/segregation.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,CAC1B,MAAS,eAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAaA,QAAQ,gBACrB,oDAAmC,+BAAGC,WAAW,KAAQ,CACrD,KAAQ,uEADuB,oCAAnC,KAGA,sIAAqH,0BAAYA,WAAW,KAAvB,cAArH,2DACc,0BAAYA,WAAW,KAAvB,aADd,+PAEqE,0BAAYA,WAAW,KAAvB,aAFrE,KAGA,0VAOJJ,EAAWK,gBAAiB","file":"component---src-pages-examples-segregation-mdx-81306366bdc70dc0cb79.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { Segregation } from '../../components/examples/';\nexport const _frontmatter = {\n  \"Title\": \"Segregation\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"segregation\"\n    }}>{`Segregation`}</h1>\n    <Segregation mdxType=\"Segregation\" />\n    <p>{`This simulation is based on `}<a parentName=\"p\" {...{\n        \"href\": \"http://nifty.stanford.edu/2014/mccown-schelling-model-segregation/\"\n      }}>{`Schelling's model of segregation`}</a>{`.`}</p>\n    <p>{`A territory, in the form of a familiar 2D grid, is randomly populated by citizens from one of two groups. The `}<inlineCode parentName=\"p\">{`proportion`}</inlineCode>{` of one of the groups can be adjusted.\nCitizens have a `}<inlineCode parentName=\"p\">{`tolerance`}</inlineCode>{` level - if the proportion of neighbors around them which are not from the same group is below their tolerance level, they will move and trade place with another unhappy neighbor.\nThe model stops when the share of citizens which are happy exceeds the `}<inlineCode parentName=\"p\">{`threshold`}</inlineCode>{`.`}</p>\n    <p>{`At high tolerance levels, the model stops soon enough and the territory remains similar to its original state.\nAt lower tolerance levels, islands of similar citizens form and the territory solidifies in a few homogeneous groups.\nAt lowest tolerance levels, the model may never stabilize and citizens are always moving.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}