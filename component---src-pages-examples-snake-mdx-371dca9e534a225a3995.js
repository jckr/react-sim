(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{hMyd:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return s}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var i=n("7ljp"),a=n("mZHx");var o={Title:"Snake"},r={_frontmatter:o};function s(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(i.b)("wrapper",Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"snake"},"Snake"),Object(i.b)(a.b,{mdxType:"Snake"}),Object(i.b)("p",null,"This model tries to win the game of ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Snake_(video_game_genre)%3E"}),"Snake"),"."),Object(i.b)("p",null,"A snake moves on a 2d grid. It can go straight, turn left or right. If it hits the borders of the grid or a part of its body, the game is over. If the snake eats a fruit, it grows in size. The goal of the game is to eat all the fruits, until the snake covers the entirety of the grid."),Object(i.b)("p",null,"The way the model works is by finding a circuit which is safe for the snake to use. If we can find a circuit that covers the whole grid, then the snake can loop on that circuit endlessly and never collide with anything else than with a fruit.\nHow do we find such a circuit? We start by finding the ",Object(i.b)("em",{parentName:"p"},"shortest path")," between the head and the tail of the snake. Then, we see how we can extend this path step by step. This other model shows how this works:"),Object(i.b)(a.a,{mdxType:"SnakeGrid"}))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-examples-snake-mdx-371dca9e534a225a3995.js.map