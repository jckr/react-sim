{"version":3,"sources":["webpack:///./src/pages/examples/game-of-life.mdx","webpack:///./src/components/examples/game-of-life.js","webpack:///./src/components/examples/framed-model.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","isMDXComponent","stale","split","map","d","Number","countNeighbors","x","y","grid","height","length","width","n","xOffset","yOffset","x1","y1","updateGameOfLifeGrid","data","complete","changes","updatedGrid","row","cell","neighbors","updateGridNoComplete","initGrid","random","density","Math","Array","fill","Step2","initData","initialParams","Step3","updateData","Step4","Step5","controls","param","resetOnChange","maxValue","step","label","showTimeSlider","GameOfLife","auto","delay","FramedModel","fmOverrides","sx","border","my","p"],"mappings":"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","file":"component---src-pages-examples-game-of-life-mdx-e605883df4f8a8ad6309.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport GameOfLife from '../../components/examples/game-of-life';\nexport const _frontmatter = {\n  \"Title\": \"Game of Life\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"game-of-life\"\n    }}>{`Game of Life`}</h1>\n    <GameOfLife mdxType=\"GameOfLife\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst stale = `0000010000000000010000000000\n0000000100010010000000000000\n1110001000000000000000000001\n1010000000000000000000000000\n0000000000100000000010110000\n0100000101010100000000000001\n0000000000010100000001000001\n0000000011100100000000100001\n0000010000000000000000010000\n0000000000010100000000000100`\n  .split('\\n')\n  .map(d => d.split('').map(Number));\n\n// helpers\n\nfunction countNeighbors(x, y, grid) {\n  const height = grid.length;\n  if (!height) {\n    return 0;\n  }\n  const width = grid[0].length;\n\n  let n = 0;\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n      const x1 = x + xOffset;\n      const y1 = y + yOffset;\n      if (\n        x1 < width &&\n        x1 > 0 &&\n        y1 < height &&\n        y1 > 0 &&\n        (x1 !== x || y1 !== y)\n      ) {\n        n += grid[y1][x1];\n      }\n    }\n  }\n  return n;\n}\n\nexport function updateGameOfLifeGrid({ data, complete }) {\n  let changes = 0;\n  const updatedGrid = data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        changes++;\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        changes++;\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n  if (changes === 0) {\n    complete();\n  }\n  return updatedGrid;\n}\n\nexport function updateGridNoComplete({ data }) {\n  return data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n}\n\nexport function initGrid({ height, width, density }, random = Math.random) {\n  return Array(height)\n    .fill(0)\n    .map(row =>\n      Array(width)\n        .fill(0)\n        .map(() => Number(random() < density))\n    );\n}\n\nconst GameOfLife = props => (\n  <Model\n    auto={false}\n    controls={{\n      param: 'density',\n      maxValue: 1,\n      step: 0.01,\n      resetOnChange: true,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    updateData={updateGameOfLifeGrid}\n    delay={100}\n    initData={initGrid}\n    initialParams={{\n      height: 28,\n      width: 28,\n      density: 0.15,\n    }}\n    {...props}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step2 = () => (\n  <Model\n    initData={initGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step3 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGridNoComplete}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step4 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step5 = () => (\n  <Model\n    controls={{\n      param: 'density',\n      resetOnChange: true,\n      maxValue: 1,\n      step: 0.01,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport default GameOfLife;\n","import React from 'react';\nimport { Model } from 'react-sim';\nimport { Flex } from 'rebass';\n\nconst FramedModel = ({fmOverrides, ...props}) => (\n  <Flex\n    sx={{\n      border: '1px solid currentcolor',\n      my: 2,\n      p: 2,\n      width: '350px',\n    }}\n    {...fmOverrides}\n  >\n    <Model {...props} />\n  </Flex>\n);\n\nexport default FramedModel;\n"],"sourceRoot":""}