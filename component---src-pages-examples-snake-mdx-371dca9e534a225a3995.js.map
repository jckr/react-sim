{"version":3,"sources":["webpack:///./src/pages/examples/snake.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,CAC1B,MAAS,SAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOA,QAAQ,UACf,4DAA2C,+BAAGC,WAAW,KAAQ,CAC7D,KAAQ,8DAD+B,SAA3C,KAGA,qTACA,mUACqD,kBAAIA,WAAW,KAAf,iBADrD,8IAEA,YAAC,IAAD,CAAWD,QAAQ,eAKvBH,EAAWK,gBAAiB","file":"component---src-pages-examples-snake-mdx-371dca9e534a225a3995.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Snake, { SnakeGrid } from '../../components/examples/snake';\nexport const _frontmatter = {\n  \"Title\": \"Snake\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"snake\"\n    }}>{`Snake`}</h1>\n    <Snake mdxType=\"Snake\" />\n    <p>{`This model tries to win the game of `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Snake_(video_game_genre)%3E\"\n      }}>{`Snake`}</a>{`.`}</p>\n    <p>{`A snake moves on a 2d grid. It can go straight, turn left or right. If it hits the borders of the grid or a part of its body, the game is over. If the snake eats a fruit, it grows in size. The goal of the game is to eat all the fruits, until the snake covers the entirety of the grid.`}</p>\n    <p>{`The way the model works is by finding a circuit which is safe for the snake to use. If we can find a circuit that covers the whole grid, then the snake can loop on that circuit endlessly and never collide with anything else than with a fruit.\nHow do we find such a circuit? We start by finding the `}<em parentName=\"p\">{`shortest path`}</em>{` between the head and the tail of the snake. Then, we see how we can extend this path step by step. This other model shows how this works:`}</p>\n    <SnakeGrid mdxType=\"SnakeGrid\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}