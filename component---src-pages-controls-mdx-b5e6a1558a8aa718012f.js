(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{IQ7j:function(t,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return l})),n.d(e,"default",(function(){return c}));var o=n("zLVn"),a=(n("q1tI"),n("7ljp")),i=n("tBDR"),r=["components"],l={Title:"Controls"},s={_frontmatter:l};function c(t){var e=t.components,n=Object(o.a)(t,r);return Object(a.b)("wrapper",Object.assign({},s,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"controls"},"Controls"),Object(a.b)("p",null,"Controls is how a user can interact with the simulation:"),Object(a.b)(i.a,{name:"modelControls",mdxType:"Image"}),Object(a.b)("p",null,"React-Sim provides 2 ways to build that interface."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},'A "fast" one, by passing certain props to a ',Object(a.b)("inlineCode",{parentName:"li"},"<Model />")," component. You have access to building blocks to create a controls UI, styled sensibly, with minimal effort."),Object(a.b)("li",{parentName:"ul"},'a "custom" one, using a wrapper. You bring in the component you want, styled the way you want, wrap it in ',Object(a.b)("inlineCode",{parentName:"li"},"withControls")," and it will have the methods and information needed to interact with the simulation.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"TL;DR"),": by default, your ",Object(a.b)("inlineCode",{parentName:"p"},"Model")," will come with a ",Object(a.b)("a",{parentName:"p",href:"/react-sim/controls/default-timer"},"default timer")," control that lets user start, stop, reset and go step by step in a simulation. That default timer stops at 100 ticks."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-controls-mdx-b5e6a1558a8aa718012f.js.map