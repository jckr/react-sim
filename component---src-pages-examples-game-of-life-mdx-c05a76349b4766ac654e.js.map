{"version":3,"sources":["webpack:///./src/pages/examples/game-of-life.mdx","webpack:///./src/components/examples/game-of-life.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","isMDXComponent","countNeighbors","x","y","grid","height","length","width","n","xOffset","yOffset","x1","y1","updateGameOfLifeGrid","data","complete","changes","updatedGrid","map","row","cell","neighbors","updateGridNoComplete","initGrid","density","Array","fill","Number","Math","random","GameOfLifeFrame","render","this","accessor","size","index","key","styles","overflow","alignItems","justifyContent","style","background","borderRadius","React","Component","defaultProps","d","Frame","initData","display","flexDirection","Step2","initialParams","Step3","updateData","Step4","Step5","controls","param","resetOnChange","maxValue","step","label","showTimeSlider","GameOfLife","auto","delay"],"mappings":"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","file":"component---src-pages-examples-game-of-life-mdx-c05a76349b4766ac654e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport GameOfLife from '../../components/examples/game-of-life';\nexport const _frontmatter = {\n  \"Title\": \"Game of Life\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Game of Life`}</h1>\n    <GameOfLife mdxType=\"GameOfLife\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { FlexRow, FlexColumn, Model } from 'react-sim';\n\n// helpers\n\nfunction countNeighbors(x, y, grid) {\n  const height = grid.length;\n  if (!height) {\n    return 0;\n  }\n  const width = grid[0].length;\n\n  let n = 0;\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n      const x1 = x + xOffset;\n      const y1 = y + yOffset;\n      if (\n        x1 < width &&\n        x1 > 0 &&\n        y1 < height &&\n        y1 > 0 &&\n        (x1 !== x || y1 !== y)\n      ) {\n        n += grid[y1][x1];\n      }\n    }\n  }\n  return n;\n}\n\nexport function updateGameOfLifeGrid({ data, complete }) {\n  let changes = 0;\n  const updatedGrid = data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        changes++;\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        changes++;\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n  if (changes === 0) {\n    complete();\n  }\n  return updatedGrid;\n}\n\nexport function updateGridNoComplete({ data }) {\n  return data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n}\n\nfunction initGrid({ height, width, density }) {\n  return Array(height)\n    .fill(0)\n    .map(row =>\n      Array(width)\n        .fill(0)\n        .map(() => Number(Math.random() < density))\n    );\n}\n\nexport class GameOfLifeFrame extends React.Component {\n  static defaultProps = {\n    size: 12,\n    accessor: d => d,\n  };\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const { accessor, data, size } = this.props;\n    return (\n      <div>\n        {data.map((row, index) => (\n          <FlexRow key={`r-${index}`} styles={{ height: size }}>\n            {row.map((cell, index) => (\n              <FlexColumn\n                key={`c-${index}`}\n                styles={{\n                  width: size,\n                  overflow: 'hidden',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  // border: \"1px solid black\"\n                }}\n              >\n                <div\n                  style={{\n                    background: '#000',\n                    borderRadius: accessor(cell) ? 0 : '50%',\n                    width: accessor(cell) ? '100%' : 0,\n                    height: accessor(cell) ? '100%' : 0,\n                    // transition: \"all 0.1s\"\n                  }}\n                ></div>\n              </FlexColumn>\n            ))}\n          </FlexRow>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst Frame = ({ data, size = 12, initData }) => {\n  if (data === null) {\n    return null;\n  }\n  return (\n    <div>\n      {data.map((row, index) => (\n        <div\n          key={`r-${index}`}\n          style={{ display: 'flex', flexDirection: 'row', height: size }}\n        >\n          {row.map((cell, index) => (\n            <div\n              key={`c-${index}`}\n              style={{\n                width: size,\n                background: cell ? '#000' : 'none',\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst GameOfLife = () => (\n  <Model\n    auto={false}\n    controls={{\n      param: 'density',\n      maxValue: 1,\n      step: 0.01,\n      resetOnChange: true,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    updateData={updateGameOfLifeGrid}\n    delay={100}\n    initData={initGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step2 = () => (\n  <Model\n    initData={initGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step3 = () => (\n  <Model\n    initData={initGrid}\n    updateData={updateGridNoComplete}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step4 = () => (\n  <Model\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const Step5 = () => (\n  <Model\n    controls={{\n      param: 'density',\n      resetOnChange: true,\n      maxValue: 1,\n      step: 0.01,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 24,\n      width: 48,\n      density: 0.15,\n    }}\n  >\n    <Frame />\n  </Model>\n);\n\nexport default GameOfLife;\n"],"sourceRoot":""}