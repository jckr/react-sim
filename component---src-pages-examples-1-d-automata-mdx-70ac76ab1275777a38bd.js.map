{"version":3,"sources":["webpack:///./src/components/examples/1d-automata.js","webpack:///./src/pages/examples/1d-automata.mdx","webpack:///./src/components/examples/framed-model.js"],"names":["params","rule","cols","rows","firstLine","initData","random","Math","data","Array","fill","floor","length","map","d","updateData","cell","i","left","mid","right","Frame","withFrame","cachedData","tick","nbRows","min","style","overflow","position","height","width","margin","direction","sx","top","keys","rowIndex","ts","key","x","size","color","Square","bg","m","border","BitControl","withControls","bit","setParams","increment","set","flexDirection","onClick","alignItems","mr","cursor","Automata","initialParams","controls","param","label","type","options","resetOnChange","vertical","justifyContent","my","_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","FramedModel","p"],"mappings":"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","file":"component---src-pages-examples-1-d-automata-mdx-70ac76ab1275777a38bd.js","sourcesContent":["import React from 'react';\nimport { withControls, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nimport { Flex, Box } from 'rebass';\n\nexport const params = {\n  rule: 110,\n  cols: 33,\n  rows: 24,\n  firstLine: 'blank',\n};\nexport const initData = ({ cols, firstLine }, random = Math.random) => {\n  const data = Array(cols).fill(0);\n\n  data[Math.floor(data.length / 2)] = 1;\n  if (firstLine === 'blank') {\n    return data;\n  }\n  if (firstLine === 'full') {\n    return data.map(d => 1);\n  }\n  return data.map(d => (random() > 0.5 ? 1 : 0));\n};\nexport const updateData = ({ data, cols, params }) => {\n  const { rule } = params;\n  return data.map((cell, i) => {\n    const left = data[i - 1];\n    const mid = data[i];\n    const right = data[i + 1];\n\n    const bit = (left ? 4 : 0) + (mid ? 2 : 0) + (right ? 1 : 0);\n    const output = rule & (1 << bit);\n    // console.log(left, mid, right, bit, output})\n    return output;\n  });\n};\n\nexport const FrameComponent = ({ data, cachedData, tick, params }) => {\n  const { rows, cols } = params;\n  const nbRows = Math.min(tick, params.rows);\n  return (\n    <div\n      style={{\n        overflow: 'hidden',\n        position: 'relative',\n        height: rows * 10,\n        width: cols * 10,\n        margin: '0 auto',\n      }}\n    >\n      <Flex direction=\"column\" sx={{ position: 'absolute', top: 0 }}>\n        {[...Array(nbRows).keys()].map(rowIndex => {\n          const ts = tick - nbRows + rowIndex;\n          return (\n            <Flex\n              direction=\"row\"\n              key={`row-${ts}`}\n              sx={{ position: 'absolute', top: 10 * rowIndex }}\n            >\n              {cachedData[ts].map((cell, x) => (\n                <Square\n                  size={8}\n                  color={cell ? '#000' : 'none'}\n                  key={`cell-${x}`}\n                />\n              ))}\n            </Flex>\n          );\n        })}\n      </Flex>\n    </div>\n  );\n};\nconst Frame = withFrame(FrameComponent);\n\nconst Square = ({ color, size = 12 }) => (\n  <Box\n    sx={{\n      height: `${size}px`,\n      width: `${size}px`,\n      bg: color,\n      m: '1px',\n      border: '2px solid #000',\n    }}\n  />\n);\n\nconst BitControlComponent = ({ bit, params, setParams }) => {\n  const { rule } = params;\n  const increment = 1 << bit;\n  const set = increment & rule;\n  const left = 4 & bit;\n  const mid = 2 & bit;\n  const right = 1 & bit;\n  const action = () => {\n    const updatedRule = set ? rule - increment : rule + increment;\n    setParams({ rule: updatedRule });\n  };\n  return (\n    <Flex\n      flexDirection=\"column\"\n      onClick={action}\n      alignItems=\"center\"\n      sx={{ mr: 2, cursor: 'pointer' }}\n    >\n      <Flex flexDirection=\"row\">\n        <Square color={left ? '#000' : 'none'} />\n        <Square color={mid ? '#000' : 'none'} />\n        <Square color={right ? '#000' : 'none'} />\n      </Flex>\n      <Square color={set ? '#000' : 'none'} />\n    </Flex>\n  );\n};\n\nconst BitControl = withControls(BitControlComponent);\n\nconst Automata = () => (\n  <Model\n    initialParams={params}\n    initData={initData}\n    updateData={updateData}\n    controls={\n      ({ param: 'rule', maxValue: 255, label: 'Rule' },\n      {\n        param: 'firstLine',\n        label: 'First line:',\n        type: 'radio',\n        options: ['blank', 'full', 'random'],\n        resetOnChange: true,\n        vertical: true,\n      })\n    }\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[0, 1, 2, 3].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>\n      <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[4, 5, 6, 7].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>\n    </Flex>\n  </Model>\n);\n\nexport default Automata;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Automata from '../../components/examples/1d-automata';\nexport const _frontmatter = {\n  \"Title\": \"1D automata\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"1d-automata\"\n    }}>{`1D Automata`}</h1>\n    <Automata mdxType=\"Automata\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://mathworld.wolfram.com/ElementaryCellularAutomaton.html\"\n      }}>{`1D cellular automata`}</a>{` are among the simplest of automata.\nEach line consists of a series of cells which are either set (colored) or not.`}</p>\n    <p>{`At each tick, we use a rule to determine whether cells on the next line will be set.\nFor each new cell, we consider the three cells above. There are 8 possible combinations - each of these cells can be set or not (so 2x2x2).\nFor each of these combinations, the rule determines whether the cell should be set or not. So we have 2`}<sup>{`8`}</sup>{` rules, or 256.`}</p>\n    <p>{`You can select a rule by adjusting the slider, or by clicking on each of the bits.`}</p>\n    <p>{`This simulation is an interesting example of `}<a parentName=\"p\" {...{\n        \"href\": \"/react-sim/controls/custom-controls\"\n      }}>{`custom control components`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { Model } from 'react-sim';\nimport { Flex } from 'rebass';\n\nconst FramedModel = props => (\n  <Flex\n    sx={{\n      border: '1px solid currentcolor',\n      my: 2,\n      p: 2,\n      width: '350px',\n    }}\n  >\n    <Model {...props} />\n  </Flex>\n);\n\nexport default FramedModel;\n"],"sourceRoot":""}