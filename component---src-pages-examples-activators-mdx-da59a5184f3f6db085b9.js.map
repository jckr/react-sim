{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js","webpack:///./src/components/examples/activators.js","webpack:///./src/components/examples/framed-model.js","webpack:///./src/pages/examples/activators.mdx"],"names":["$export","abs","Math","S","hypot","value1","value2","arg","div","sum","i","aLen","arguments","length","larg","Infinity","sqrt","getTotalValue","grid","listOfCells","reduce","total","x","y","value","update","data","params","tick","complete","JSON","parse","stringify","changes","height","width","w","row","col","innerNeighbors","outerNeighbors","mutation","initData","random","density","innerRadius","outerRadius","cells","x0","max","x1","min","y0","y1","dist","push","ActivatorFrame","props","size","accessor","d","Activators","auto","controls","param","minValue","maxValue","label","step","initialParams","updateData","maxTime","FramedModel","fmOverrides","sx","border","my","p","_frontmatter","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-examples-activators-mdx-da59a5184f3f6db085b9.js","sourcesContent":["// 20.2.2.17 Math.hypot([value1[, value2[, â€¦ ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\n// helpers\n\nfunction getTotalValue(grid, listOfCells) {\n  return listOfCells.reduce((total, [x, y]) => total + grid[y][x].value, 0);\n}\n\nexport function update({ data, tick, params, complete }) {\n  let grid = JSON.parse(JSON.stringify(data));\n  let changes = 0;\n  const { height, width, w } = params;\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const { innerNeighbors, outerNeighbors } = data[row][col];\n\n      const activators = getTotalValue(data, innerNeighbors);\n      const inhibitors = getTotalValue(data, outerNeighbors);\n\n      const mutation = activators - w * inhibitors;\n\n      if (mutation > 0) {\n        grid[row][col].value = 1;\n      }\n      if (mutation < 0) {\n        grid[row][col].value = 0;\n      }\n      if (grid[row][col] !== data[row][col]) {\n        changes++;\n      }\n\n      // if mutation = 0, leave cell unchanged\n    }\n  }\n  if (changes < 0.01 * height * width) {\n    complete();\n  }\n  return grid;\n}\n\nexport function initData(\n  { height, width, density, innerRadius, outerRadius },\n  random = Math.random\n) {\n  const data = [];\n  for (let row = 0; row < height; row++) {\n    const cells = [];\n    for (let col = 0; col < width; col++) {\n      const innerNeighbors = [];\n      const outerNeighbors = [];\n\n      const x0 = Math.max(col - outerRadius, 0);\n      const x1 = Math.min(col + outerRadius, width - 1);\n      const y0 = Math.max(row - outerRadius, 0);\n      const y1 = Math.min(row + outerRadius, height - 1);\n\n      for (let x = x0; x < x1; x++) {\n        for (let y = y0; y < y1; y++) {\n          const dist = Math.hypot(col - x, row - y);\n          if (dist > innerRadius && dist <= outerRadius) {\n            outerNeighbors.push([x, y]);\n          } else {\n            if (dist > 0 && dist <= innerRadius) {\n              innerNeighbors.push([x, y]);\n            }\n          }\n        }\n      }\n\n      const value = random() < density;\n\n      cells.push({ value, innerNeighbors, outerNeighbors });\n    }\n    data.push(cells);\n  }\n  return data;\n}\n\nexport const ActivatorFrame = props => (\n  <Grid size={10} accessor={d => (d.value ? '#000' : 'none')} {...props} />\n);\nconst Activators = props => (\n  <Model\n    auto=\"false\"\n    controls={[\n      [\n        {\n          param: 'innerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Inner Radius',\n        },\n        {\n          param: 'outerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Outer Radius',\n        },\n      ],\n      [\n        { param: 'w', minValue: 0, maxValue: 1, label: 'weight', step: 0.01 },\n        { param: 'density', minValue: 0, maxValue: 1, step: 0.1 },\n      ],\n    ]}\n    initData={initData}\n    initialParams={{\n      height: 35,\n      width: 35,\n      density: 0.5,\n      innerRadius: 3,\n      outerRadius: 6,\n      w: 0.35,\n    }}\n    updateData={update}\n    maxTime={200}\n    {...props}\n  >\n    <ActivatorFrame />\n  </Model>\n);\n\nexport default Activators;\n","import React from 'react';\nimport { Model } from 'react-sim';\nimport { Flex } from 'rebass';\n\nconst FramedModel = ({fmOverrides, ...props}) => (\n  <Flex\n    sx={{\n      border: '1px solid currentcolor',\n      my: 2,\n      p: 2,\n      width: '350px',\n    }}\n    {...fmOverrides}\n  >\n    <Model {...props} />\n  </Flex>\n);\n\nexport default FramedModel;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Activators from '../../components/examples/activators';\nexport const _frontmatter = {\n  \"Title\": \"Activators / Inhibitors\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"activators--inhibitors\"\n    }}>{`Activators / Inhibitors`}</h1>\n    <Activators mdxType=\"Activators\" />\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.scholarpedia.org/article/Gierer-Meinhardt_model\"\n      }}>{`activator-inhibitor`}</a>{` model is a simulation of pattern formation such as the fur patterns of animals like the zebra or the giraffe.`}</p>\n    <p>{`In this pattern, cells are arranged in a familar, 2d grid, and can either be activated (colored) or not (left blank).`}</p>\n    <p>{`Each activated cell activates cells in its inner radius, and inhibits cells in its outer radius.\nFor instance, if the inner radius is 3, and the outer radius is 6, all the cells within 3 cells of the activated cell are activated, and all cells beyond that and within 6 cells are inhibited.`}</p>\n    <p>{`Each turn, we go through all the cells in the grid, and count how many times they are activated, and how many times they are inhibited.\nThe weight coefficient determines the relative power of inhibitors.\nIf a cell is activated more than it's inhibited, it becomes (or stays) activated, else it's deactivated.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}