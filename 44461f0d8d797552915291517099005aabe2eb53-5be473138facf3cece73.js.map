{"version":3,"sources":["webpack:///./src/images/gifs/automata.gif","webpack:///./src/components/examples/dice.js","webpack:///./src/images/gifs/dice.gif","webpack:///./src/images/gifs/simple-model.gif","webpack:///./src/images/gifs/segregation.gif","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.math.hypot.js","webpack:///./src/components/examples/boids.js","webpack:///./src/images/gifs/fibonacci.gif","webpack:///./src/images/gifs/epidemic.gif","webpack:///./src/images/gifs/percolation.gif","webpack:///./src/components/examples/automata.js","webpack:///./src/components/examples/activators.js","webpack:///./src/components/examples/chaos-game.js","webpack:///./src/components/examples/epidemic.js","webpack:///./src/components/examples/mazes/helpers.js","webpack:///./src/components/examples/mazes/square.js","webpack:///./src/components/examples/mazes/hex.js","webpack:///./src/components/examples/mazes/triangle.js","webpack:///./src/components/constants.js","webpack:///./src/components/examples/mazes/circle.js","webpack:///./src/components/examples/mazes.js","webpack:///./src/components/examples/percolation.js","webpack:///./src/components/examples/segregation.js","webpack:///./src/components/examples/simple-model.js","webpack:///./src/components/examples/snake/helpers.js","webpack:///./src/components/examples/snake/canvas.js","webpack:///./src/components/examples/snake/data.js","webpack:///./src/components/examples/snake.js","webpack:///./src/components/examples/index.js","webpack:///./src/images/gifs/chaos-game.gif","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.repeat.js","webpack:///./src/images/gifs/maze.gif","webpack:///./src/images/gifs/game-of-life.gif","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-repeat.js","webpack:///./src/components/examples/game-of-life.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es7.string.pad-start.js","webpack:///./src/images/gifs/activators.gif","webpack:///./src/images/gifs/snake.gif","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-pad.js","webpack:///./src/components/examples/fibonacci.js","webpack:///./src/images/gifs/boids.gif"],"names":["module","exports","roll","random","Math","ceil","updateDice","data","tick","nbDice","params","lastTotals","totals","total","rolls","i","push","updatedTotals","average","initDice","Die","value","dotStyle","background","width","height","borderRadius","position","top","bottom","right","left","mid","style","marginRight","border","Bar","label","max","nbRolls","nbValues","theme","color","colors","primary","flexDirection","sx","justifyContent","alignItems","backgroundColor","fontSize","min","DiceFrame","render","this","props","minValue","Number","bars","Array","fill","map","d","index","key","bar","React","Component","Dice","useThemeUI","auto","controls","param","maxValue","resetOnChange","updateData","maxTime","initData","initialParams","$export","abs","S","hypot","value1","value2","arg","div","sum","aLen","arguments","length","larg","Infinity","sqrt","alignmentCoefficient","alignmentDistance","cohesionCoefficient","cohesionDistance","maxforce","maxspeed","nbBoids","r","separationCoefficient","separationDistance","showCircles","normalize","v","l","mult","k","add","v0","v1","sub","limit","force","limitedForce","angle","PI","velocity","cos","sin","acceleration","separation","alignment","cohesion","forEach","boid","countSeparation","countAlignment","countCohesion","j","otherBoid","positionDifference","distanceBetweenBoids","diff","seek","atan2","target","desired","steer","draw","ctx","circle","fillStyle","fillRect","x","y","strokeStyle","globalAlpha","beginPath","moveTo","lineTo","closePath","stroke","Frame","Boids","nocache","step","type","ChillBoids","isPlaying","noControls","rule","cols","rows","firstLine","floor","cell","withFrame","cachedData","nbRows","overflow","margin","direction","keys","rowIndex","ts","size","Square","bg","m","BitControl","withControls","bit","setParams","increment","set","onClick","mr","cursor","Automata","options","vertical","my","getTotalValue","grid","listOfCells","reduce","update","complete","JSON","parse","stringify","changes","w","row","col","innerNeighbors","outerNeighbors","mutation","density","innerRadius","outerRadius","cells","x0","x1","y0","y1","dist","ActivatorFrame","accessor","Activators","updateAttractors","angleOffset","nbAttractors","center","radius","init","undefined","attractors","o","points","prevDirection","rules","split","prev","curr","lastPoint","attractor","newPoint","globalCompositeOperation","point","BasicChaosGame","ticksPerAnimation","loop","Controls","nbToggles","toggle","a","flex","checked","charAt","setValue","updatedRules","slice","toggles","repeat","ChaosGame","COLORS","sick","recovered","healthy","dead","updateEpidemic","updatedData","agents","nbSick","nbHealthy","nbDead","nbRecovered","contaminationRisk","deathRisk","recoveryTicks","agent","status","recovery","otherAgent","dx","dy","distance","ax","ay","vx","vy","chooseMamongN","n","N","results","Set","Object","findOverlaps","filter","nbAgents","maxSpeed","nbDistancing","distancing","has","isDistancing","speed","isBouncing","EpidemicFrame","myRef","createRef","componentDidUpdate","current","getContext","lineWidth","clearRect","arc","ref","ConnectedFrame","series","Epidemic","hideSeries","stacked","HALF_SQRT3","P","P2","getColRow","id","norm","a0","a1","getRadius","layer","cellSize","acuteArc","angle0","angle1","startAngle","endAngle","isClockwise","isBetween","start","end","drawLink","getCoords","link","pathColor","pathSize","wallSize","startCell","endCell","getNeighborsSquare","neighbors","getCoordsSquare","drawLinkSquare","getNeighborsHex","getCoordsHex","drawLinkHex","getNeighborsTriangle","drawLinkTriangle","arrayToHex","c","toString","padStart","join","grids","drawItem","useColor","wallColor","layers","midangle","nbSegmentsPreviousLayer","circumference","nbSegments","runningAngle","previousLayerSegmentIdx","previousLayerSegmentId","s","midAngle","startAngleDeg","endAngleDeg","links","visited","currentCell","stack","initDataCircle","initDataSquare","initDataHex","initDataTriangle","otherData","values","pop","nextMove","otherParams","drawCell","other","wallAngleDelta","drawItemCircle","drawItemHex","strokeRect","drawItemSquare","isPointingDown","drawItemTriangle","drawLinkCircle","save","lineCap","startMidAngle","restore","endMidAngle","firstEnd","secondEnd","r0","r1","Maze","extraParams","queue","updatedStatus","nextQueue","shift","shouldComplete","updateDataGrid","nbPending","updatedCell","result","porosity","roundRectangle","colIndex","PercolationFrame","boxSizing","PercolationFrameGrid","ch","cw","display","textAlign","fontWeight","p","toFixed","initDataGrid","minP","stepP","ck","PercolationGrid","Percolation","proportion","tolerance","community","citizen","isHappy","happy","totalHappiness","rowHappiness","countHappiness","happiness","totalMoves","potentialNeighbors","onYBorder","getPotentialNeighbors","neighborsOfSameCommunity","offset","neighborX","neighborY","isInBounds","countNeighbors","threshold","movers","updatedTotalMoves","updatedGrid","prevX","prevY","firstUnhappyCitizen","randomUnhappyCitizenNumber","secondUnhappyCitizen","temp","concat","showmoves","sy","counterSeries","Segregation","delay","SimpleModel","DIRECTIONS","opposite","getDir","getRandomInBounds","isValid","initVisited","path","rowResults","getShortestPath","paths","next","found","node","getLongestPath","longestPath","updatedPath","extendPath","lastInLongestPath","nextInStack","rightPoints","leftPoints","unshift","considered","getActionGrid","totalPath","actionGrid","positionFruit","eligiblePositions","resultRow","displayGrid","displayHead","displayCircuit","accent","muted","secondary","gray","bestPath","snakePath","fruit","drawActionGrid","coords","c0","c1","horizontal","topLeft","topRight","bottomLeft","bottomRight","action","withTheme","initSnake","directionRandom","directionText","initialLength","snakePosRandom","xHead","yHead","up","down","minX","maxX","minY","maxY","head","tail","behindTail","frontOfSnake","initSnakeGrid","initSnakeGame","updateSnake","updatedActionGrid","updatedBestPath","fruitGrowth","safeMode","updatedHead","every","updatedLength","updatedFruit","pathToFruit","tailToFruit","backToTail","addToGrid","updatedDirection","updateSnakeGrid","Snake","noCache","normal","fast","SnakeGrid","gifs","activators","automata","boids","chaosGame","dice","epidemic","fibonacci","gameOfLife","mazes","maze","percolation","segregation","simpleModel","snake","examples","toInteger","defined","count","str","String","res","RangeError","stale","xOffset","yOffset","updateGameOfLifeGrid","updateGridNoComplete","initGrid","Step2","Step3","Step4","Step5","showTimeSlider","GameOfLife","$pad","userAgent","WEBKIT_BUG","test","F","maxLength","toLength","that","fillString","stringLength","fillStr","intMaxLength","fillLen","stringFiller","call","phi","D","0","1","2","3","lastNumber","side","FibonacciSpiralFrame","FibonacciSpiral","NumberFrame","flexWrap","FibonacciNumbers"],"mappings":"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","file":"44461f0d8d797552915291517099005aabe2eb53-5be473138facf3cece73.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/automata-b39fb918fe98750c08d0c7739c8e4c37.gif\";","import React from 'react';\nimport { useThemeUI } from 'theme-ui';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\n// helpers\n\nconst roll = random => Math.ceil(random() * 6);\n\nexport function updateDice(\n  { data, tick, params: { nbDice } },\n  random = Math.random\n) {\n  const lastTotals = data.totals;\n\n  // we roll the dice...\n  let total = 0;\n  const rolls = [];\n  for (let i = 0; i < nbDice; i++) {\n    rolls.push(roll(random));\n    total += rolls[i];\n  }\n\n  // and update the totals\n  const updatedTotals = {\n    ...lastTotals,\n    [total]: (lastTotals[total] || 0) + 1,\n  };\n\n  const average = (data.average * (tick - 1) + data.total) / tick;\n\n  return { rolls, average, total, totals: updatedTotals };\n}\n\nexport function initDice({ nbDice }) {\n  return {\n    rolls: [],\n    average: 3.5 * nbDice,\n    total: 0,\n    totals: {},\n  };\n}\n\nexport const Die = ({ value }) => {\n  const dotStyle = {\n    background: '#000',\n    width: 3,\n    height: 3,\n    borderRadius: '100%',\n    position: 'absolute',\n  };\n  const top = { top: 3 };\n  const bottom = { bottom: 3 };\n  const right = { right: 3 };\n  const left = { left: 3 };\n  const mid = { top: 8 };\n  const center = { left: 8 };\n  return (\n    <div\n      style={{\n        width: 21,\n        height: 21,\n        marginRight: 10,\n        position: 'relative',\n        border: '1px solid #000',\n        borderRadius: '3px',\n      }}\n    >\n      {value !== 1 && <div style={{ ...dotStyle, ...top, ...left }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...top, ...right }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...left }} />}\n      {value % 2 === 1 && <div style={{ ...dotStyle, ...mid, ...center }} />}\n      {value === 6 && <div style={{ ...dotStyle, ...mid, ...right }} />}\n      {value > 3 && <div style={{ ...dotStyle, ...bottom, ...left }} />}\n      {value !== 1 && <div style={{ ...dotStyle, ...bottom, ...right }} />}\n    </div>\n  );\n};\n\nconst Bar = ({ label, max, nbRolls, nbValues, theme }) => {\n  const height = max ? (50 * nbRolls) / max : 0;\n  const width = 350 / nbValues;\n  const color = theme?.colors?.primary || '#33f';\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex\n        flexDirection=\"row\"\n        sx={{\n          justifyContent: 'center',\n          alignItems: 'flex-end',\n          width,\n          height: '50px',\n        }}\n      >\n        <div style={{ width: width * 0.8, height, backgroundColor: color }} />\n      </Flex>\n      <Flex\n        flexDirection=\"row\"\n        sx={{\n          justifyContent: 'center',\n          fontSize: `${Math.min(350 / (1.5 * nbValues), 12)}px`,\n        }}\n      >\n        {label}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport class DiceFrame extends React.Component {\n  render() {\n    if (this.props.data === null) {\n      return null;\n    }\n    const {\n      data,\n      params: { nbDice },\n      theme,\n    } = this.props;\n\n    const minValue = Number(nbDice);\n    const maxValue = minValue * 6;\n    const nbValues = maxValue - minValue + 1;\n\n    const { rolls, totals } = data;\n    let max = 0;\n    const bars = Array(nbValues)\n      .fill(0)\n      .map((d, i) => {\n        const label = minValue + i;\n        const nbRolls = totals[label] || 0;\n        max = Math.max(max, nbRolls);\n        return { label, nbRolls };\n      });\n\n    return (\n      <Flex\n        flexDirection=\"column\"\n        sx={{ justifyContent: 'space-between', height: '140px' }}\n      >\n        <Flex flexDirection=\"row\">\n          {rolls.map((value, index) => (\n            <Die value={value} key={`k-${index}`} />\n          ))}\n        </Flex>\n        <Flex\n          flexDirection=\"row\"\n          sx={{ alignItems: 'flex-end', height: '80px' }}\n        >\n          {bars.map(bar => (\n            <Bar\n              {...bar}\n              key={bar.label}\n              max={max}\n              nbValues={nbValues}\n              theme={theme}\n            />\n          ))}\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nconst Dice = props => {\n  const context = useThemeUI();\n  const { theme } = context;\n  return (\n    <>\n      <Model\n        theme={theme}\n        auto={false}\n        controls={{\n          param: 'nbDice',\n          minValue: 1,\n          maxValue: 6,\n          resetOnChange: true,\n          label: 'Number of dice per roll',\n        }}\n        updateData={updateDice}\n        maxTime={1000}\n        initData={initDice}\n        initialParams={{\n          nbDice: 5,\n        }}\n        {...props}\n      >\n        <DiceFrame theme={theme} />\n      </Model>\n    </>\n  );\n};\n\nexport default Dice;\n","module.exports = __webpack_public_path__ + \"static/dice-2b10984d56dc4b5ad0213dc04be04471.gif\";","module.exports = __webpack_public_path__ + \"static/simple-model-112606a10d9be89ab56aa18ef510ac30.gif\";","module.exports = __webpack_public_path__ + \"static/segregation-4f3bc9a55501dca30a0df916012a0995.gif\";","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const params = {\n  alignmentCoefficient: 1,\n  alignmentDistance: 50,\n  cohesionCoefficient: 1,\n  cohesionDistance: 40,\n  height: 332,\n  maxforce: 0.03,\n  maxspeed: 2,\n  nbBoids: 50,\n  r: 5,\n  separationCoefficient: 1.5,\n  separationDistance: 25,\n  showCircles: true,\n  width: 332,\n};\n\n// helpers\n\nexport const normalize = v => {\n  const l = Math.hypot(...v);\n  if (l === 0) {\n    return v;\n  }\n  return div(v, l);\n};\n\nexport const mult = (v, k) => v.map(d => d * k);\nexport const div = (v, k) => v.map(d => d / k);\n\nexport const add = (v0, v1) => v0.map((d, i) => d + v1[i]);\nexport const sub = (v0, v1) => v0.map((d, i) => d - v1[i]);\n\nexport const limit = (v, k) => {\n  const force = Math.hypot(...v);\n  const limitedForce = Math.min(force, k);\n  return div(v, force / limitedForce);\n};\n\nexport const initData = ({ height, nbBoids, width }, random = Math.random) => {\n  const boids = Array(nbBoids)\n    .fill(0)\n    .map(d => {\n      const angle = random() * 2 * Math.PI;\n      const velocity = [Math.cos(angle), Math.sin(angle)];\n      const boid = {\n        angle,\n        acceleration: [0, 0],\n        position: [random() * width, random() * height],\n        velocity,\n      };\n      return boid;\n    });\n  return boids;\n};\n\nexport const updateData = ({ data, params }) => {\n  const {\n    alignmentDistance,\n    cohesionDistance,\n    separationCoefficient,\n    alignmentCoefficient,\n    cohesionCoefficient,\n    separationDistance,\n    maxspeed,\n    maxforce,\n    r,\n    height,\n    width,\n  } = params;\n\n  const separation = data.map(d => [0, 0]);\n  const alignment = data.map(d => [0, 0]);\n  const cohesion = data.map(d => [0, 0]);\n\n  data.forEach((boid, i) => {\n    let countSeparation = 0;\n    let countAlignment = 0;\n    let countCohesion = 0;\n\n    for (let j = 0; j < data.length; j++) {\n      if (j !== i) {\n        const otherBoid = data[j];\n        const positionDifference = sub(boid.position, otherBoid.position);\n        const distanceBetweenBoids = Math.hypot(...positionDifference);\n\n        // separation\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < separationDistance\n        ) {\n          const diff = div(normalize(positionDifference), distanceBetweenBoids);\n          separation[i] = add(separation[i], diff);\n          countSeparation++;\n        }\n\n        // alignment\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < alignmentDistance\n        ) {\n          alignment[i] = add(alignment[i], otherBoid.velocity);\n          countAlignment++;\n        }\n\n        // cohesion\n\n        if (\n          distanceBetweenBoids > 0 &&\n          distanceBetweenBoids < cohesionDistance\n        ) {\n          cohesion[i] = add(cohesion[i], otherBoid.position);\n          countCohesion++;\n        }\n      }\n    }\n\n    // separation\n\n    if (countSeparation > 0) {\n      separation[i] = div(separation[i], countSeparation);\n      separation[i] = normalize(separation[i]);\n      separation[i] = mult(separation[i], maxspeed);\n      separation[i] = sub(separation[i], boid.velocity);\n      separation[i] = limit(separation[i], maxforce);\n      separation[i] = mult(separation[i], separationCoefficient);\n    }\n\n    // alignment\n    if (countAlignment > 0) {\n      alignment[i] = div(alignment[i], countAlignment);\n      alignment[i] = normalize(alignment[i]);\n      alignment[i] = mult(alignment[i], maxspeed);\n      alignment[i] = sub(alignment[i], boid.velocity);\n      alignment[i] = limit(alignment[i], maxforce);\n      alignment[i] = mult(alignment[i], alignmentCoefficient);\n    }\n\n    // cohesion\n    if (countCohesion > 0) {\n      cohesion[i] = div(cohesion[i], countCohesion);\n      cohesion[i] = seek(\n        boid.position,\n        cohesion[i],\n        boid.velocity,\n        maxspeed,\n        maxforce\n      );\n      cohesion[i] = mult(cohesion[i], cohesionCoefficient);\n    }\n  });\n\n  return data.map((boid, i) => {\n    // applying all three forces\n    const acceleration = add(add(alignment[i], cohesion[i]), separation[i]);\n    const velocity = limit(add(boid.velocity, acceleration), maxspeed);\n    const position = add(boid.position, velocity);\n    const angle = Math.atan2(boid.velocity[1], boid.velocity[0]);\n    // wraparound\n\n    if (position[0] < -r) {\n      position[0] = width + r;\n    }\n    if (position[0] > width + r) {\n      position[0] = -r;\n    }\n    if (position[1] < -r) {\n      position[1] = height + r;\n    }\n    if (position[1] > height + r) {\n      position[1] = -r;\n    }\n    return {\n      ...boid,\n      angle,\n      position,\n      velocity,\n    };\n  });\n};\n\nexport const seek = (position, target, velocity, maxspeed, maxforce) => {\n  const desired = mult(normalize(sub(target, position)), maxspeed);\n  const steer = sub(desired, velocity);\n  return limit(steer, maxforce);\n};\n\nexport const draw = ({\n  ctx,\n  circle,\n  data,\n  params: {\n    alignmentDistance,\n    cohesionDistance,\n    separationDistance,\n    height,\n    showCircles,\n    width,\n    r,\n  },\n}) => {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, width, height);\n  data.forEach(({ position: [x, y], angle }) => {\n    ctx.strokeStyle = '#000';\n    ctx.globalAlpha = 1;\n    ctx.beginPath();\n    ctx.moveTo(x + Math.cos(angle) * r, y + Math.sin(angle) * r);\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 2) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 2) / 3) * r * 2) / 3\n    );\n    ctx.lineTo(\n      x + (Math.cos(angle + (Math.PI * 4) / 3) * r * 2) / 3,\n      y + (Math.sin(angle + (Math.PI * 4) / 3) * r * 2) / 3\n    );\n    ctx.closePath();\n    ctx.stroke();\n    if (showCircles) {\n      ctx.globalAlpha = 0.2;\n      ctx.strokeStyle = '#f00';\n      circle({ x, y, r: separationDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#0f0';\n      circle({ x, y, r: alignmentDistance });\n      ctx.closePath();\n      ctx.stroke();\n      ctx.strokeStyle = '#00f';\n      circle({ x, y, r: cohesionDistance });\n      ctx.closePath();\n      ctx.stroke();\n    }\n  });\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Boids = props => (\n  <Model\n    initialParams={params}\n    maxTime={Infinity}\n    nocache\n    initData={initData}\n    updateData={updateData}\n    controls={[\n      [\n        {\n          param: 'alignmentCoefficient',\n          label: 'Alignment',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'alignmentDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'cohesionCoefficient',\n          label: 'Cohesion',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'cohesionDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      [\n        {\n          param: 'separationCoefficient',\n          label: 'Separation',\n          minValue: 0,\n          maxValue: 3,\n          step: 0.01,\n        },\n        {\n          param: 'separationDistance',\n          label: 'Radius',\n          minValue: 0,\n          maxValue: 50,\n          step: 1,\n        },\n      ],\n      {\n        param: 'showCircles',\n        label: 'Show circles:',\n        type: 'toggle',\n      },\n    ]}\n    {...props}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const ChillBoids = props => (\n  <Boids isPlaying noControls {...props} />\n);\nexport default Boids;\n","module.exports = __webpack_public_path__ + \"static/fibonacci-2f933d66dfe433d4547e4bfb8218779f.gif\";","module.exports = __webpack_public_path__ + \"static/epidemic-543248eea98f59d4a14736f5d2271fbf.gif\";","module.exports = __webpack_public_path__ + \"static/percolation-bc66acc47a89ba3b5505739c37d87f08.gif\";","import React from 'react';\nimport { withControls, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nimport { Flex, Box } from 'rebass';\n\nexport const params = {\n  rule: 110,\n  cols: 33,\n  rows: 24,\n  firstLine: 'blank',\n};\nexport const initData = ({ cols, firstLine }, random = Math.random) => {\n  const data = Array(cols).fill(0);\n\n  data[Math.floor(data.length / 2)] = 1;\n  if (firstLine === 'blank') {\n    return data;\n  }\n  if (firstLine === 'full') {\n    return data.map(d => 1);\n  }\n  return data.map(d => (random() > 0.5 ? 1 : 0));\n};\nexport const updateData = ({ data, cols, params }) => {\n  const { rule } = params;\n  return data.map((cell, i) => {\n    const left = data[i - 1];\n    const mid = data[i];\n    const right = data[i + 1];\n\n    const bit = (left ? 4 : 0) + (mid ? 2 : 0) + (right ? 1 : 0);\n    const output = rule & (1 << bit);\n    // console.log(left, mid, right, bit, output})\n    return output;\n  });\n};\n\nexport const FrameComponent = ({ data, cachedData, tick, params }) => {\n  const { rows, cols } = params;\n  const nbRows = Math.min(tick, params.rows);\n  return (\n    <div\n      style={{\n        overflow: 'hidden',\n        position: 'relative',\n        height: rows * 10,\n        width: cols * 10,\n        margin: '0 auto',\n      }}\n    >\n      <Flex direction=\"column\" sx={{ position: 'absolute', top: 0 }}>\n        {[...Array(nbRows).keys()].map(rowIndex => {\n          const ts = tick - nbRows + rowIndex;\n          return (\n            <Flex\n              direction=\"row\"\n              key={`row-${ts}`}\n              sx={{ position: 'absolute', top: 10 * rowIndex }}\n            >\n              {cachedData[ts].map((cell, x) => (\n                <Square\n                  size={8}\n                  color={cell ? '#000' : 'none'}\n                  key={`cell-${x}`}\n                />\n              ))}\n            </Flex>\n          );\n        })}\n      </Flex>\n    </div>\n  );\n};\nconst Frame = withFrame(FrameComponent);\n\nconst Square = ({ color, size = 12 }) => (\n  <Box\n    sx={{\n      height: `${size}px`,\n      width: `${size}px`,\n      bg: color,\n      m: '1px',\n      border: '2px solid #000',\n    }}\n  />\n);\n\nconst BitControlComponent = ({ bit, params, setParams }) => {\n  const { rule } = params;\n  const increment = 1 << bit;\n  const set = increment & rule;\n  const left = 4 & bit;\n  const mid = 2 & bit;\n  const right = 1 & bit;\n  const action = () => {\n    const updatedRule = set ? rule - increment : rule + increment;\n    setParams({ rule: updatedRule });\n  };\n  return (\n    <Flex\n      flexDirection=\"column\"\n      onClick={action}\n      alignItems=\"center\"\n      sx={{ mr: 2, cursor: 'pointer' }}\n    >\n      <Flex flexDirection=\"row\">\n        <Square color={left ? '#000' : 'none'} />\n        <Square color={mid ? '#000' : 'none'} />\n        <Square color={right ? '#000' : 'none'} />\n      </Flex>\n      <Square color={set ? '#000' : 'none'} />\n    </Flex>\n  );\n};\n\nconst BitControl = withControls(BitControlComponent);\n\nconst Automata = props => (\n  <Model\n    initialParams={params}\n    initData={initData}\n    updateData={updateData}\n    controls={\n      ({ param: 'rule', maxValue: 255, label: 'Rule' },\n      {\n        param: 'firstLine',\n        label: 'First line:',\n        type: 'radio',\n        options: ['blank', 'full', 'random'],\n        resetOnChange: true,\n        vertical: true,\n      })\n    }\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      {props.noControls ? null : <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[0, 1, 2, 3].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>}\n      {props.noControls ? null : <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-between', my: 2 }}>\n        {[4, 5, 6, 7].map(bit => (\n          <BitControl bit={bit} key={`bit-${bit}`} />\n        ))}\n      </Flex>}\n    </Flex>\n  </Model>\n);\n\nexport default Automata;\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\n// helpers\n\nfunction getTotalValue(grid, listOfCells) {\n  return listOfCells.reduce((total, [x, y]) => total + grid[y][x].value, 0);\n}\n\nexport function update({ data, tick, params, complete }) {\n  let grid = JSON.parse(JSON.stringify(data));\n  let changes = 0;\n  const { height, width, w } = params;\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const { innerNeighbors, outerNeighbors } = data[row][col];\n\n      const activators = getTotalValue(data, innerNeighbors);\n      const inhibitors = getTotalValue(data, outerNeighbors);\n\n      const mutation = activators - w * inhibitors;\n\n      if (mutation > 0) {\n        grid[row][col].value = 1;\n      }\n      if (mutation < 0) {\n        grid[row][col].value = 0;\n      }\n      if (grid[row][col] !== data[row][col]) {\n        changes++;\n      }\n\n      // if mutation = 0, leave cell unchanged\n    }\n  }\n  if (changes < 0.01 * height * width) {\n    complete();\n  }\n  return grid;\n}\n\nexport function initData(\n  { height, width, density, innerRadius, outerRadius },\n  random = Math.random\n) {\n  const data = [];\n  for (let row = 0; row < height; row++) {\n    const cells = [];\n    for (let col = 0; col < width; col++) {\n      const innerNeighbors = [];\n      const outerNeighbors = [];\n\n      const x0 = Math.max(col - outerRadius, 0);\n      const x1 = Math.min(col + outerRadius, width - 1);\n      const y0 = Math.max(row - outerRadius, 0);\n      const y1 = Math.min(row + outerRadius, height - 1);\n\n      for (let x = x0; x < x1; x++) {\n        for (let y = y0; y < y1; y++) {\n          const dist = Math.hypot(col - x, row - y);\n          if (dist > innerRadius && dist <= outerRadius) {\n            outerNeighbors.push([x, y]);\n          } else {\n            if (dist > 0 && dist <= innerRadius) {\n              innerNeighbors.push([x, y]);\n            }\n          }\n        }\n      }\n\n      const value = random() < density;\n\n      cells.push({ value, innerNeighbors, outerNeighbors });\n    }\n    data.push(cells);\n  }\n  return data;\n}\n\nexport const ActivatorFrame = props => (\n  <Grid size={10} accessor={d => (d.value ? '#000' : 'none')} {...props} />\n);\nconst Activators = props => (\n  <Model\n    auto=\"false\"\n    controls={[\n      [\n        {\n          param: 'innerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Inner Radius',\n        },\n        {\n          param: 'outerRadius',\n          minValue: 1,\n          maxValue: 10,\n          label: 'Outer Radius',\n        },\n      ],\n      [\n        { param: 'w', minValue: 0, maxValue: 1, label: 'weight', step: 0.01 },\n        { param: 'density', minValue: 0, maxValue: 1, step: 0.1 },\n      ],\n    ]}\n    initData={initData}\n    initialParams={{\n      height: 35,\n      width: 35,\n      density: 0.5,\n      innerRadius: 3,\n      outerRadius: 6,\n      w: 0.35,\n    }}\n    updateData={update}\n    maxTime={200}\n    {...props}\n  >\n    <ActivatorFrame />\n  </Model>\n);\n\nexport default Activators;\n","import React from 'react';\nimport {\n  withControls,\n  Range,\n  Toggle,\n  CanvasFrame,\n} from 'react-sim';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\nexport const updateAttractors = ({ angleOffset, nbAttractors, height, width }) => {\n  const center = { x: width / 2, y: height / 2 };\n  const radius = (0.95 * Math.min(height, width)) / 2;\n  return [...Array(nbAttractors).keys()].map(i => {\n    const angle = angleOffset + (0.5 * (nbAttractors + 4 * i)) / nbAttractors;\n    return {\n      x: center.x + radius * Math.cos(angle * Math.PI),\n      y: center.y - radius * Math.sin(angle * Math.PI),\n    };\n  });\n};\n\nexport function init({ angle, nbAttractors, height, width }, random = Math.random) {\n  const angleOffset = angle === undefined ? random() * 2 * Math.PI : angle;\n  const attractors = updateAttractors({\n    angleOffset,\n    nbAttractors,\n    height,\n    width,\n  });\n  const o = {\n    x: random() * width,\n    y: random() * height,\n  };\n  const background = `hsla(${Math.floor(random() * 360)}, 30%, 7%, 1)`;\n  const color = `hsla(${Math.floor(random() * 360)}, 77%, 45%, 1)`;\n  return {\n    attractors,\n    background,\n    color,\n    points: [o],\n    prevDirection: 0,\n  };\n}\n\nexport function updateData({ data, params, tick }, random = Math.random) {\n  const { nbAttractors } = params;\n  if (data.attractors.length !== nbAttractors) {\n    data.attractors = updateAttractors(params);\n  }\n  const rules = params.rules\n    ? params.rules.split('').reduce((prev, curr, i) => {\n        if (curr === '1') {\n          prev.push(i);\n        }\n        return prev;\n      }, [])\n    : [...Array(nbAttractors).keys()];\n  const direction =\n    (data.prevDirection + rules[Math.floor(random() * rules.length)]) %\n    nbAttractors;\n  data.prevDirection = direction;\n  const lastPoint = data.points[data.points.length - 1];\n  const attractor = data.attractors[direction];\n  const newPoint = {\n    x: (lastPoint.x + attractor.x) / 2,\n    y: (lastPoint.y + attractor.y) / 2,\n  };\n  data.points.push(newPoint);\n  return data;\n}\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nfunction draw({ ctx, data, params, tick, circle }) {\n  const { height, width } = params;\n  ctx.globalAlpha = 1;\n  ctx.fillStyle = data.background;\n  ctx.globalCompositeOperation = 'source-over';\n  ctx.fillRect(0, 0, width, height);\n\n  ctx.globalCompositeOperation = 'lighter';\n  ctx.fillStyle = data.color;\n  ctx.globalAlpha = 0.8;\n\n  for (let i = 0; i < tick; i++) {\n    const point = data.points[i];\n    const { x, y } = point;\n    const { r } = params;\n    circle({ x, y, r });\n    ctx.fill();\n  }\n}\n\nexport const BasicChaosGame = props => (\n  <Model\n    ticksPerAnimation={100}\n    maxTime={10000}\n    initData={init}\n    isPlaying\n    loop\n    updateData={updateData}\n    initialParams={{\n      height: 332,\n      width: 332,\n      nbAttractors: 3,\n      r: 1,\n    }}\n    {...props}\n  >\n    <Frame />\n  </Model>\n);\n\nexport const CustomControls = ({ params, setParams }) => {\n  const nbToggles = params.nbAttractors;\n  const nbRows = Math.ceil(nbToggles / 5);\n  const toggle = a =>\n    a < nbToggles ? (\n      <Toggle\n        key={`toggle-${a}`}\n        sx={{ flex: '1 1 0' }}\n        checked={params.rules.charAt(a) === '1'}\n        label={`${a + 1}${a === 0 ? 'st' : a === 1 ? 'nd' : 'th'} vertex`}\n        setValue={checked => {\n          const bit = params.rules.charAt(a) === '1' ? '0' : '1';\n          const updatedRules =\n            params.rules.slice(0, a) + bit + params.rules.slice(a + 1);\n          setParams({ rules: updatedRules });\n        }}\n      />\n    ) : null;\n\n  const toggles = [...Array(nbRows).keys()].map(r => (\n    <Flex\n      flexDirection=\"row\"\n      key={`tr-${r}`}\n      sx={{ justifyContent: 'space-between' }}\n    >\n      {[r * 5, r * 5 + 1, r * 5 + 2, r * 5 + 3, r * 5 + 4].map(toggle)}\n    </Flex>\n  ));\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Range\n        key=\"range\"\n        minValue={3}\n        maxValue={20}\n        label=\"Vertices\"\n        value={params.nbAttractors}\n        setValue={v =>\n          setParams({ nbAttractors: v, rules: '1'.repeat(v) }, true)\n        }\n      />\n      <Flex flexDirection=\"column\">{toggles}</Flex>\n    </Flex>\n  );\n};\n\nconst Controls = withControls(CustomControls);\nexport const ChaosGame = props => (\n  <Model\n    ticksPerAnimation={100}\n    maxTime={20000}\n    initData={init}\n    updateData={updateData}\n    initialParams={{\n      height: 332,\n      width: 332,\n      nbAttractors: 7,\n      angle: 0,\n      r: 1,\n      rules: '1001100',\n    }}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <Controls />\n    </Flex>\n  </Model>\n);\nexport default ChaosGame;\n","import React from 'react';\nimport { Flex } from 'rebass';\nimport { TimeSeries, Counter, withFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst COLORS = {\n  sick: '#4f8c9d',\n  recovered: '#add51f',\n  healthy: '#997cfb',\n  dead: '#6a9012',\n};\n\nexport function updateEpidemic(\n  { data, tick, params, complete },\n  random = Math.random\n) {\n  let updatedData = JSON.parse(JSON.stringify(data.agents));\n  let nbSick = 0,\n    nbHealthy = 0,\n    nbDead = 0,\n    nbRecovered = 0;\n\n  const {\n    contaminationRisk,\n    deathRisk,\n    r,\n    recoveryTicks,\n    height,\n    width,\n  } = params;\n\n  updatedData.forEach((agent, i) => {\n    // update status\n\n    if (agent.status === 'sick') {\n      if (tick >= agent.recovery) {\n        agent.status = 'recovered';\n      } else {\n        if (random() < deathRisk) {\n          agent.status = 'dead';\n        }\n      }\n    }\n    if (agent.status !== 'dead') {\n      // checking for collisions\n\n      for (let j = i + 1; j < updatedData.length; j++) {\n        let otherAgent = updatedData[j];\n        const dx = otherAgent.x - agent.x;\n        const dy = otherAgent.y - agent.y;\n        const distance = Math.hypot(dx, dy);\n        if (distance < 2 * r) {\n          // collision\n\n          const ax = dx / distance;\n          const ay = dy / distance;\n\n          agent.vx = agent.vx - ax;\n          agent.vy = agent.vy - ay;\n          otherAgent.vx = ax;\n          otherAgent.vy = ay;\n\n          // test for contagion\n\n          if (agent.status === 'sick' && otherAgent.status === 'healthy') {\n            if (random() <= contaminationRisk) {\n              otherAgent.status = 'sick';\n              otherAgent.recovery = tick + recoveryTicks;\n            }\n          }\n          if (agent.status === 'healthy' && otherAgent.status === 'sick') {\n            if (random() <= contaminationRisk) {\n              agent.status = 'sick';\n              agent.recovery = tick + recoveryTicks;\n            }\n          }\n        }\n      }\n\n      // now move\n\n      agent.x = agent.x + agent.vx;\n      agent.y = agent.y + agent.vy;\n\n      // bouncing on walls\n      if (\n        (agent.vy < 0 && agent.y < r) ||\n        (agent.vy > 0 && agent.y > height - r)\n      ) {\n        agent.vy = -agent.vy;\n      }\n\n      if (\n        (agent.vx < 0 && agent.x < r) ||\n        (agent.vx > 0 && agent.x > width - r)\n      ) {\n        agent.vx = -agent.vx;\n      }\n    }\n    // counting agents\n    switch (agent.status) {\n      case 'sick':\n        nbSick++;\n        break;\n      case 'healthy':\n        nbHealthy++;\n        break;\n      case 'recovered':\n        nbRecovered++;\n        break;\n      case 'dead':\n        nbDead++;\n        break;\n      default:\n    }\n  });\n  if (nbSick === 0) {\n    complete();\n  }\n\n  return {\n    agents: updatedData,\n    sick: nbSick,\n    recovered: nbRecovered,\n    dead: nbDead,\n    healthy: nbHealthy,\n  };\n}\n\nfunction chooseMamongN(n, m, random) {\n  const N = [...Array(n).keys()].reduce((prev, curr) => {\n    prev[curr] = true;\n    return prev;\n  }, {});\n  const results = new Set();\n\n  for (let i = 0; i < m; i++) {\n    const k = Math.floor(random() * Object.keys(N).length);\n    results.add(k);\n    delete N[k];\n  }\n\n  return results;\n}\n\nfunction findOverlaps(agents, i, r, point) {\n  const { x: x0, y: y0 } = point;\n  const domain = agents.slice(i);\n  return domain.filter(({ x, y }) => Math.hypot(x - x0, y - y0) < r);\n}\n\nexport function initData(\n  {\n    nbAgents = 200,\n    nbSick = 5,\n    maxSpeed = 30,\n    contaminationRisk = 1,\n    deathRisk = 0.005,\n    recoveryTicks = 20,\n    nbDistancing = 50,\n    r = 3,\n    height = 300,\n    width = 400,\n  },\n  random = Math.random\n) {\n  const sick = chooseMamongN(nbAgents, nbSick, random);\n  const distancing = chooseMamongN(nbAgents, nbDistancing, random);\n  const agents = [];\n\n  for (let i = 0; i < nbAgents; i++) {\n    let x, y;\n\n    do {\n      y = r / 2 + random() * (height - r);\n      x = r / 2 + random() * (width - r);\n    } while (findOverlaps(agents, 0, r, { x, y }).length);\n\n    const status = sick.has(i) ? 'sick' : 'healthy';\n\n    const recovery = sick.has(i) ? recoveryTicks : null;\n    const isDistancing = distancing.has(i);\n    const speed = isDistancing ? 0 : maxSpeed;\n    const vx = speed * (random() * 2 - 1);\n    const vy = speed * (random() * 2 - 1);\n    const isBouncing = false;\n\n    agents.push({\n      x,\n      y,\n      status,\n      isBouncing,\n      isDistancing,\n      vx,\n      vy,\n      recovery,\n      speed,\n    });\n  }\n  return {\n    agents,\n    sick: nbSick,\n    healthy: nbAgents - nbSick,\n    dead: 0,\n    recovered: 0,\n  };\n}\n\nexport class EpidemicFrame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  componentDidUpdate() {\n    const {\n      data,\n      params: { width, height, r },\n    } = this.props;\n    const canvas = this.myRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#fff';\n    ctx.lineWidth = '5px';\n    ctx.clearRect(0, 0, width, height);\n    data.agents.forEach(({ status, isBouncing, x, y }) => {\n      ctx.beginPath();\n      ctx.fillStyle = COLORS[status];\n      ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n      ctx.closePath();\n      ctx.fill();\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas\n          width={this.props.params.width}\n          height={this.props.params.height}\n          ref={this.myRef}\n        />\n      </div>\n    );\n  }\n}\n\nconst ConnectedFrame = withFrame(EpidemicFrame);\n\nconst series = [\n  {\n    color: COLORS['healthy'],\n    label: 'Healthy',\n    accessor: d => d.healthy,\n  },\n  {\n    color: COLORS['sick'],\n    label: 'Sick',\n    accessor: d => d.sick,\n  },\n  {\n    color: COLORS['recovered'],\n    label: 'Recovered',\n    accessor: d => d.recovered,\n  },\n  {\n    color: COLORS['dead'],\n    label: 'Dead',\n    accessor: d => d.dead,\n  },\n];\n\nconst Epidemic = props => (\n  <Model\n    initData={initData}\n    initialParams={{\n      nbAgents: 500,\n      nbSick: 20,\n      contaminationRisk: 1,\n      deathRisk: 0.001,\n      maxSpeed: 2,\n      recoveryTicks: 200,\n      nbDistancing: 0,\n      r: 2,\n      height: 332,\n      width: 332,\n    }}\n    updateData={updateEpidemic}\n    maxTime={500}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <ConnectedFrame />\n      {props.hideSeries ? null : <TimeSeries series={series} stacked={true} />}\n      {props.hideSeries ? null : <Counter series={series} />}\n    </Flex>\n  </Model>\n);\n\nexport default Epidemic;\n","export const HALF_SQRT3 = Math.sqrt(3) / 2;\nexport const P = Math.PI;\nexport const P2 = Math.PI * 2;\nexport const getColRow = (id, cols) => {\n  const col = id % cols;\n  const row = (id - col) / cols;\n  return { col, row };\n};\n\nexport const norm = a => (a + P2) % P2;\n\nexport const average = (a0, a1) => {\n  let min = Math.min(norm(a0), norm(a1));\n  let max = Math.max(norm(a0), norm(a1));\n\n  if (max - min > P) {\n    return norm(min + (max - min) / 2 + P);\n  }\n  return norm(min + (max - min) / 2);\n};\n\nexport const getRadius = (layer, cellSize) => {\n  return (layer + 0.5) * cellSize;\n};\n\nexport const acuteArc = ({ ctx, x, y, r, a0, a1 }) => {\n  // draws the smallest arc between angles a0 and a1;\n  const angle0 = norm(a0);\n  const angle1 = norm(a1);\n\n  const startAngle = Math.min(angle0, angle1);\n  const endAngle = Math.max(angle0, angle1);\n\n  const isClockwise = norm(endAngle - startAngle) > P;\n\n  ctx.arc(x, y, r, startAngle, endAngle, isClockwise);\n};\n\nexport const isBetween = (angle, start, end) => {\n  if (norm(start) === norm(end)) {\n    return true;\n  }\n  let a = norm(angle - start);\n  let e = norm(end - start);\n  return a < e;\n};\n\nexport const drawLink = getCoords => ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  link,\n  pathColor,\n  pathSize,\n  wallSize,\n}) => {\n  const startCell = cells[link[0]];\n  const endCell = cells[link[1]];\n\n  const start = getCoords({ cell: startCell, cellSize, wallSize });\n  const end = getCoords({ cell: endCell, cellSize, wallSize });\n\n  ctx.strokeStyle = pathColor;\n  ctx.fillStyle = pathColor;\n\n  circle({ x: start[0], y: start[1], r: pathSize / 2 });\n  ctx.fill();\n  circle({ x: end[0], y: end[1], r: pathSize / 2 });\n  ctx.fill();\n\n  ctx.lineWidth = pathSize;\n\n  ctx.beginPath();\n  ctx.moveTo(...start);\n  ctx.lineTo(...end);\n  ctx.closePath();\n  ctx.stroke();\n};\n","import { getColRow, drawLink } from './helpers';\n\nexport const getNeighborsSquare = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if (row) {\n    neighbors.push(id - cols);\n  }\n  if (row < rows - 1) {\n    neighbors.push(id + cols);\n  }\n  return neighbors;\n};\n\nexport const initDataSquare = (\n  { height, width, grid }\n) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.8 * cellSize;\n  const wallSize = 0.2 * cellSize;\n\n  const rows = Math.floor(height / cellSize);\n  const cols = Math.floor(width / cellSize);\n  const nbCells = rows * cols;\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsSquare(id, cols, rows),\n    };\n    return prev;\n  }, {});\n  return {\n    cellSize,\n    wallSize,\n    pathSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsSquare = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + (col + 0.5) * cellSize,\n    wallSize / 2 + (row + 0.5) * cellSize,\n  ];\n};\n\nexport const drawItemSquare = ({\n  cell,\n  ctx,\n  cellSize,\n  wallColor,\n  wallSize,\n}) => {\n  const center = getCoordsSquare({ cell, cellSize, wallSize });\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n  ctx.strokeRect(\n    center[0] - 0.5 * cellSize,\n    center[1] - 0.5 * cellSize,\n    cellSize,\n    cellSize\n  );\n};\n\nexport const drawLinkSquare = drawLink(getCoordsSquare);\n","import { HALF_SQRT3, drawLink, getColRow } from './helpers';\n\nexport const getNeighborsHex = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if (row) {\n    neighbors.push(id - cols);\n    if (row % 2) {\n      if (col < cols - 1) {\n        neighbors.push(id - cols + 1);\n      }\n    } else {\n      if (col > 0) {\n        neighbors.push(id - cols - 1);\n      }\n    }\n  }\n  if (row < rows - 1) {\n    neighbors.push(id + cols);\n    if (row % 2) {\n      if (col < cols - 1) {\n        neighbors.push(id + cols + 1);\n      }\n    } else {\n      if (col > 0) {\n        neighbors.push(id + cols - 1);\n      }\n    }\n  }\n  return neighbors;\n};\n\nexport const initDataHex = ({ height, width }) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.8 * cellSize;\n  const wallSize = 0.1 * cellSize;\n  const rows = Math.floor((4 * height) / (6 * cellSize) - 0.5);\n  const cols = Math.floor(width / (2 * cellSize * HALF_SQRT3) - 0.5);\n  const nbCells = rows * cols;\n\n  // same as for squares:\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsHex(id, cols, rows),\n    };\n    return prev;\n  }, {});\n\n  return {\n    cellSize,\n    pathSize,\n    wallSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsHex = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + ((row % 2 ? 1 : 0.5) + col) * HALF_SQRT3 * cellSize * 2,\n    wallSize / 2 + (1 + 1.5 * row) * cellSize,\n  ];\n};\n\nexport const drawItemHex = ({ cell, ctx, cellSize, wallColor, wallSize }) => {\n  const center = getCoordsHex({ cell, cellSize, wallSize });\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n\n  ctx.beginPath();\n  ctx.moveTo(center[0], center[1] - cellSize);\n  ctx.lineTo(center[0] - HALF_SQRT3 * cellSize, center[1] - 0.5 * cellSize);\n  ctx.lineTo(center[0] - HALF_SQRT3 * cellSize, center[1] + 0.5 * cellSize);\n  ctx.lineTo(center[0], center[1] + cellSize);\n  ctx.lineTo(center[0] + HALF_SQRT3 * cellSize, center[1] + 0.5 * cellSize);\n  ctx.lineTo(center[0] + HALF_SQRT3 * cellSize, center[1] - 0.5 * cellSize);\n  ctx.closePath();\n  ctx.stroke();\n  return;\n};\n\nexport const drawLinkHex = drawLink(getCoordsHex);\n","import { HALF_SQRT3, drawLink, getColRow } from './helpers';\n\nexport const getNeighborsTriangle = (id, cols, rows) => {\n  const { col, row } = getColRow(id, cols);\n  const neighbors = [];\n  if (col) {\n    neighbors.push(id - 1);\n  }\n  if (col < cols - 1) {\n    neighbors.push(id + 1);\n  }\n  if ((col + row) % 2) {\n    // triangle pointing down\n    if (row) {\n      neighbors.push(id - cols);\n    }\n  } else {\n    if (row < rows - 1) {\n      neighbors.push(id + cols);\n    }\n  }\n  return neighbors;\n};\n\nexport const initDataTriangle = ({ height, width }) => {\n  const cellSize = Math.max(10, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.5 * cellSize;\n  const wallSize = 0.2 * cellSize;\n  const rows = Math.floor(height / (cellSize * HALF_SQRT3));\n  const cols = Math.floor((2 * width) / cellSize) - 1;\n  const nbCells = rows * cols;\n\n  // same as for squares:\n  // we're building an object where:\n  // the key is an id that goes from 0 to nbCells,\n  // the content is a cell object that contains:\n  // id, id of neighbors, plus column and row # for that cell\n\n  const cells = [...Array(nbCells).keys()].reduce((prev, id) => {\n    prev[id] = {\n      id,\n      ...getColRow(id, cols),\n      neighbors: getNeighborsTriangle(id, cols, rows),\n    };\n    return prev;\n  }, {});\n\n  return {\n    cellSize,\n    pathSize,\n    wallSize,\n    rows,\n    cols,\n    cells,\n    links: [],\n    visited: new Set([0]),\n    currentCell: 0,\n    stack: [0],\n  };\n};\n\nexport const getCoordsTriangle = ({ cell, cellSize, wallSize }) => {\n  const { col, row } = cell;\n  return [\n    wallSize / 2 + ((col + 1) * cellSize) / 2,\n    wallSize / 2 +\n      (row + ((row + col) % 2 ? 1 / 3 : 2 / 3)) * HALF_SQRT3 * cellSize,\n  ];\n};\n\nexport const drawItemTriangle = ({\n  cell,\n  ctx,\n  cellSize,\n  wallColor,\n  wallSize,\n}) => {\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = wallSize;\n  const { col, row } = cell;\n  const isPointingDown = (col + row) % 2;\n\n  ctx.beginPath();\n  if (isPointingDown) {\n    ctx.moveTo(\n      wallSize / 2 + (col * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 2) * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 1) * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n  } else {\n    ctx.moveTo(\n      wallSize / 2 + (col * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 2) * cellSize) / 2,\n      wallSize / 2 + (row + 1) * cellSize * HALF_SQRT3\n    );\n    ctx.lineTo(\n      wallSize / 2 + ((col + 1) * cellSize) / 2,\n      wallSize / 2 + row * cellSize * HALF_SQRT3\n    );\n  }\n  ctx.closePath();\n  ctx.stroke();\n  return;\n};\n\nexport const drawLinkTriangle = drawLink(getCoordsTriangle);\n","export const reactsimGrid = `0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000\n0011110011111001110001110011111000000111001110100000100\n0010001010000010001010001000100000001000100100110001100\n0010001010000010001010001000100000001000100100101010100\n0010001010000010001010000000100000001000000100100100100\n0011110011110010001010000000100011100111000100100000100\n0010001010000011111010000000100000000000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001010000010001010001000100000001000100100100000100\n0010001011111010001001110000100000000111001110100000100\n0000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000`\n  .split('\\n')\n  .map(row => row.split('').map(Number));\n\nexport const stringToHex = a => arrayToHex(a.split(',').map(Number));\nexport const arrayToHex = a =>\n  `#${a.map(c => c.toString(16).padStart(2, '0')).join('')}`;\n\nexport const CETR2 = `0,52,245\n0,55,243\n0,58,240\n0,60,237\n0,63,234\n0,65,231\n0,68,229\n0,70,226\n0,72,223\n0,74,220\n0,77,217\n0,79,214\n0,81,212\n0,83,209\n0,85,206\n0,87,203\n0,89,201\n0,90,198\n0,92,195\n0,94,192\n0,96,189\n0,98,187\n0,99,184\n0,101,181\n0,103,178\n0,104,176\n0,106,173\n0,108,170\n0,109,167\n0,111,165\n0,112,162\n0,113,160\n0,115,157\n0,116,154\n0,117,152\n1,118,149\n8,119,147\n14,120,145\n20,122,142\n24,123,140\n28,124,137\n32,125,135\n35,126,133\n38,127,130\n41,128,128\n43,129,126\n45,130,123\n47,131,121\n49,132,118\n51,133,116\n52,134,114\n53,135,111\n55,136,109\n56,137,106\n57,138,104\n58,139,101\n59,140,99\n59,141,96\n60,142,94\n61,143,91\n61,144,88\n62,145,86\n62,146,83\n62,147,80\n63,148,78\n63,149,75\n63,150,72\n63,152,69\n63,153,66\n63,154,63\n63,155,60\n63,156,57\n63,157,53\n63,158,50\n63,159,47\n63,160,43\n63,161,40\n64,162,36\n64,163,33\n65,164,30\n66,165,27\n68,166,24\n70,166,22\n72,167,20\n74,168,18\n77,169,16\n79,169,16\n82,170,15\n85,171,15\n87,171,15\n90,172,15\n93,172,15\n96,173,16\n98,174,16\n101,174,17\n104,175,17\n106,175,18\n109,176,18\n111,177,18\n114,177,19\n116,178,19\n119,178,20\n121,179,20\n124,180,21\n126,180,21\n129,181,22\n131,181,22\n133,182,23\n136,182,23\n138,183,24\n140,183,24\n143,184,25\n145,185,25\n147,185,26\n150,186,26\n152,186,26\n154,187,27\n156,187,27\n159,188,28\n161,188,28\n163,189,29\n165,190,29\n168,190,30\n170,191,30\n172,191,31\n174,192,31\n176,192,31\n179,193,32\n181,193,32\n183,194,33\n185,194,33\n187,195,34\n190,195,34\n192,196,35\n194,196,35\n196,197,35\n198,197,36\n200,198,36\n203,198,37\n205,199,37\n207,199,38\n209,200,38\n211,200,39\n213,201,39\n215,201,39\n218,202,40\n220,202,40\n222,203,41\n224,203,41\n226,203,42\n228,204,42\n230,204,43\n232,205,43\n234,205,43\n236,205,44\n238,205,44\n240,205,44\n242,205,44\n244,205,44\n245,205,44\n246,204,44\n248,204,44\n249,203,44\n249,202,44\n250,201,43\n251,200,43\n251,199,42\n252,197,42\n252,196,41\n252,195,41\n252,194,40\n253,192,40\n253,191,39\n253,190,39\n253,188,38\n253,187,38\n253,186,37\n254,184,37\n254,183,36\n254,181,35\n254,180,35\n254,179,34\n254,177,34\n254,176,33\n254,175,33\n255,173,32\n255,172,31\n255,170,31\n255,169,30\n255,168,30\n255,166,29\n255,165,29\n255,163,28\n255,162,28\n255,161,27\n255,159,26\n255,158,26\n255,156,25\n255,155,25\n255,153,24\n255,152,24\n255,150,23\n255,149,22\n255,147,22\n255,146,21\n255,145,21\n255,143,20\n255,142,20\n255,140,19\n255,139,18\n255,137,18\n255,136,17\n255,134,17\n255,132,16\n255,131,16\n255,129,15\n255,128,14\n255,126,14\n255,125,13\n255,123,13\n255,121,12\n255,120,11\n255,118,11\n255,116,10\n255,115,10\n255,113,9\n255,111,8\n255,110,8\n255,108,7\n255,106,7\n255,105,6\n255,103,6\n255,101,5\n255,99,5\n255,97,4\n255,95,4\n255,94,3\n255,92,3\n255,90,3\n255,88,2\n254,86,2\n254,84,2\n254,82,1\n254,79,1\n254,77,1\n254,75,0\n254,73,0\n254,70,0\n254,68,0\n253,65,0\n253,63,0\n253,60,0\n253,57,0\n253,54,0\n253,51,0\n253,48,0`\n  .split('\\n')\n  .map(stringToHex);\n","import { P, P2, acuteArc, isBetween, average, getRadius } from './helpers';\nimport { CETR2 } from '../../constants';\n\nconst segmentRatio = 3;\n\nexport const initDataCircle = ({ height, width }, random = Math.random) => {\n  const cellSize = Math.max(5, Math.min(10, Math.min(height, width) / 20));\n  const pathSize = 0.6 * cellSize;\n  const wallSize = 0.4 * cellSize;\n\n  const layers = Math.floor(Math.min(height, width) / 2 / cellSize);\n  const cells = {\n    '0-0': {\n      id: '0-0',\n      layer: 0,\n      cell: 0,\n      startAngle: 0,\n      midangle: P,\n      endAngle: P2,\n      neighbors: [],\n    },\n  };\n  let nbSegmentsPreviousLayer = 1;\n  for (let l = 1; l < layers; l++) {\n    const circumference = P2 * getRadius(l, cellSize);\n    const nbSegments = Math.floor(circumference / (segmentRatio * cellSize));\n    let runningAngle = (P2 * random()) / nbSegments;\n    let previousLayerSegmentIdx = 0;\n    let previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n\n    // in order to determine the neighbors of cells of this layer with\n    // the cells in the previous layers, we start by looking for the\n    // first cell in the previous layer which angles are across our\n    // starting angle.\n\n    // this cell will be a neighbor with the first cell of our new layer.\n    let skippedSegments = 0;\n    while (\n      !isBetween(\n        runningAngle,\n        cells[previousLayerSegmentId].startAngle,\n        cells[previousLayerSegmentId].endAngle\n      )\n    ) {\n      previousLayerSegmentIdx =\n        (previousLayerSegmentIdx + 1) % nbSegmentsPreviousLayer;\n      previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n    }\n\n    for (let s = 0; s < nbSegments; s++) {\n      const endAngle = runningAngle + P2 / nbSegments;\n      const midAngle = runningAngle + P2 / (nbSegments * segmentRatio);\n      const id = `${l}-${s}`;\n      // siblings are cells on the same layer of the current segment.\n      // they are always neighbors to the current cell.\n\n      const siblings =\n        nbSegments === 2\n          ? [`${l}-${(s + 1) % nbSegments}`]\n          : [\n              `${l}-${(nbSegments + s - 1) % nbSegments}`,\n              `${l}-${(s + 1) % nbSegments}`,\n            ];\n      const cell = {\n        id,\n        layer: l,\n        cell: s,\n        startAngle: runningAngle,\n        midAngle,\n        endAngle,\n        startAngleDeg: (runningAngle * 180) / P,\n        endAngleDeg: (endAngle * 180) / P,\n        neighbors: [...siblings],\n      };\n\n      // there are 3 possible scenarios.\n      // 1 - we add a link between previousLayerSegment and current segment.\n      // we would do that if there's enough space to draw a path.\n      // PLS.endAngle would have to be between current midangle and endangle.\n\n      // 2 - we increment previousLayerSegment.\n      // we would do that if PLS.endAngle is less than current endAngle.\n      // ie - if PLS.endangle is between current running angle and current endangle.\n\n      // 3 - we add a link between this new PLS and the current cell.\n      // new PLS.midangle has to be less than endangle.\n      // so between current running and current endangle.\n\n      if (\n        isBetween(cells[previousLayerSegmentId].endAngle, midAngle, endAngle)\n      ) {\n        // scenario 1 - we add a link between current cell and PL\n        cell.neighbors.push(previousLayerSegmentId);\n        cells[previousLayerSegmentId].neighbors.push(id);\n      }\n\n      if (\n        isBetween(\n          cells[previousLayerSegmentId].endAngle,\n          runningAngle,\n          endAngle\n        )\n      ) {\n        previousLayerSegmentIdx =\n          (previousLayerSegmentIdx + 1) % nbSegmentsPreviousLayer;\n        previousLayerSegmentId = `${l - 1}-${previousLayerSegmentIdx}`;\n        if (\n          isBetween(\n            cells[previousLayerSegmentId].endAngle,\n            runningAngle,\n            endAngle\n          )\n        ) {\n          cell.neighbors.push(previousLayerSegmentId);\n          cells[previousLayerSegmentId].neighbors.push(id);\n        }\n      }\n\n      cells[id] = cell;\n      runningAngle = endAngle;\n    }\n    nbSegmentsPreviousLayer = nbSegments;\n  }\n  return {\n    cells,\n    cellSize,\n    pathSize,\n    wallSize,\n    links: [],\n    visited: new Set(['0-0']),\n    currentCell: '0-0',\n    stack: ['0-0'],\n  };\n};\n\nexport const drawItemCircle = ({\n  cell,\n  circle,\n  ctx,\n  cellSize,\n  pathColor,\n  pathSize,\n  wallColor,\n  wallSize,\n  height,\n  width,\n}) => {\n  if (cell.layer === undefined) {\n    return;\n  }\n  const [x, y] = [width / 2, height / 2];\n  if (cell.id === '0-0') {\n    // inner circle\n    ctx.fillStyle = pathColor;\n    ctx.strokeStyle = wallColor;\n    ctx.lineWidth = wallSize;\n    circle({ x, y, r: cellSize });\n    ctx.fill();\n    ctx.stroke();\n    return;\n  }\n  const { layer } = cell;\n  const circumference = P * getRadius(layer, cellSize);\n  const wallAngleDelta = (P * wallSize) / 2 / circumference;\n  ctx.strokeStyle = wallColor;\n  ctx.lineWidth = cellSize;\n  ctx.beginPath();\n  acuteArc({\n    ctx,\n    x,\n    y,\n    r: getRadius(layer, cellSize),\n    a0: cell.startAngle,\n    a1: cell.endAngle,\n  });\n  ctx.stroke();\n\n  ctx.strokeStyle = pathColor;\n  ctx.lineWidth = pathSize;\n  ctx.beginPath();\n  acuteArc({\n    ctx,\n    x,\n    y,\n    r: getRadius(layer, cellSize),\n    a0: cell.startAngle + wallAngleDelta,\n    a1: cell.endAngle - wallAngleDelta,\n  });\n  ctx.stroke();\n};\nexport const drawStraightLinkCircle = ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  height,\n  width,\n  link,\n  pathColor,\n  pathSize,\n  wallColor,\n  tick,\n}) => {\n  const start = cells[link[0]];\n  const end = cells[link[1]];\n  const [x, y] = [width / 2, height / 2];\n  ctx.strokeStyle = wallColor;\n  ctx.fillStyle = wallColor;\n\n  ctx.strokeStyle = CETR2[tick % 256];\n  ctx.fillStyle = CETR2[tick % 256];\n  ctx.lineWidth = 4;\n  ctx.globalAlpha = 0.5;\n\n  const startMidAngle = (start.startAngle + start.endAngle) / 2;\n  const endMidAngle = (end.startAngle + end.endAngle) / 2;\n\n  const x0 = x + Math.cos(startMidAngle) * getRadius(start.layer, cellSize);\n  const y0 = y + Math.sin(startMidAngle) * getRadius(start.layer, cellSize);\n\n  const x1 = x + Math.cos(endMidAngle) * getRadius(end.layer, cellSize);\n  const y1 = y + Math.sin(endMidAngle) * getRadius(end.layer, cellSize);\n\n  circle({ x: x0, y: y0, r: 2 });\n  ctx.fill();\n  circle({ x: x1, y: y1, r: 2 });\n  ctx.fill();\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.stroke();\n  ctx.globalAlpha = 1;\n};\n\nexport const drawLinkCircle = ({\n  cells,\n  cellSize,\n  ctx,\n  circle,\n  height,\n  width,\n  link,\n  pathColor,\n  pathSize,\n}) => {\n  const start = cells[link[0]];\n  if (start.layer === 0) {\n    // link from center\n    return drawLinkCircle({\n      cells,\n      cellSize,\n      ctx,\n      circle,\n      height,\n      width,\n      link: [link[1], link[0]],\n      pathColor,\n      pathSize,\n    });\n  }\n  ctx.save();\n  const end = cells[link[1]];\n  const [x, y] = [width / 2, height / 2];\n  ctx.strokeStyle = pathColor;\n  ctx.fillStyle = pathColor;\n  ctx.lineCap = 'round';\n  ctx.lineWidth = pathSize;\n\n  const startMidAngle = (start.startAngle + start.endAngle) / 2;\n\n  if (end.layer === 0) {\n    // link to center\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    const x0 = x + Math.cos(startMidAngle) * getRadius(start.layer, cellSize);\n    const y0 = y + Math.sin(startMidAngle) * getRadius(start.layer, cellSize);\n    ctx.lineTo(x0, y0);\n    ctx.stroke();\n    ctx.beginPath();\n    circle({ x, y, r: pathSize / 2 });\n    ctx.fill();\n    circle({ x: x0, y: y0, r: pathSize / 2 });\n    ctx.fill();\n    ctx.restore();\n    return;\n  }\n\n  const endMidAngle = (end.startAngle + end.endAngle) / 2;\n\n  if (start.layer === end.layer) {\n    // link on same layer\n    ctx.beginPath();\n    const r = getRadius(start.layer, cellSize);\n    acuteArc({\n      ctx,\n      x,\n      y,\n      r,\n      a0: startMidAngle,\n      a1: endMidAngle,\n    });\n    ctx.stroke();\n    const x0 = x + Math.cos(startMidAngle) * r;\n    const y0 = y + Math.sin(startMidAngle) * r;\n\n    const x1 = x + Math.cos(endMidAngle) * r;\n    const y1 = y + Math.sin(endMidAngle) * r;\n    ctx.beginPath();\n\n    circle({ x: x0, y: y0, r: pathSize / 2 });\n    ctx.fill();\n    circle({ x: x1, y: y1, r: pathSize / 2 });\n    ctx.fill();\n    ctx.restore();\n    return;\n  }\n\n  // general case - link on different layers\n  const firstEnd =\n    startMidAngle < endMidAngle\n      ? { ...start, midAngle: startMidAngle }\n      : { ...end, midAngle: endMidAngle };\n  const secondEnd =\n    startMidAngle < endMidAngle\n      ? { ...end, midAngle: endMidAngle }\n      : { ...start, midAngle: startMidAngle };\n  const r0 = getRadius(firstEnd.layer, cellSize);\n  const r1 = getRadius(secondEnd.layer, cellSize);\n\n  const midAngle = isBetween(\n    secondEnd.midAngle,\n    firstEnd.midAngle,\n    firstEnd.endAngle\n  )\n    ? average(firstEnd.midAngle, secondEnd.midAngle)\n    : average(secondEnd.startAngle, firstEnd.endAngle);\n\n  ctx.beginPath();\n  acuteArc({ ctx, x, y, r: r0, a0: firstEnd.midAngle, a1: midAngle });\n  ctx.stroke();\n  ctx.beginPath();\n\n  ctx.moveTo(x + Math.cos(midAngle) * r0, y + Math.sin(midAngle) * r0);\n  ctx.lineTo(x + Math.cos(midAngle) * r1, y + Math.sin(midAngle) * r1);\n  ctx.stroke();\n  ctx.beginPath();\n\n  acuteArc({ ctx, x, y, r: r1, a0: midAngle, a1: secondEnd.midAngle });\n  ctx.stroke();\n\n  const x0 = x + Math.cos(firstEnd.midAngle) * r0;\n  const y0 = y + Math.sin(firstEnd.midAngle) * r0;\n\n  const x1 = x + Math.cos(secondEnd.midAngle) * r1;\n  const y1 = y + Math.sin(secondEnd.midAngle) * r1;\n\n  circle({ x: x0, y: y0, r: pathSize / 2 });\n  ctx.fill();\n  circle({ x: x1, y: y1, r: pathSize / 2 });\n  ctx.fill();\n  ctx.restore();\n  return;\n};\n","import React from 'react';\nimport { CanvasFrame, Model } from 'react-sim';\n\n// import Model from './framed-model';\n\nimport { drawItemSquare, drawLinkSquare, initDataSquare } from './mazes/square';\nimport { drawItemHex, drawLinkHex, initDataHex } from './mazes/hex';\nimport {\n  drawItemTriangle,\n  drawLinkTriangle,\n  initDataTriangle,\n} from './mazes/triangle';\nimport {\n  drawItemCircle,\n  drawLinkCircle,\n  // drawStraightLinkCircle as drawLinkCircle,\n  initDataCircle,\n} from './mazes/circle';\n\nexport const grids = ['square', 'hexagonal', 'triangular', 'circle'];\n\nexport const params = {\n  drawItem: true,\n  useColor: false,\n  width: 332,\n  height: 332,\n  grid: 'square',\n  cellSize: 10,\n  wallColor: '#000',\n  pathColor: '#fff',\n  maxTime: Infinity,\n  ticksPerAnimation: 20,\n};\n\nexport const initData = (\n  { cellSize, height, width, grid },\n  random = Math.random\n) => {\n  // the way the dataset is initialized depends on the\n  // grid mode.\n\n  if (grid === 'circle') {\n    return initDataCircle({ cellSize, height, width }, random);\n  }\n  if (grid === 'square') {\n    return initDataSquare({ cellSize, height, width });\n  }\n  if (grid === 'hexagonal') {\n    return initDataHex({ cellSize, height, width });\n  }\n  if (grid === 'triangular') {\n    return initDataTriangle({ cellSize, height, width });\n  }\n};\nexport const updateData = (\n  { data: { cells, links, stack, visited, ...otherData }, params, complete },\n  random = Math.random\n) => {\n  // the algorithm to parse the graph is the same\n  // regardless of disposition of the grid\n  let options = [];\n  let currentCell;\n\n  if (visited.size === Object.values(cells).length || stack.length === 0) {\n    complete();\n  } else {\n    while (options.length === 0 && stack.length) {\n      currentCell = stack.pop();\n      options = cells[currentCell].neighbors.filter(d => !visited.has(d));\n    }\n    const option = Math.floor(random() * options.length);\n    const nextMove = options[option];\n    visited.add(nextMove);\n    links.push([currentCell, nextMove]);\n    stack.push(currentCell);\n    stack.push(nextMove);\n  }\n  return {\n    ...otherData,\n    cells,\n    links,\n    stack,\n    visited,\n  };\n};\n\nexport const draw = ({\n  params: { drawItem, height, width, grid, ticksPerAnimation, ...otherParams },\n  data: { cells, links, ...otherData },\n  tick,\n  circle,\n  ctx,\n}) => {\n  // likewise, the overall idea to draw the maze is the same\n  // regardless of its layout\n\n  const wallColor = otherParams.wallColor || otherData.wallColor;\n\n  if (tick === 0) {\n    if (drawItem) {\n      ctx.clearRect(0, 0, height, width);\n      Object.values(cells).forEach(cell =>\n        drawCell({\n          cell,\n          circle,\n          ctx,\n          grid,\n          height,\n          width,\n          ...otherParams,\n          ...otherData,\n        })\n      );\n    } else {\n      ctx.fillStyle = wallColor;\n      ctx.fillRect(0, 0, width, height);\n    }\n  } else {\n    for (let i = tick - ticksPerAnimation; i < tick; i++) {\n      drawLink({\n        cells,\n        circle,\n        ctx,\n        grid,\n        height,\n        width,\n        tick: i,\n        link: links[i],\n        ...otherParams,\n        ...otherData,\n      });\n    }\n  }\n};\n\nexport const drawCell = ({ cell, ctx, grid, ...other }) => {\n  // but how each cell is drawn depends on the layout\n  if (grid === 'circle') {\n    drawItemCircle({ cell, ctx, ...other });\n  }\n  if (grid === 'hexagonal') {\n    drawItemHex({ cell, ctx, ...other });\n  }\n  if (grid === 'square') {\n    drawItemSquare({ cell, ctx, ...other });\n  }\n  if (grid === 'triangular') {\n    drawItemTriangle({ cell, ctx, ...other });\n  }\n  return null;\n};\n\nexport const drawLink = ({ cells, ctx, circle, grid, link, ...other }) => {\n  // and how each link between 2 cells is drawn depends on layout, too.\n  if (link === undefined) {\n    return;\n  }\n  if (grid === 'square') {\n    drawLinkSquare({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'hexagonal') {\n    drawLinkHex({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'triangular') {\n    drawLinkTriangle({ cells, ctx, circle, link, ...other });\n  }\n  if (grid === 'circle') {\n    drawLinkCircle({ cells, ctx, circle, link, ...other });\n  }\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst Maze = props => {\n  return (\n    <Model\n      initialParams={{...params, ...props.extraParams}}\n      initData={initData}\n      updateData={updateData}\n      controls={{\n        type: 'radio',\n        vertical: true,\n        options: grids,\n        param: 'grid',\n        resetOnChange: true,\n      }}\n      {...props}\n    >\n      <Frame />\n    </Model>\n  );\n};\n\nexport default Maze;\n","import React from 'react';\nimport { Flex, Box } from 'rebass';\nimport { CanvasFrame } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst EMPTY = 0;\nconst ROCK = 1;\nconst ROCK_WITH_ROCK_ON_RIGHT = 2;\nconst ROCK_WITH_ROCK_BELOW = 3;\nconst ROCK_WITH_ROCK_RIGHT_AND_BELOW = 4;\nconst ROCK_WITH_ROCKS_ALL_AROUND = 5;\nconst WATER_FROM_TOP = 6;\nconst WATER_FROM_RIGHT = 7;\nconst WATER_FROM_LEFT = 8;\n\nconst status = {\n  pending: 'PENDING',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n};\n\nexport function updateData({ data, params, complete }) {\n  const { queue, grid } = data;\n  const { height } = params;\n  let updatedStatus = data.status;\n  if (queue.length === 0) {\n    updatedStatus = status.failure;\n  }\n  const nextQueue = [];\n  while (queue.length > 0 && updatedStatus === status.pending) {\n    const cell = queue.shift();\n    const { x, y } = cell;\n    if (y === height - 1) {\n      updatedStatus = status.success;\n    } else if (grid[y + 1][x] === EMPTY) {\n      grid[y + 1][x] = WATER_FROM_TOP;\n      nextQueue.push({ x, y: y + 1 });\n    }\n    // note - grid[y][x - 1] and grid[y][x + 1] can be undefined,\n    // but that doesn't make any difference.\n    if (grid[y][x - 1] === EMPTY) {\n      grid[y][x - 1] = WATER_FROM_RIGHT;\n      nextQueue.push({ x: x - 1, y });\n    }\n    if (grid[y][x + 1] === EMPTY) {\n      grid[y][x + 1] = WATER_FROM_LEFT;\n      nextQueue.push({ x: x + 1, y });\n    }\n  }\n  if (updatedStatus !== status.pending && params.shouldComplete) {\n    complete(updatedStatus);\n  }\n  return {\n    grid,\n    queue: nextQueue,\n    status: updatedStatus,\n  };\n}\n\nexport function updateDataGrid({ data, params, complete }) {\n  let nbPending = 0;\n  data.grids.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      if (cell.status === status.pending) {\n        const updatedCell = updateData({\n          data: cell,\n          params: { height: params.height, shouldComplete: false },\n        });\n        data.grids[y][x] = updatedCell;\n        if (updatedCell.status === status.pending) {\n          nbPending++;\n        }\n        if (updatedCell.status === status.success) {\n          data.cols[x].result++;\n        }\n      }\n    })\n  );\n  if (nbPending === 0) {\n    complete();\n  }\n  return data;\n}\n\nexport function initData({ porosity, height, width }, random = Math.random) {\n  const grid = [];\n  const queue = [];\n  let x, y;\n  for (y = 0; y < height; y++) {\n    const row = [];\n    for (x = 0; x < width; x++) {\n      row.push(random() > Number(porosity) ? ROCK : EMPTY);\n    }\n    grid.push(row);\n  }\n\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      if (grid[y][x]) {\n        if (grid[y + 1] && grid[y + 1][x]) {\n          // rock below\n          grid[y][x] = grid[y][x] + 2;\n        }\n        if (grid[y][x + 1]) {\n          // rock to the right\n          grid[y][x] = grid[y][x] + 1;\n        }\n        if (\n          grid[y][x] === ROCK_WITH_ROCK_RIGHT_AND_BELOW &&\n          grid[y + 1][x + 1]\n        ) {\n          grid[y][x] = ROCK_WITH_ROCKS_ALL_AROUND;\n        }\n      } else {\n        if (y === 0) {\n          grid[y][x] = WATER_FROM_TOP;\n          queue.push({ x, y });\n        }\n      }\n    }\n  }\n  return { grid, queue, status: status.pending };\n}\n\nexport function draw({\n  ctx,\n  params: { cellSize, margin, height, width },\n  data,\n  roundRectangle,\n}) {\n  ctx.fillStyle = 'beige';\n  ctx.fillRect(0, 0, width * cellSize, height * cellSize);\n\n  data.grid.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const x = colIndex * cellSize;\n      const y = rowIndex * cellSize;\n      if (cell >= ROCK && cell <= ROCK_WITH_ROCKS_ALL_AROUND) {\n        // rock\n        ctx.fillStyle = '#777';\n\n        roundRectangle({\n          ctx,\n          x: x + margin,\n          y: y + margin,\n          r: margin,\n          height: cellSize - 2 * margin,\n          width: cellSize - 2 * margin,\n        });\n        ctx.fill();\n        if (\n          cell === ROCK_WITH_ROCK_ON_RIGHT ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + margin,\n            4 * margin,\n            cellSize - 2 * margin\n          );\n        }\n        if (\n          cell === ROCK_WITH_ROCK_BELOW ||\n          cell === ROCK_WITH_ROCK_RIGHT_AND_BELOW ||\n          cell === ROCK_WITH_ROCKS_ALL_AROUND\n        ) {\n          ctx.fillRect(\n            x + margin,\n            y + cellSize - 2 * margin,\n            cellSize - 2 * margin,\n            4 * margin\n          );\n        }\n        if (cell === ROCK_WITH_ROCKS_ALL_AROUND) {\n          ctx.fillRect(\n            x + cellSize - 2 * margin,\n            y + cellSize - 2 * margin,\n            4 * margin,\n            4 * margin\n          );\n        }\n      }\n      if (cell >= WATER_FROM_TOP) {\n        ctx.lineWidth = cellSize - 2 * margin;\n        ctx.strokeStyle = 'cyan';\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(x + cellSize / 2, y + cellSize / 2);\n        if (cell === WATER_FROM_TOP) {\n          ctx.lineTo(x + cellSize / 2, Math.max(y - cellSize / 2, 0));\n        }\n        if (cell === WATER_FROM_LEFT) {\n          ctx.lineTo(x - cellSize / 2, y + cellSize / 2);\n        }\n        if (cell === WATER_FROM_RIGHT) {\n          ctx.lineTo(x + (3 * cellSize) / 2, y + cellSize / 2);\n        }\n        ctx.stroke();\n      }\n    });\n  });\n}\n\nexport const PercolationFrame = ({ data, params }) => {\n  const { cellSize, height, width } = params;\n\n  return (\n    <div\n      style={{\n        boxSizing: 'content-box',\n        height: cellSize * height,\n        width: cellSize * width,\n        border: `3px solid ${\n          data.status === status.pending\n            ? 'transparent'\n            : data.status === status.success\n            ? '#33e'\n            : '#777'\n        }`,\n      }}\n    >\n      <CanvasFrame\n        data={data}\n        width={width * cellSize}\n        height={height * cellSize}\n        draw={draw}\n      />\n    </div>\n  );\n};\n\nexport const PercolationFrameGrid = ({ data, params }) => {\n  const ch = params.height * params.cellSize;\n  const cw = params.width * params.cellSize;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        margin: '0 auto',\n        flexDirection: 'column',\n        height: (ch + 10) * params.rows + 60,\n        width: (cw + 10) * params.cols + 10,\n      }}\n    >\n      <Flex\n        flexDirection=\"row\"\n        sx={{ justifyContent: 'space-around', width: '100%' }}\n      >\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n              fontWeight: 2,\n            }}\n          >\n            {c.p.toFixed(2)}\n          </Box>\n        ))}\n      </Flex>\n      <Flex\n        sx={{\n          flexDirection: 'column',\n          justifyContent: 'space-around',\n          height: (ch + 10) * params.rows,\n        }}\n      >\n        {data.grids.map((row, y) => (\n          <Flex\n            sx={{\n              flexDirection: 'row',\n              justifyContent: 'space-around',\n            }}\n            key={`row-${y}`}\n          >\n            {row.map((cell, x) => (\n              <Flex\n                sx={{\n                  height: params.height * params.cellSize,\n                  width: params.width * params.cellSize,\n                }}\n              >\n                <PercolationFrame\n                  key={`cell-${x}-${y}`}\n                  data={cell}\n                  params={params}\n                />\n              </Flex>\n            ))}\n          </Flex>\n        ))}\n      </Flex>\n\n      <Flex flexDirection=\"row\" sx={{ justifyContent: 'space-around' }}>\n        {data.cols.map(c => (\n          <Box\n            sx={{\n              width: [cw],\n              fontSize: 1,\n              textAlign: 'center',\n            }}\n          >\n            {`${c.result}/${c.total}`}\n          </Box>\n        ))}\n      </Flex>\n    </div>\n  );\n};\n\nexport const Percolation = props => {\n  return (\n    <>\n      <Model\n        auto={false}\n        controls={{\n          param: 'porosity',\n          label: 'Porosity',\n          minValue: 0,\n          maxValue: 1,\n          step: 0.01,\n        }}\n        updateData={updateData}\n        maxTime={Infinity}\n        initData={initData}\n        initialParams={{\n          width: 66,\n          height: 66,\n          cellSize: 5,\n          margin: 0,\n          porosity: 0.6,\n          shouldComplete: true,\n        }}\n        {...props}\n      >\n        <PercolationFrame />\n      </Model>\n    </>\n  );\n};\n\nexport function initDataGrid(\n  { width, height, cellSize, margin, rows, cols, minP, stepP },\n  random = Math.random\n) {\n  const ck = [...Array(cols).keys()];\n  return {\n    cols: ck.map(c => ({ p: minP + c * stepP, result: 0, total: rows })),\n    grids: [...Array(rows).keys()].map(r =>\n      ck.map(c =>\n        initData(\n          {\n            height,\n            width,\n            porosity: minP + c * stepP,\n          },\n          random\n        )\n      )\n    ),\n  };\n}\n\nexport const PercolationGrid = props => {\n  return (\n    <>\n      <Model\n        auto={false}\n        updateData={updateDataGrid}\n        maxTime={Infinity}\n        initData={initDataGrid}\n        initialParams={{\n          width: 20,\n          height: 20,\n          cellSize: 1.5,\n          margin: 0,\n          rows: 10,\n          cols: 8,\n          minP: 0.54,\n          stepP: 0.02,\n        }}\n        {...props}\n      >\n        <PercolationFrameGrid />\n      </Model>\n    </>\n  );\n};\n\nexport default Percolation;\n","import React from 'react';\nimport { CanvasFrame, Counter, TimeSeries } from 'react-sim';\nimport { Flex } from 'rebass';\n\nimport Model from './framed-model';\n\nexport const initData = (params, random = Math.random) => {\n  const { cols, rows, proportion, tolerance } = params;\n  const grid = Array(rows)\n    .fill(0)\n    .map(row =>\n      Array(cols)\n        .fill(0)\n        .map(col => ({ community: 100 * random() > proportion ? 1 : 0 }))\n    );\n  grid.forEach((row, y) =>\n    row.forEach((citizen, x) => {\n      citizen.isHappy = isHappy(grid, x, y, tolerance);\n    })\n  );\n  const happy = countHappiness(grid, tolerance);\n  const happiness = happy / (cols * rows);\n  return { grid, happy, happiness, totalMoves: 0 };\n};\n\nexport function countNeighbors(grid, x, y) {\n  const { community } = grid[y][x];\n  return [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ].reduce((neighborsOfSameCommunity, offset) => {\n    const neighborX = x + offset[0];\n    const neighborY = y + offset[1];\n    if (isInBounds(grid, neighborX, neighborY)) {\n      const neighbor = grid[neighborY][neighborX];\n      if (neighbor.community === community) {\n        neighborsOfSameCommunity = neighborsOfSameCommunity + 1;\n      }\n    }\n    return neighborsOfSameCommunity;\n  }, 0);\n}\n\nexport function isInBounds(grid, x, y) {\n  if (!grid) {\n    return false;\n  }\n  const height = grid.length;\n  if (y < 0 || y >= height) {\n    return false;\n  }\n  const width = grid[0].length;\n  if (x < 0 || x >= width) {\n    return false;\n  }\n  return true;\n}\n\nexport function getPotentialNeighbors(grid, x, y) {\n  const height = grid.length;\n  const width = grid[0].length;\n  const onXBorder = x === 0 || x === width - 1;\n  const onYBorder = y === 0 || y === height - 1;\n\n  return onXBorder ? (onYBorder ? 3 : 5) : onYBorder ? 5 : 8;\n}\n\nexport function isHappy(grid, x, y, tolerance) {\n  const potentialNeighbors = getPotentialNeighbors(grid, x, y);\n  const differentNeighbors = potentialNeighbors - countNeighbors(grid, x, y);\n  return differentNeighbors / potentialNeighbors < tolerance / 100;\n}\n\nexport function countHappiness(grid, tolerance) {\n  return grid.reduce(\n    (totalHappiness, row, y) =>\n      row.reduce((rowHappiness, cell, x) => {\n        return rowHappiness + isHappy(grid, x, y, tolerance);\n      }, totalHappiness),\n    0\n  );\n}\n\nexport const updateData = (\n  { data, params, complete },\n  random = Math.random\n) => {\n  const { cols, rows, threshold, tolerance } = params;\n  let movers = [];\n  let happy = 0;\n  let updatedTotalMoves = data.totalMoves;\n  let updatedGrid = JSON.parse(JSON.stringify(data.grid));\n  updatedGrid.forEach((row, y) =>\n    row.forEach((cell, x) => {\n      cell.prevX = x;\n      cell.prevY = y;\n      if (isHappy(updatedGrid, x, y, tolerance)) {\n        happy = happy + 1;\n        cell.isHappy = 1;\n      } else {\n        cell.isHappy = 0;\n        movers.push([x, y]);\n      }\n    })\n  );\n  if (happy > (cols * rows * threshold) / 100) {\n    complete();\n  }\n  // we only swap citizens if there are more than 2 willing to swap\n  while (movers.length > 1) {\n    // first to move is head of the queue\n    const firstUnhappyCitizen = movers.shift();\n    // second to move is randomly chosen in the queue\n    const randomUnhappyCitizenNumber = Math.floor(random() * movers.length);\n\n    const secondUnhappyCitizen = movers[randomUnhappyCitizenNumber];\n\n    // we swap them in grid\n\n    const temp = {\n      ...updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]],\n    };\n    updatedGrid[firstUnhappyCitizen[1]][firstUnhappyCitizen[0]] = {\n      ...updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]],\n    };\n    updatedGrid[secondUnhappyCitizen[1]][secondUnhappyCitizen[0]] = temp;\n\n    updatedTotalMoves = updatedTotalMoves + 2;\n\n    // we remove the second citizen from movers\n\n    movers = movers\n      .slice(0, randomUnhappyCitizenNumber)\n      .concat(movers.slice(randomUnhappyCitizenNumber + 1));\n  }\n  return {\n    grid: updatedGrid,\n    totalMoves: updatedTotalMoves,\n    happy,\n    happiness: happy / (cols * rows),\n  };\n};\nexport const draw = ({ ctx, data, params, circle }) => {\n  const { height, width, rows, cols, showmoves } = params;\n  const sx = height / rows;\n  const sy = width / cols;\n  const size = 0.8 * Math.min(sx, sy);\n  ctx.clearRect(0, 0, width, height);\n  ctx.strokeStyle = '#000';\n  ctx.lineWidth = 2;\n  ctx.globalAlpha = 1;\n  data.grid.forEach((row, r) =>\n    row.forEach((citizen, c) => {\n      if (citizen.community === 0) {\n        ctx.fillStyle = '#33e';\n        circle({ x: (c + 0.5) * sx, y: (r + 0.5) * sy, r: size / 2 });\n        if (citizen.isHappy) {\n          ctx.fill();\n        } else {\n          ctx.stroke();\n        }\n      } else {\n        ctx.fillStyle = '#a0c';\n        const x = (c + 0.5) * sx - size / 2;\n        const y = (r + 0.5) * sy - size / 2;\n        if (citizen.isHappy) {\n          ctx.fillRect(x, y, size, size);\n        } else {\n          ctx.strokeRect(x, y, size, size);\n        }\n      }\n    })\n  );\n  if (showmoves) {\n    ctx.strokeStyle = '#222';\n    ctx.fillStyle = '#222';\n    ctx.globalAlpha = 0.5;\n    ctx.lineWidth = 1;\n    data.grid.forEach((row, r) => {\n      row.forEach((citizen, c) => {\n        if (citizen.prevX !== undefined) {\n          const { prevX, prevY } = citizen;\n          if (prevX !== c || prevY !== r) {\n            // citizen has moved\n\n            const x0 = sx * (prevX + 0.5);\n            const x1 = sx * (c + 0.5);\n\n            const y0 = sy * (prevY + 0.5);\n            const y1 = sy * (r + 0.5);\n\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            circle({ x: x0, y: y0, r: size / 4 });\n            ctx.fill();\n            circle({ x: x1, y: y1, r: size / 4 });\n            ctx.fill();\n          }\n        }\n      });\n    });\n  }\n};\n\nexport const Frame = props => <CanvasFrame draw={draw} {...props} />;\n\nconst series = {\n  label: 'Happiness',\n  accessor: d => d.happy,\n};\n\nconst counterSeries = [\n  {\n    label: 'Happiness',\n    accessor: d => `${Math.floor(1000 * Number(d.happiness.toFixed(3))) / 10}%`,\n  },\n  { label: 'Total moves', accessor: d => d.totalMoves },\n];\n\nexport const params = {\n  cols: 20,\n  rows: 20,\n  height: 330,\n  width: 330,\n  tolerance: 60,\n  proportion: 50,\n  showmoves: true,\n  threshold: 99,\n};\n\nconst Segregation = props => (\n  <Model\n    initialParams={{ ...params, ...props.extraParams }}\n    initData={initData}\n    updateData={updateData}\n    maxTime={50}\n    delay={100}\n    controls={[\n      { param: 'tolerance', label: 'Tolerance' },\n      { param: 'proportion', label: 'Proportion' },\n      { param: 'threshold', label: 'Threshold' },\n      { param: 'showmoves', label: 'Show moves', type: 'toggle' },\n    ]}\n    {...props}\n  >\n    <Flex flexDirection=\"column\">\n      <Frame />\n      <TimeSeries series={series} />\n      <Counter series={counterSeries} />\n    </Flex>\n  </Model>\n);\n\nexport default Segregation;\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\nexport const Frame = ({ tick }) => {\n  const data = Array(10)\n    .fill(0)\n    .map((r, y) =>\n      Array(10)\n        .fill(0)\n        .map((c, x) => (10 * y + x > tick ? 0 : 1))\n    );\n  return <Grid data={data} size={36} />;\n};\n\nconst SimpleModel = props => (\n  <Model {...props}>\n    <Frame />\n  </Model>\n);\n\nexport default SimpleModel;\n","// constants\n\nexport const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\n\nexport const DIRECTIONS = [UP, RIGHT, DOWN, LEFT];\n\nexport const opposite = [DOWN, LEFT, UP, RIGHT];\nexport const IS_VERTICAL = [true, false, true, false];\nexport const IS_HORIZONTAL = [false, true, false, true];\n\nexport const v = [\n  [0, -1],\n  [1, 0],\n  [0, 1],\n  [-1, 0],\n];\n\nexport const getDir = v.reduce((prev, curr, i) => {\n  prev[curr] = i;\n  return prev;\n}, {});\n\n// helpers\n\nexport function getRandomInBounds(min, max, random = Math.random) {\n  // returns a random integer within [min, max]\n  // (bounds are included)\n  return min + Math.floor(random() * (max + 1 - min));\n}\n\nexport function isValid(x, y, visited, height, width) {\n  // returns whether one of the pathfinding functions can consider a cell\n  if (x < 0 || x > width - 1 || y < 0 || y > height - 1) {\n    return false;\n  }\n  if (visited[[x, y]]) {\n    return false;\n  }\n  return true;\n}\n\nexport function initVisited(grid = [[]], path = []) {\n  // refreshes the \"visited\" object\n  // every snake cell in the grid is marked as visited,\n  // every cell in the path as well.\n  // both are optional.\n\n  // because this is an object, it can be inadvertantly mutated\n  // so it's safer to reinitialize it after each use\n  const visited = grid.reduce(\n    (results, row, r) =>\n      row.reduce((rowResults, cell, c) => {\n        if (cell > 0) {\n          rowResults[[c, r]] = true;\n        }\n        return rowResults;\n      }, results),\n    {}\n  );\n  path.forEach(([r, c]) => (visited[[r, c]] = true));\n  return visited;\n}\n\nexport function getShortestPath({ grid, start, end }) {\n  // finds shortest path between start and end given status of a grid\n  // where visited cells can't be crossed\n\n  const height = grid.length;\n  if (height === 0) {\n    return [];\n  }\n  const width = grid[0].length;\n\n  const visited = initVisited(grid);\n  delete visited[end];\n  // paths - for each node, shortest path to reach that node from start\n  const paths = {};\n  const next = [start];\n  paths[start] = [start];\n  let found = false;\n  while (next.length && !found) {\n    const node = next.shift();\n    /* eslint-disable no-loop-func */\n    DIRECTIONS.forEach(d => {\n      // step is next node in that direction, from node\n      const step = [node[0] + v[d][0], node[1] + v[d][1]];\n      const [x, y] = step;\n      if (!isValid(x, y, visited, height, width)) {\n        return;\n      }\n      visited[step] = true;\n      paths[step] = paths[node].concat([step]);\n      if (x === end[0] && y === end[1]) {\n        found = true;\n      }\n      // we add each step to our queue. it's important to do BFS here\n      next.push(step);\n    });\n  }\n  // out shortest path\n  return paths[end];\n}\n\nexport function getLongestPath({ grid, start, end }) {\n  const height = grid.length;\n  if (height === 0) {\n    return [];\n  }\n  const width = grid[0].length;\n\n  let stack = getShortestPath({\n    grid,\n    start,\n    end,\n  }) || [start];\n\n  let visited = initVisited(grid, stack);\n  let longestPath = [stack.shift()];\n\n  // the general idea is that we start from the shortest path from start\n  // to end.\n\n  // then, for each segment in that path, we try to see if we can extend\n  // it by adding a pair of adjacent points.\n  // we continue until we run out of pair of points we can add to that path.\n\n  while (stack.length) {\n    const updatedPath = extendPath({\n      height,\n      longestPath,\n      stack,\n      visited,\n      width,\n    });\n    stack = updatedPath.stack;\n    visited = updatedPath.visited;\n    longestPath = updatedPath.longestPath;\n  }\n\n  return longestPath;\n}\n\nexport function extendPath({ height, longestPath, stack, visited, width }) {\n  const lastInLongestPath = longestPath[longestPath.length - 1];\n  visited[lastInLongestPath] = true;\n  const nextInStack = stack.shift();\n\n  // last in path to next in stack form a segment.\n  // we are trying to see if the 2 points to the right, or 2 points to the left are\n  // valid. if so, we'll add them to the stack.\n\n  // ie - last in path = l, next in stack = n, valid = ., invalid = x\n  // xxxxxx xxxxxxx xxxxxxx xxxxxxx\n  // x.n..x x.....x x.....x x.x...x\n  // x.lx.x x..ln.x xxl...x x.nl..x\n  // x....x x..x..x x.n...x x.....x\n  // xxxxxx xxxxxxx xxxxxxx xxxxxxx\n  //\n  // in each of these 4 examples, 2 points to the left of ln are both valid.\n  // so we can push them to the stack\n  // only one of the 2 points to the right of ln are valid. so we can't push them to the stack\n  // not 100% sure of that, but i think with how we build the path, having 2 points to right\n  // valid and 2 points to left valid is exclusive.\n  // valid points = not visited, not off bounds\n\n  const dx = nextInStack[0] - lastInLongestPath[0];\n  const dy = nextInStack[1] - lastInLongestPath[1];\n\n  const rightPoints = [\n    [lastInLongestPath[0] - dy, lastInLongestPath[1] - dx],\n    [nextInStack[0] - dy, nextInStack[1] - dx],\n  ];\n  const leftPoints = [\n    [lastInLongestPath[0] + dy, lastInLongestPath[1] + dx],\n    [nextInStack[0] + dy, nextInStack[1] + dx],\n  ];\n\n  if (\n    isValid(...rightPoints[0], visited, height, width) &&\n    isValid(...rightPoints[1], visited, height, width)\n  ) {\n    stack.unshift(nextInStack);\n    stack.unshift(rightPoints[1]);\n    stack.unshift(rightPoints[0]);\n    visited[rightPoints[0]] = true;\n    visited[rightPoints[1]] = true;\n  } else {\n    if (\n      isValid(...leftPoints[0], visited, height, width) &&\n      isValid(...leftPoints[1], visited, height, width)\n    ) {\n      stack.unshift(nextInStack);\n      stack.unshift(leftPoints[1]);\n      stack.unshift(leftPoints[0]);\n      visited[leftPoints[0]] = true;\n      visited[leftPoints[1]] = true;\n    } else {\n      // we can't add either both right points or both left points to stack.\n      // Great! we add nextInStack to the path, and continue.\n      longestPath.push(nextInStack);\n    }\n  }\n  return {\n    stack,\n    visited,\n    longestPath,\n    considered: [lastInLongestPath, nextInStack],\n  };\n}\n\nexport function getActionGrid({ grid, path = [], direction, stack = [] }) {\n  // we have on one hand, grid which is the position of the snake,\n  // and on the other, path which is the longest path from the cell\n  // which is in front of the snake to the one behind its tail.\n\n  // what we want is a lookup table that, for every coordinate that the\n  // head could find itself on, suggest the corresponding, safe action.\n\n  const totalPath = [...path, ...stack];\n  const actionGrid = grid.map(row =>\n    row.map(cell => (cell ? direction : undefined))\n  );\n  if (totalPath.length < 2) {\n    return actionGrid;\n  }\n  let node;\n\n  for (let i = 1; i < totalPath.length; i++) {\n    const prev = totalPath[i - 1];\n    node = totalPath[i];\n    const dx = node[0] - prev[0];\n    const dy = node[1] - prev[1];\n    const [c, r] = prev;\n    actionGrid[r][c] = getDir[[dx, dy]];\n  }\n\n  // we should have a complete actionGrid except for the very last node\n  // of path\n\n  // it goes towards the tail of the snake. in our case it's direction\n  if (direction) {\n    const [c, r] = node;\n\n    actionGrid[r][c] = direction;\n  }\n  return actionGrid;\n}\n\nexport function isFullGrid(actionGrid) {\n  return actionGrid.every(row => row.every(cell => cell !== undefined));\n}\n\nexport function positionFruit(grid, random = Math.random) {\n  const eligiblePositions = grid.reduce(\n    (results, row, r) =>\n      row.reduce((resultRow, cell, c) => {\n        if (cell === 0) {\n          resultRow.push([c, r]);\n        }\n        return resultRow;\n      }, results),\n    []\n  );\n  if (eligiblePositions.length === 0) {\n    return null;\n  }\n  const randomPosition = Math.floor(random() * eligiblePositions.length);\n  return eligiblePositions[randomPosition];\n}\n\nexport function addToGrid(grid, path) {\n  const updatedGrid = grid.map(row => row.map(cell => cell));\n  path.forEach(([c, r]) => (updatedGrid[r][c] = 1));\n  return updatedGrid;\n}\n","import React from 'react';\nimport { CanvasFrame, withTheme } from 'react-sim';\n\nimport { IS_VERTICAL, UP, RIGHT, DOWN, LEFT, opposite } from './helpers';\n\nconst snakeToCellRatio = 0.8;\n\nexport const draw = ({\n  ctx,\n  circle,\n  data,\n  params: {\n    cellSize,\n    displayGrid,\n    displayHead,\n    displayCircuit,\n    width: cols,\n    height: rows,\n  },\n  height,\n  width,\n  roundRectangle,\n  theme,\n  tick,\n}) => {\n  const { accent, muted, primary, secondary, gray } = theme.colors;\n  const {\n    bestPath,\n    considered,\n    snakePath = [],\n    actionGrid,\n    direction = 0,\n    fruit,\n  } = data;\n  ctx.clearRect(0, 0, width, height);\n  // grid\n\n  if (displayGrid) {\n    ctx.strokeStyle = gray;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        ctx.strokeRect(j * cellSize, i * cellSize, cellSize, cellSize);\n      }\n    }\n  }\n  // actionGrid\n  if (displayCircuit) {\n    ctx.strokeStyle = bestPath ? accent : secondary;\n    drawActionGrid({ actionGrid, cellSize, circle, considered, ctx });\n  }\n  // fruit\n  if (fruit) {\n    ctx.fillStyle = secondary;\n    ctx.fillRect(\n      (fruit[0] + 0.2) * cellSize,\n      (fruit[1] + 0.2) * cellSize,\n      0.6 * cellSize,\n      0.6 * cellSize\n    );\n  }\n  snakePath.forEach((coords, i) => {\n    const next = snakePath[i + 1];\n    const [c0, r0] = coords;\n    ctx.fillStyle = primary;\n    if (next) {\n      // not head\n\n      const [c1, r1] = next;\n      const x = cellSize * (Math.min(c1, c0) + (1 - snakeToCellRatio) / 2);\n      const y = cellSize * (Math.min(r1, r0) + (1 - snakeToCellRatio) / 2);\n\n      const width =\n        cellSize * (c0 === c1 ? snakeToCellRatio : 2 - (1 - snakeToCellRatio));\n      const height =\n        cellSize * (r0 === r1 ? snakeToCellRatio : 2 - (1 - snakeToCellRatio));\n\n      const r = (snakeToCellRatio * cellSize) / 2;\n      roundRectangle({ x, y, width, height, r: cellSize / 2 });\n      ctx.fill();\n    } else {\n      if (displayHead) {\n        // head\n        const x = (c0 + 0.5) * cellSize;\n        const y = (r0 + 0.5) * cellSize;\n        const r = (cellSize * snakeToCellRatio) / 2;\n        circle({ x, y, r });\n        ctx.fill();\n        ctx.fillStyle = '#fff';\n        const prev = snakePath[i - 1];\n        // eyes\n        switch (direction) {\n          case UP:\n            circle({ x: x - 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x + 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n          case DOWN:\n            circle({ x: x - 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x + 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n          case LEFT:\n            circle({ x: x - 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x - 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n          case RIGHT:\n            circle({ x: x + 0.5 * r, y: y - 0.5 * r, r: 2 });\n            ctx.fill();\n            circle({ x: x + 0.5 * r, y: y + 0.5 * r, r: 2 });\n            ctx.fill();\n            break;\n        }\n      }\n    }\n  });\n};\n\nexport const drawActionGrid = ({\n  actionGrid,\n  cellSize,\n  circle,\n  considered,\n  ctx,\n}) => {\n  function horizontal(r, c) {\n    ctx.beginPath();\n    ctx.moveTo(c * cellSize, (r + 0.5) * cellSize);\n    ctx.lineTo((c + 1) * cellSize, (r + 0.5) * cellSize);\n    ctx.stroke();\n  }\n  function vertical(r, c) {\n    ctx.beginPath();\n    ctx.moveTo((c + 0.5) * cellSize, r * cellSize);\n    ctx.lineTo((c + 0.5) * cellSize, (r + 1) * cellSize);\n    ctx.stroke();\n  }\n  function topLeft(r, c) {\n    ctx.beginPath();\n    ctx.arc(c * cellSize, r * cellSize, cellSize / 2, 0, Math.PI / 2, false);\n    ctx.stroke();\n  }\n  function topRight(r, c) {\n    ctx.beginPath();\n    ctx.arc(\n      (c + 1) * cellSize,\n      r * cellSize,\n      cellSize / 2,\n      Math.PI / 2,\n      Math.PI,\n      false\n    );\n    ctx.stroke();\n  }\n  function bottomLeft(r, c) {\n    ctx.beginPath();\n    ctx.arc(\n      c * cellSize,\n      (r + 1) * cellSize,\n      cellSize / 2,\n      -Math.PI / 2,\n      0,\n      false\n    );\n    ctx.stroke();\n  }\n  function bottomRight(r, c) {\n    ctx.beginPath();\n    ctx.arc(\n      (c + 1) * cellSize,\n      (r + 1) * cellSize,\n      cellSize / 2,\n      Math.PI,\n      -Math.PI / 2,\n      false\n    );\n    ctx.stroke();\n  }\n  if (considered) {\n    considered.forEach(([x, y]) => {\n      circle({\n        x: (x + 0.5) * cellSize,\n        y: (y + 0.5) * cellSize,\n        r: cellSize / 4,\n      });\n      ctx.stroke();\n    });\n  }\n  actionGrid.forEach((row, r) => {\n    row.forEach((action, c) => {\n      switch (action) {\n        case UP:\n          if (c > 0 && actionGrid[r][c - 1] === RIGHT) {\n            topLeft(r, c);\n          } else {\n            if (actionGrid[r][c + 1] === LEFT) {\n              topRight(r, c);\n            } else {\n              vertical(r, c);\n            }\n          }\n          break;\n        case DOWN:\n          if (c > 0 && actionGrid[r][c - 1] === RIGHT) {\n            bottomLeft(r, c);\n          } else {\n            if (actionGrid[r][c + 1] === LEFT) {\n              bottomRight(r, c);\n            } else {\n              vertical(r, c);\n            }\n          }\n          break;\n        case RIGHT:\n          if (r > 0 && actionGrid[r - 1][c] === DOWN) {\n            topRight(r, c);\n          } else {\n            if (actionGrid[r + 1] && actionGrid[r + 1][c] === UP) {\n              bottomRight(r, c);\n            } else {\n              horizontal(r, c);\n            }\n          }\n          break;\n        case LEFT:\n          if (r > 0 && actionGrid[r - 1][c] === DOWN) {\n            topLeft(r, c);\n          } else {\n            if (actionGrid[r + 1] && actionGrid[r + 1][c] === UP) {\n              bottomLeft(r, c);\n            } else {\n              horizontal(r, c);\n            }\n          }\n          break;\n      }\n    });\n  });\n};\n\nconst CanvasSnakeFrame = props => {\n  const {\n    params: { height, width, cellSize },\n  } = props;\n  return (\n    <CanvasFrame\n      draw={draw}\n      {...props}\n      height={height * cellSize}\n      width={width * cellSize}\n    />\n  );\n};\n\nexport default withTheme(CanvasSnakeFrame);\n","import {\n  UP,\n  RIGHT,\n  DOWN,\n  LEFT,\n  addToGrid,\n  extendPath,\n  getActionGrid,\n  getLongestPath,\n  getRandomInBounds,\n  getShortestPath,\n  initVisited,\n  opposite,\n  positionFruit,\n  v,\n} from './helpers';\n\n// init\n\nexport function initSnake(\n  {\n    directionRandom,\n    directionText,\n    height,\n    width,\n    initialLength,\n    snakePosRandom,\n    xHead,\n    yHead,\n  },\n  random = Math.random\n) {\n  const direction = directionRandom\n    ? Math.floor(random() * 4)\n    : { up: 0, right: 1, down: 2, left: 3 }[directionText];\n\n  // position of snake head\n\n  const minX = direction === RIGHT ? initialLength + 2 : 2;\n  const maxX = width - 1 - (direction === LEFT ? initialLength + 2 : 2);\n  const minY = direction === DOWN ? initialLength + 2 : 2;\n  const maxY = height - 1 - (direction === UP ? initialLength + 2 : 2);\n\n  if (snakePosRandom) {\n    // bounding box where the snake head can be\n\n    xHead = getRandomInBounds(minX, maxX, random);\n    yHead = getRandomInBounds(minY, maxY, random);\n  } else {\n    xHead = Math.min(maxX, Math.max(minX, xHead));\n    yHead = Math.min(maxY, Math.max(minY, yHead));\n  }\n\n  // initial empty grid\n\n  const grid = [];\n  for (let i = 0; i < height; i++) {\n    const row = [];\n    for (let j = 0; j < width; j++) {\n      row.push(0);\n    }\n    grid.push(row);\n  }\n\n  const head = [xHead, yHead];\n  let tail = [];\n  let snakePath = [];\n  // positioning snake\n\n  for (let s = 0; s < initialLength; s++) {\n    // opposite[direction] - if direction is right, we\n    // want to draw snake left of its head\n\n    // v - x,y vector of movement for a direction\n\n    const x = xHead + s * v[opposite[direction]][0];\n    const y = yHead + s * v[opposite[direction]][1];\n\n    // grid - 1 = head, 2 ... n = body of snake, 0 = empty cells\n    grid[y][x] = s + 1;\n\n    snakePath.unshift([x, y]);\n    // tail will be overwritten until the actual tail isn't\n    tail = [x, y];\n  }\n\n  const behindTail = [\n    tail[0] + v[opposite[direction]][0],\n    tail[1] + v[opposite[direction]][1],\n  ];\n\n  const frontOfSnake = [xHead + v[direction][0], yHead + v[direction][1]];\n\n  return {\n    behindTail,\n    direction,\n    frontOfSnake,\n    grid,\n    length: initialLength,\n    head,\n    snakePath,\n    tail,\n  };\n}\n\nexport function initSnakeGrid(params, random = Math.random) {\n  const { grid, head, tail, direction, snakePath } = initSnake(params, random);\n\n  const stack = getShortestPath({ grid, start: head, end: tail, direction });\n  const visited = initVisited(grid, stack);\n  const longestPath = [...snakePath, stack.shift()];\n\n  const actionGrid = getActionGrid({\n    grid,\n    path: longestPath,\n    stack,\n    direction,\n  });\n  return {\n    actionGrid,\n    direction,\n    grid,\n    stack,\n    visited,\n    longestPath,\n  };\n}\n\nexport function initSnakeGame(params, random = Math.random) {\n  const { grid, head, tail, direction, length, snakePath } = initSnake(\n    params,\n    random\n  );\n\n  const fruit = positionFruit(grid, random);\n\n  const longestPath = getLongestPath({\n    grid,\n    start: head,\n    end: tail,\n  });\n\n  const actionGrid = getActionGrid({ grid, path: longestPath, direction });\n\n  return {\n    head,\n    grid,\n    direction,\n    actionGrid,\n    fruit,\n    length,\n    snakePath,\n    bestPath: false,\n  };\n}\n\n// update\n\nexport function updateSnake({ data, params, complete }, random = Math.random) {\n  const { actionGrid, bestPath, grid, direction, head, fruit, length } = data;\n  let updatedActionGrid = actionGrid;\n  let updatedBestPath = bestPath;\n  const { fruitGrowth, height, width, safeMode } = params;\n  let snakePath = [];\n  const updatedGrid = grid.map((row, r) =>\n    row.map((cell, c) => {\n      if (cell === 0 || cell + 1 > length) {\n        return 0;\n      }\n      snakePath[length - cell - 1] = [c, r];\n      return cell + 1;\n    })\n  );\n  while (snakePath[0] === undefined) {\n    snakePath.shift();\n  }\n  const tail = snakePath[0];\n\n  // new position of head, based on previous direction\n  const updatedHead = [head[0] + v[direction][0], head[1] + v[direction][1]];\n\n  if (\n    // collision with snake\n    updatedGrid[updatedHead[1]][updatedHead[0]] !== 0 ||\n    // collision with walls\n    updatedHead[0] >= width ||\n    updatedHead[0] < 0 ||\n    updatedHead[1] >= height ||\n    updatedHead[1] < 0\n  ) {\n    // ouch\n    complete();\n  }\n\n  // updating grid\n  updatedGrid[updatedHead[1]][updatedHead[0]] = 1;\n\n  if (updatedGrid.every(row => row.every(cell => cell))) {\n    // full grid\n    complete();\n  }\n\n  // checking if fruit is eaten, if so, increasing length - repositioning fruit\n  let updatedLength = length;\n  let updatedFruit = fruit ? [fruit[0], fruit[1]] : [-1, -1];\n  if (\n    updatedHead[0] === updatedFruit[0] &&\n    updatedHead[1] === updatedFruit[1]\n  ) {\n    updatedLength = Math.min(height * width, updatedLength + fruitGrowth);\n    if (!safeMode) {\n      // in safe mode, once we find a path that covers the grid, we stick\n      // to it until the end. in unsafe mode, we try to improve it with\n      // each fruit.\n      updatedBestPath = false;\n    }\n    updatedFruit = positionFruit(updatedGrid, random);\n  }\n\n  // figuring out if action grid should be updated\n\n  if (updatedBestPath === false) {\n    const pathToFruit = getShortestPath({\n      grid,\n      start: updatedHead,\n      end: updatedFruit,\n      direction,\n    });\n    if (pathToFruit) {\n      const tailToFruit = [...snakePath, ...pathToFruit];\n      const candidateGrid = addToGrid(updatedGrid, tailToFruit);\n      const backToTail = getLongestPath({\n        grid: candidateGrid,\n        start: updatedFruit,\n        end: tail,\n      });\n\n      // cicruit from tail to head to fruit back to tail, removing all dupe\n      // coords\n      const circuitLength = new Set(\n        [...tailToFruit, ...backToTail].map(d => d.join())\n      ).size;\n\n      if (circuitLength === height * width) {\n        // we found a way to go quickly but safely to the next fruit!\n        updatedActionGrid = getActionGrid({\n          grid,\n          path: tailToFruit,\n          stack: backToTail,\n        });\n        // no need to reevaluate it until next fruit\n        updatedBestPath = true;\n      }\n    }\n  }\n  // computing next direction, thanks to the action grid\n  const updatedDirection =\n    updatedActionGrid[updatedHead[1]][updatedHead[0]] ?? direction;\n\n  snakePath.push(updatedHead);\n\n  return {\n    actionGrid: updatedActionGrid,\n    bestPath: updatedBestPath,\n\n    direction: updatedDirection,\n    fruit: updatedFruit,\n    grid: updatedGrid,\n    head: updatedHead,\n    length: updatedLength,\n    snakePath,\n  };\n}\n\nexport function updateSnakeGrid({ data, params, complete }) {\n  const { direction, grid, longestPath, stack, visited } = data;\n  const { height, width } = params;\n  const updatedData = extendPath({\n    height,\n    longestPath,\n    stack,\n    visited,\n    width,\n  });\n  const actionGrid = getActionGrid({\n    grid,\n    path: longestPath,\n    stack,\n    direction,\n  });\n  if (stack.length === 0) {\n    complete();\n  }\n  return {\n    actionGrid,\n    considered: updatedData.considered,\n    direction,\n    grid,\n    longestPath: updatedData.longestPath,\n    stack: updatedData.stack,\n    visited: updatedData.visited,\n  };\n}\n","import React from 'react';\nimport Model from './framed-model';\nimport SnakeFrame from './snake/canvas';\nimport {\n  initSnakeGame,\n  initSnakeGrid,\n  updateSnake,\n  updateSnakeGrid,\n} from './snake/data';\n\n// update\n\nconst Snake = props => (\n  <Model\n    auto={false}\n    maxTime={Infinity}\n    noCache\n    controls={[\n      {\n        type: 'radio',\n        label: 'speed',\n        options: ['normal', 'fast', 'very fast'],\n        param: 'speed',\n        setParams: value =>\n          ({\n            normal: { delay: 100, ticksPerAnimation: 1, speed: 'normal' },\n            fast: { delay: 0, ticksPerAnimation: 1, speed: 'fast' },\n            'very fast': {\n              delay: 0,\n              ticksPerAnimation: 20,\n              speed: 'very fast',\n            },\n          }[value]),\n      },\n      [\n        {\n          type: 'toggle',\n          label: 'Display grid',\n          param: 'displayGrid',\n        },\n        {\n          type: 'toggle',\n          label: 'Display circuit',\n          param: 'displayCircuit',\n        },\n      ],\n    ]}\n    initData={initSnakeGame}\n    initialParams={{\n      cellSize: 16,\n      delay: 100,\n      displayCircuit: true,\n      displayGrid: false,\n      fruitGrowth: 4,\n      height: 20,\n      width: 20,\n      initialLength: 2,\n      safeMode: false,\n      speed: 'normal',\n      snakePosRandom: true,\n      directionRandom: true,\n      ...props.extraParams,\n    }}\n    updateData={updateSnake}\n    {...props}\n  >\n    <SnakeFrame />\n  </Model>\n);\n\nexport default Snake;\n\nexport const SnakeGrid = props => (\n  <Model\n    auto={false}\n    maxTime={Infinity}\n    initData={initSnakeGrid}\n    initialParams={{\n      cellSize: 16,\n      displayCircuit: true,\n      displayGrid: true,\n      fruitGrowth: 4,\n      height: 20,\n      width: 20,\n      initialLength: 2,\n      snakePosRandom: true,\n      directionRandom: true,\n    }}\n    updateData={updateSnakeGrid}\n    {...props}\n  >\n    <SnakeFrame />\n  </Model>\n);\n\nexport const SnakeGridDebugger = () => (\n  <Model\n    auto={false}\n    maxTime={Infinity}\n    initData={initSnakeGrid}\n    initialParams={{\n      cellSize: 25,\n      fruitGrowth: 4,\n      height: 10,\n      width: 10,\n      initialLength: 4,\n      xHead: 8,\n      yHead: 2,\n      directionText: 'right',\n      snakePosRandom: false,\n      directionRandom: false,\n      ticksPerAnimation: 1000,\n    }}\n    controls={[\n      {\n        type: 'range',\n        param: 'xHead',\n        minValue: 2,\n        maxValue: 18,\n        resetOnChange: true,\n      },\n      {\n        type: 'range',\n        param: 'yHead',\n        minValue: 2,\n        maxValue: 18,\n        resetOnChange: true,\n      },\n      {\n        type: 'radio',\n        param: 'directionText',\n        options: ['up', 'right', 'down', 'left'],\n        resetOnChange: true,\n      },\n    ]}\n    updateData={updateSnakeGrid}\n  >\n    <SnakeFrame />\n  </Model>\n);\n","import activators from '../../images/gifs/activators.gif';\nimport automata from '../../images/gifs/automata.gif';\nimport boids from '../../images/gifs/boids.gif';\nimport chaosGame from '../../images/gifs/chaos-game.gif';\nimport dice from '../../images/gifs/dice.gif';\nimport epidemic from '../../images/gifs/epidemic.gif';\nimport fibonacci from '../../images/gifs/fibonacci.gif';\nimport gameOfLife from '../../images/gifs/game-of-life.gif';\nimport maze from '../../images/gifs/maze.gif';\nimport percolation from '../../images/gifs/percolation.gif';\nimport segregation from '../../images/gifs/segregation.gif';\nimport simpleModel from '../../images/gifs/simple-model.gif';\nimport snake from '../../images/gifs/snake.gif';\n\nexport { default as Automata } from './automata';\nexport { default as Activators } from './activators';\nexport { default as Boids, ChillBoids } from './boids';\nexport { default as ChaosGame, BasicChaosGame } from './chaos-game';\nexport { default as Dice } from './dice';\nexport { default as Epidemic } from './epidemic';\nexport { default as Fibonacci, FibonacciNumbers } from './fibonacci';\nexport { default as GameOfLife } from './game-of-life';\nexport { default as Maze } from './mazes';\nexport { default as Percolation, PercolationGrid } from './percolation';\nexport { default as Segregation } from './segregation';\nexport { default as SimpleModel } from './simple-model';\nexport { default as Snake, SnakeGrid } from './snake';\n\nexport const gifs = {\n  activators,\n  automata,\n  boids,\n  'chaos-game': chaosGame,\n  dice,\n  epidemic,\n  fibonacci,\n  'game-of-life': gameOfLife,\n  mazes: maze,\n  percolation,\n  segregation,\n  'simple-model': simpleModel,\n  snake,\n};\n\nconst examples = {\n  automata: '1D automata',\n  activators: 'Activators/Inhibitors',\n  boids: 'Boids',\n  'chaos-game': 'Chaos Game',\n  dice: 'Dice Simulator',\n  epidemic: 'Epidemic Simulator',\n  fibonacci: 'Fibonacci Spiral',\n  'game-of-life': 'Game of Life',\n  mazes: 'Maze generation',\n  percolation: 'Percolation',\n  segregation: 'Segregation',\n  'simple-model': 'Simple Model',\n  snake: 'Snake Game',\n};\n\nexport default examples;\n","module.exports = __webpack_public_path__ + \"static/chaos-game-20c4833eb95ad08554ab0b5617f6907d.gif\";","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","module.exports = __webpack_public_path__ + \"static/maze-ffb52917c0e359f5c80d9a15aadf195f.gif\";","module.exports = __webpack_public_path__ + \"static/game-of-life-1ffe67497127dd5fad4ddf470e0f2fbb.gif\";","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","import React from 'react';\nimport { Grid } from 'react-sim';\n\nimport Model from './framed-model';\n\nconst stale = `0000010000000000010000000000\n0000000100010010000000000000\n1110001000000000000000000001\n1010000000000000000000000000\n0000000000100000000010110000\n0100000101010100000000000001\n0000000000010100000001000001\n0000000011100100000000100001\n0000010000000000000000010000\n0000000000010100000000000100`\n  .split('\\n')\n  .map(d => d.split('').map(Number));\n\n// helpers\n\nfunction countNeighbors(x, y, grid) {\n  const height = grid.length;\n  if (!height) {\n    return 0;\n  }\n  const width = grid[0].length;\n\n  let n = 0;\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\n      const x1 = x + xOffset;\n      const y1 = y + yOffset;\n      if (\n        x1 < width &&\n        x1 > 0 &&\n        y1 < height &&\n        y1 > 0 &&\n        (x1 !== x || y1 !== y)\n      ) {\n        n += grid[y1][x1];\n      }\n    }\n  }\n  return n;\n}\n\nexport function updateGameOfLifeGrid({ data, complete }) {\n  let changes = 0;\n  const updatedGrid = data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        changes++;\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        changes++;\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n  if (changes === 0) {\n    complete();\n  }\n  return updatedGrid;\n}\n\nexport function updateGridNoComplete({ data }) {\n  return data.map((row, y) =>\n    row.map((cell, x) => {\n      const neighbors = countNeighbors(x, y, data);\n      if (cell && (neighbors < 2 || neighbors > 3)) {\n        // living cell has too few or too many neighbors, and dies.\n        return 0;\n      }\n      if (!cell && neighbors === 3) {\n        // dead cell has the right amount of neighbors, and lives!\n        return 1;\n      }\n      // no change\n      return cell;\n    })\n  );\n}\n\nexport function initGrid({ height, width, density }, random = Math.random) {\n  return Array(height)\n    .fill(0)\n    .map(row =>\n      Array(width)\n        .fill(0)\n        .map(() => Number(random() < density))\n    );\n}\n\nconst GameOfLife = props => (\n  <Model\n    auto={false}\n    controls={{\n      param: 'density',\n      maxValue: 1,\n      step: 0.01,\n      resetOnChange: true,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    updateData={updateGameOfLifeGrid}\n    delay={100}\n    initData={initGrid}\n    initialParams={{\n      height: 28,\n      width: 28,\n      density: 0.15,\n    }}\n    {...props}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step2 = () => (\n  <Model\n    initData={initGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step3 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGridNoComplete}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step4 = () => (\n  <Model\n    initData={() => stale}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport const Step5 = () => (\n  <Model\n    controls={{\n      param: 'density',\n      resetOnChange: true,\n      maxValue: 1,\n      step: 0.01,\n      label: 'Grid density',\n    }}\n    showTimeSlider={false}\n    initData={initGrid}\n    updateData={updateGameOfLifeGrid}\n    initialParams={{\n      height: 10,\n      width: 28,\n      density: 0.15,\n    }}\n  >\n    <Grid />\n  </Model>\n);\n\nexport default GameOfLife;\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","module.exports = __webpack_public_path__ + \"static/activators-be81b3b3a90aa3408fd6b27ad5066309.gif\";","module.exports = __webpack_public_path__ + \"static/snake-8dd775e142dc168a12a3bf2d53835d48.gif\";","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","import React from 'react';\nimport { CanvasFrame } from 'react-sim';\nimport { Flex, Box } from 'rebass';\nimport Model from './framed-model';\n\nconst phi = 0.5 + Math.sqrt(5) / 2;\n\nconst D = {\n  0: 'right',\n  1: 'down',\n  2: 'left',\n  3: 'up',\n};\n\nconst colors = {\n  right: '#b6b6e2',\n  down: '#a6d3d9',\n  left: '#ffeb3b',\n  up: '#95d392',\n};\n\nexport function initData() {\n  return [0];\n}\n\nexport function updateData({ data, tick }) {\n  if (tick === 0) {\n    return [0];\n  }\n  if (tick === 1) {\n    return [0, 1];\n  }\n  const lastNumber = data[tick - 1] + data[tick - 2];\n  return [...data, lastNumber];\n}\n\nexport function draw({ ctx, params: { size }, tick }) {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, size, size);\n  let x = 0,\n    y = 0,\n    side = size;\n  for (let i = 0; i < tick; i++) {\n    const d = D[i % 4];\n    side = side / phi;\n    ctx.strokeStyle = '#ddd';\n    ctx.strokeRect(x, y, side, side);\n    ctx.strokeStyle = '#222';\n\n    const radius = Math.max(0, side - 1);\n    switch (d) {\n      case 'right':\n        ctx.beginPath();\n        ctx.arc(x + side, y + side, radius, Math.PI, -Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + side;\n        break;\n      case 'down':\n        ctx.beginPath();\n        ctx.arc(x, y + side, radius, -Math.PI / 2, 0);\n        ctx.stroke();\n        ctx.closePath();\n        x = x + (1 - 1 / phi) * side;\n        y = y + side;\n        break;\n      case 'left':\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI / 2);\n        ctx.stroke();\n        ctx.closePath();\n        x = x - side / phi;\n        y = y + (1 - 1 / phi) * side;\n        break;\n      case 'up':\n        ctx.beginPath();\n        ctx.arc(x + side, y, radius, Math.PI / 2, Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        y = y - side / phi;\n        break;\n      default:\n    }\n  }\n}\n\nexport const FibonacciSpiralFrame = ({ tick, params }) => {\n  const { size } = params;\n  const width = size;\n  const height = size / phi;\n\n  return <CanvasFrame height={height} width={width} draw={draw} />;\n};\n\nconst FibonacciSpiral = props => (\n  <Model initialParams={{ size: 332 }} delay={100} maxTime={15} {...props}>\n    <FibonacciSpiralFrame />\n  </Model>\n);\n\nexport const FibonacciSquaresFrame = ({ data, tick, params }) => {\n  let maxX = 0,\n    minX = 0,\n    maxY = 0,\n    minY = 0,\n    x = 0,\n    y = 0;\n  function renderSquares(sequence) {\n    return sequence.map((d, i) => {\n      const n = d * 10;\n      const direction = D[i % 4];\n      switch (direction) {\n        case 'right':\n          y = y - n;\n          break;\n        case 'left':\n          x = x - n;\n          break;\n        case 'up':\n          x = x - n;\n          y = y - n;\n          break;\n        default:\n      }\n      const borderWidth = Math.max(\n        0.1,\n        i < 2 ? 1 / params.size : 1 / (n + 10 * sequence[i - 1])\n      );\n\n      const fontSize = n / (1.5 * String(d).length);\n\n      const square = (\n        <div\n          key={`rect-${i}`}\n          style={{\n            position: 'absolute',\n            border: `#{borderWidth}px solid #777`,\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: colors[direction],\n            top: y,\n            left: x,\n            width: n,\n            height: n,\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            style={{\n              fontSize,\n            }}\n          >\n            {d}\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              width: 2 * n,\n              height: 2 * n,\n              border: `${borderWidth}px solid black`,\n              borderRadius: n,\n              boxSizing: 'border-box',\n              top: 0,\n              left: 0,\n              transform: {\n                right: undefined,\n                down: 'translate(-50%)',\n                left: 'translate(-50%,-50%)',\n                up: 'translate(0,-50%)',\n              }[direction],\n            }}\n          />\n        </div>\n      );\n      switch (direction) {\n        case 'right':\n          x = x + n;\n          break;\n        case 'down':\n          x = x + n;\n          y = y + n;\n          break;\n        case 'left':\n          y = y + n;\n          break;\n        default:\n      }\n      maxX = Math.max(maxX, x);\n      minX = Math.min(minX, x);\n      maxY = Math.max(maxY, y);\n      minY = Math.min(minY, y);\n      return square;\n    });\n  }\n\n  const squares = renderSquares(data.slice(1));\n  const maxSide = Math.max(maxX - minX, maxY - minY);\n  const scale = params.size / maxSide;\n\n  return (\n    <div\n      style={{\n        width: params.size,\n        height: params.size,\n        position: 'relative',\n        pointerEvents: 'none',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          transformOrigin: 'top left',\n          transform: `scale(${scale}) translate(${-minX}px,${-minY}px)`,\n          width: `${maxX - minX}px`,\n          height: `${maxY - minY}px`,\n          transition: 'transform 0.2s',\n        }}\n      >\n        {squares}\n      </div>\n    </div>\n  );\n};\n\nconst NumberFrame = ({ data }) => (\n  <Flex sx={{ flexDirection: 'row', flexWrap: 'wrap' }}>\n    {data.map((d, i) => (\n      <Box sx={{ m: 1, p: 2, bg: 'muted', fontSize: 1 }} key={i}>\n        {d}\n      </Box>\n    ))}\n  </Flex>\n);\nconst FibonacciNumbers = props => (\n  <Model initData={initData} updateData={updateData} maxTime={20} {...props}>\n    <NumberFrame />\n  </Model>\n);\n\nconst FibonacciSquares = props => (\n  <Model\n    initialParams={{ size: 332 }}\n    initData={initData}\n    updateData={updateData}\n    delay={400}\n    maxTime={12}\n    {...props}\n  >\n    <FibonacciSquaresFrame />\n  </Model>\n);\n\nexport { FibonacciSpiral, FibonacciSquares, FibonacciNumbers };\nexport default FibonacciSpiral;\n\n","module.exports = __webpack_public_path__ + \"static/boids-3faa93ffce35ab682f64305d2f1ddf82.gif\";"],"sourceRoot":""}