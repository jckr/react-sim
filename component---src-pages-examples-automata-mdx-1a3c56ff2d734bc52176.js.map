{"version":3,"sources":["webpack:///./src/pages/examples/automata.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kRAMO,IAAMA,EAAe,CAC1B,MAAS,eAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAUA,QAAQ,aAClB,qBAAG,+BAAGC,WAAW,KAAQ,CACrB,KAAQ,mEADT,wBAAH,wHAIA,kWAEqG,4BAFrG,mBAGA,2GACA,qEAAoD,+BAAGA,WAAW,KAAQ,CACtE,KAAQ,wCADwC,+BAOxDJ,EAAWK,gBAAiB","file":"component---src-pages-examples-automata-mdx-1a3c56ff2d734bc52176.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { Automata } from '../../components/examples/';\nexport const _frontmatter = {\n  \"Title\": \"1D automata\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"1d-automata\"\n    }}>{`1D Automata`}</h1>\n    <Automata mdxType=\"Automata\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://mathworld.wolfram.com/ElementaryCellularAutomaton.html\"\n      }}>{`1D cellular automata`}</a>{` are among the simplest of automata.\nEach line consists of a series of cells which are either set (colored) or not.`}</p>\n    <p>{`At each tick, we use a rule to determine whether cells on the next line will be set.\nFor each new cell, we consider the three cells above. There are 8 possible combinations - each of these cells can be set or not (so 2x2x2).\nFor each of these combinations, the rule determines whether the cell should be set or not. So we have 2`}<sup>{`8`}</sup>{` rules, or 256.`}</p>\n    <p>{`You can select a rule by adjusting the slider, or by clicking on each of the bits.`}</p>\n    <p>{`This simulation is an interesting example of `}<a parentName=\"p\" {...{\n        \"href\": \"/react-sim/controls/custom-controls\"\n      }}>{`custom control components`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}